// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `gcsystemmsgs.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:CMsgGCHVacVerificationChange)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCHVacVerificationChange {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCHVacVerificationChange.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgGCHVacVerificationChange.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCHVacVerificationChange.is_verified)
    pub is_verified: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCHVacVerificationChange.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCHVacVerificationChange {
    fn default() -> &'a CMsgGCHVacVerificationChange {
        <CMsgGCHVacVerificationChange as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCHVacVerificationChange {
    pub fn new() -> CMsgGCHVacVerificationChange {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional bool is_verified = 3;

    pub fn is_verified(&self) -> bool {
        self.is_verified.unwrap_or(false)
    }

    pub fn clear_is_verified(&mut self) {
        self.is_verified = ::std::option::Option::None;
    }

    pub fn has_is_verified(&self) -> bool {
        self.is_verified.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_verified(&mut self, v: bool) {
        self.is_verified = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CMsgGCHVacVerificationChange| { &m.steamid },
            |m: &mut CMsgGCHVacVerificationChange| { &mut m.steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CMsgGCHVacVerificationChange| { &m.appid },
            |m: &mut CMsgGCHVacVerificationChange| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_verified",
            |m: &CMsgGCHVacVerificationChange| { &m.is_verified },
            |m: &mut CMsgGCHVacVerificationChange| { &mut m.is_verified },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCHVacVerificationChange>(
            "CMsgGCHVacVerificationChange",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCHVacVerificationChange {
    const NAME: &'static str = "CMsgGCHVacVerificationChange";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.is_verified = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.is_verified {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.is_verified {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCHVacVerificationChange {
        CMsgGCHVacVerificationChange::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.is_verified = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCHVacVerificationChange {
        static instance: CMsgGCHVacVerificationChange = CMsgGCHVacVerificationChange {
            steamid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            is_verified: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCHVacVerificationChange {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCHVacVerificationChange").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCHVacVerificationChange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCHVacVerificationChange {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgGCHAccountPhoneNumberChange)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCHAccountPhoneNumberChange {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCHAccountPhoneNumberChange.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgGCHAccountPhoneNumberChange.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCHAccountPhoneNumberChange.phone_id)
    pub phone_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgGCHAccountPhoneNumberChange.is_verified)
    pub is_verified: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgGCHAccountPhoneNumberChange.is_identifying)
    pub is_identifying: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCHAccountPhoneNumberChange.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCHAccountPhoneNumberChange {
    fn default() -> &'a CMsgGCHAccountPhoneNumberChange {
        <CMsgGCHAccountPhoneNumberChange as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCHAccountPhoneNumberChange {
    pub fn new() -> CMsgGCHAccountPhoneNumberChange {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 phone_id = 3;

    pub fn phone_id(&self) -> u64 {
        self.phone_id.unwrap_or(0)
    }

    pub fn clear_phone_id(&mut self) {
        self.phone_id = ::std::option::Option::None;
    }

    pub fn has_phone_id(&self) -> bool {
        self.phone_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_phone_id(&mut self, v: u64) {
        self.phone_id = ::std::option::Option::Some(v);
    }

    // optional bool is_verified = 4;

    pub fn is_verified(&self) -> bool {
        self.is_verified.unwrap_or(false)
    }

    pub fn clear_is_verified(&mut self) {
        self.is_verified = ::std::option::Option::None;
    }

    pub fn has_is_verified(&self) -> bool {
        self.is_verified.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_verified(&mut self, v: bool) {
        self.is_verified = ::std::option::Option::Some(v);
    }

    // optional bool is_identifying = 5;

    pub fn is_identifying(&self) -> bool {
        self.is_identifying.unwrap_or(false)
    }

    pub fn clear_is_identifying(&mut self) {
        self.is_identifying = ::std::option::Option::None;
    }

    pub fn has_is_identifying(&self) -> bool {
        self.is_identifying.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_identifying(&mut self, v: bool) {
        self.is_identifying = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CMsgGCHAccountPhoneNumberChange| { &m.steamid },
            |m: &mut CMsgGCHAccountPhoneNumberChange| { &mut m.steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CMsgGCHAccountPhoneNumberChange| { &m.appid },
            |m: &mut CMsgGCHAccountPhoneNumberChange| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "phone_id",
            |m: &CMsgGCHAccountPhoneNumberChange| { &m.phone_id },
            |m: &mut CMsgGCHAccountPhoneNumberChange| { &mut m.phone_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_verified",
            |m: &CMsgGCHAccountPhoneNumberChange| { &m.is_verified },
            |m: &mut CMsgGCHAccountPhoneNumberChange| { &mut m.is_verified },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "is_identifying",
            |m: &CMsgGCHAccountPhoneNumberChange| { &m.is_identifying },
            |m: &mut CMsgGCHAccountPhoneNumberChange| { &mut m.is_identifying },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCHAccountPhoneNumberChange>(
            "CMsgGCHAccountPhoneNumberChange",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCHAccountPhoneNumberChange {
    const NAME: &'static str = "CMsgGCHAccountPhoneNumberChange";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.phone_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                32 => {
                    self.is_verified = ::std::option::Option::Some(is.read_bool()?);
                },
                40 => {
                    self.is_identifying = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.phone_id {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        if let Some(v) = self.is_verified {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_identifying {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.phone_id {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.is_verified {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.is_identifying {
            os.write_bool(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCHAccountPhoneNumberChange {
        CMsgGCHAccountPhoneNumberChange::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.phone_id = ::std::option::Option::None;
        self.is_verified = ::std::option::Option::None;
        self.is_identifying = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCHAccountPhoneNumberChange {
        static instance: CMsgGCHAccountPhoneNumberChange = CMsgGCHAccountPhoneNumberChange {
            steamid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            phone_id: ::std::option::Option::None,
            is_verified: ::std::option::Option::None,
            is_identifying: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCHAccountPhoneNumberChange {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCHAccountPhoneNumberChange").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCHAccountPhoneNumberChange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCHAccountPhoneNumberChange {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgGCHInviteUserToLobby)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCHInviteUserToLobby {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCHInviteUserToLobby.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgGCHInviteUserToLobby.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCHInviteUserToLobby.steamid_invited)
    pub steamid_invited: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgGCHInviteUserToLobby.steamid_lobby)
    pub steamid_lobby: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCHInviteUserToLobby.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCHInviteUserToLobby {
    fn default() -> &'a CMsgGCHInviteUserToLobby {
        <CMsgGCHInviteUserToLobby as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCHInviteUserToLobby {
    pub fn new() -> CMsgGCHInviteUserToLobby {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid_invited = 3;

    pub fn steamid_invited(&self) -> u64 {
        self.steamid_invited.unwrap_or(0)
    }

    pub fn clear_steamid_invited(&mut self) {
        self.steamid_invited = ::std::option::Option::None;
    }

    pub fn has_steamid_invited(&self) -> bool {
        self.steamid_invited.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid_invited(&mut self, v: u64) {
        self.steamid_invited = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid_lobby = 4;

    pub fn steamid_lobby(&self) -> u64 {
        self.steamid_lobby.unwrap_or(0)
    }

    pub fn clear_steamid_lobby(&mut self) {
        self.steamid_lobby = ::std::option::Option::None;
    }

    pub fn has_steamid_lobby(&self) -> bool {
        self.steamid_lobby.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid_lobby(&mut self, v: u64) {
        self.steamid_lobby = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CMsgGCHInviteUserToLobby| { &m.steamid },
            |m: &mut CMsgGCHInviteUserToLobby| { &mut m.steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CMsgGCHInviteUserToLobby| { &m.appid },
            |m: &mut CMsgGCHInviteUserToLobby| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid_invited",
            |m: &CMsgGCHInviteUserToLobby| { &m.steamid_invited },
            |m: &mut CMsgGCHInviteUserToLobby| { &mut m.steamid_invited },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid_lobby",
            |m: &CMsgGCHInviteUserToLobby| { &m.steamid_lobby },
            |m: &mut CMsgGCHInviteUserToLobby| { &mut m.steamid_lobby },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCHInviteUserToLobby>(
            "CMsgGCHInviteUserToLobby",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCHInviteUserToLobby {
    const NAME: &'static str = "CMsgGCHInviteUserToLobby";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                25 => {
                    self.steamid_invited = ::std::option::Option::Some(is.read_fixed64()?);
                },
                33 => {
                    self.steamid_lobby = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.steamid_invited {
            my_size += 1 + 8;
        }
        if let Some(v) = self.steamid_lobby {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.steamid_invited {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.steamid_lobby {
            os.write_fixed64(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCHInviteUserToLobby {
        CMsgGCHInviteUserToLobby::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.steamid_invited = ::std::option::Option::None;
        self.steamid_lobby = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCHInviteUserToLobby {
        static instance: CMsgGCHInviteUserToLobby = CMsgGCHInviteUserToLobby {
            steamid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            steamid_invited: ::std::option::Option::None,
            steamid_lobby: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCHInviteUserToLobby {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCHInviteUserToLobby").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCHInviteUserToLobby {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCHInviteUserToLobby {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CMsgGCHRecurringSubscriptionStatusChange)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGCHRecurringSubscriptionStatusChange {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCHRecurringSubscriptionStatusChange.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgGCHRecurringSubscriptionStatusChange.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCHRecurringSubscriptionStatusChange.agreementid)
    pub agreementid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgGCHRecurringSubscriptionStatusChange.active)
    pub active: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCHRecurringSubscriptionStatusChange.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCHRecurringSubscriptionStatusChange {
    fn default() -> &'a CMsgGCHRecurringSubscriptionStatusChange {
        <CMsgGCHRecurringSubscriptionStatusChange as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCHRecurringSubscriptionStatusChange {
    pub fn new() -> CMsgGCHRecurringSubscriptionStatusChange {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional fixed64 agreementid = 3;

    pub fn agreementid(&self) -> u64 {
        self.agreementid.unwrap_or(0)
    }

    pub fn clear_agreementid(&mut self) {
        self.agreementid = ::std::option::Option::None;
    }

    pub fn has_agreementid(&self) -> bool {
        self.agreementid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_agreementid(&mut self, v: u64) {
        self.agreementid = ::std::option::Option::Some(v);
    }

    // optional bool active = 4;

    pub fn active(&self) -> bool {
        self.active.unwrap_or(false)
    }

    pub fn clear_active(&mut self) {
        self.active = ::std::option::Option::None;
    }

    pub fn has_active(&self) -> bool {
        self.active.is_some()
    }

    // Param is passed by value, moved
    pub fn set_active(&mut self, v: bool) {
        self.active = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CMsgGCHRecurringSubscriptionStatusChange| { &m.steamid },
            |m: &mut CMsgGCHRecurringSubscriptionStatusChange| { &mut m.steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CMsgGCHRecurringSubscriptionStatusChange| { &m.appid },
            |m: &mut CMsgGCHRecurringSubscriptionStatusChange| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "agreementid",
            |m: &CMsgGCHRecurringSubscriptionStatusChange| { &m.agreementid },
            |m: &mut CMsgGCHRecurringSubscriptionStatusChange| { &mut m.agreementid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "active",
            |m: &CMsgGCHRecurringSubscriptionStatusChange| { &m.active },
            |m: &mut CMsgGCHRecurringSubscriptionStatusChange| { &mut m.active },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCHRecurringSubscriptionStatusChange>(
            "CMsgGCHRecurringSubscriptionStatusChange",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCHRecurringSubscriptionStatusChange {
    const NAME: &'static str = "CMsgGCHRecurringSubscriptionStatusChange";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                25 => {
                    self.agreementid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                32 => {
                    self.active = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.agreementid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.active {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.agreementid {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.active {
            os.write_bool(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCHRecurringSubscriptionStatusChange {
        CMsgGCHRecurringSubscriptionStatusChange::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.agreementid = ::std::option::Option::None;
        self.active = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCHRecurringSubscriptionStatusChange {
        static instance: CMsgGCHRecurringSubscriptionStatusChange = CMsgGCHRecurringSubscriptionStatusChange {
            steamid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            agreementid: ::std::option::Option::None,
            active: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCHRecurringSubscriptionStatusChange {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCHRecurringSubscriptionStatusChange").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCHRecurringSubscriptionStatusChange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCHRecurringSubscriptionStatusChange {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CQuest_PublisherAddCommunityItemsToPlayer_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CQuest_PublisherAddCommunityItemsToPlayer_Request {
    // message fields
    // @@protoc_insertion_point(field:CQuest_PublisherAddCommunityItemsToPlayer_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CQuest_PublisherAddCommunityItemsToPlayer_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CQuest_PublisherAddCommunityItemsToPlayer_Request.match_item_type)
    pub match_item_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CQuest_PublisherAddCommunityItemsToPlayer_Request.match_item_class)
    pub match_item_class: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CQuest_PublisherAddCommunityItemsToPlayer_Request.prefix_item_name)
    pub prefix_item_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CQuest_PublisherAddCommunityItemsToPlayer_Request.attributes)
    pub attributes: ::std::vec::Vec<cquest_publisher_add_community_items_to_player_request::Attribute>,
    // @@protoc_insertion_point(field:CQuest_PublisherAddCommunityItemsToPlayer_Request.note)
    pub note: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CQuest_PublisherAddCommunityItemsToPlayer_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CQuest_PublisherAddCommunityItemsToPlayer_Request {
    fn default() -> &'a CQuest_PublisherAddCommunityItemsToPlayer_Request {
        <CQuest_PublisherAddCommunityItemsToPlayer_Request as ::protobuf::Message>::default_instance()
    }
}

impl CQuest_PublisherAddCommunityItemsToPlayer_Request {
    pub fn new() -> CQuest_PublisherAddCommunityItemsToPlayer_Request {
        ::std::default::Default::default()
    }

    // optional uint64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint32 match_item_type = 3;

    pub fn match_item_type(&self) -> u32 {
        self.match_item_type.unwrap_or(0)
    }

    pub fn clear_match_item_type(&mut self) {
        self.match_item_type = ::std::option::Option::None;
    }

    pub fn has_match_item_type(&self) -> bool {
        self.match_item_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_match_item_type(&mut self, v: u32) {
        self.match_item_type = ::std::option::Option::Some(v);
    }

    // optional uint32 match_item_class = 4;

    pub fn match_item_class(&self) -> u32 {
        self.match_item_class.unwrap_or(0)
    }

    pub fn clear_match_item_class(&mut self) {
        self.match_item_class = ::std::option::Option::None;
    }

    pub fn has_match_item_class(&self) -> bool {
        self.match_item_class.is_some()
    }

    // Param is passed by value, moved
    pub fn set_match_item_class(&mut self, v: u32) {
        self.match_item_class = ::std::option::Option::Some(v);
    }

    // optional string prefix_item_name = 5;

    pub fn prefix_item_name(&self) -> &str {
        match self.prefix_item_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_prefix_item_name(&mut self) {
        self.prefix_item_name = ::std::option::Option::None;
    }

    pub fn has_prefix_item_name(&self) -> bool {
        self.prefix_item_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_prefix_item_name(&mut self, v: ::std::string::String) {
        self.prefix_item_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prefix_item_name(&mut self) -> &mut ::std::string::String {
        if self.prefix_item_name.is_none() {
            self.prefix_item_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.prefix_item_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_prefix_item_name(&mut self) -> ::std::string::String {
        self.prefix_item_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string note = 7;

    pub fn note(&self) -> &str {
        match self.note.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_note(&mut self) {
        self.note = ::std::option::Option::None;
    }

    pub fn has_note(&self) -> bool {
        self.note.is_some()
    }

    // Param is passed by value, moved
    pub fn set_note(&mut self, v: ::std::string::String) {
        self.note = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_note(&mut self) -> &mut ::std::string::String {
        if self.note.is_none() {
            self.note = ::std::option::Option::Some(::std::string::String::new());
        }
        self.note.as_mut().unwrap()
    }

    // Take field
    pub fn take_note(&mut self) -> ::std::string::String {
        self.note.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CQuest_PublisherAddCommunityItemsToPlayer_Request| { &m.steamid },
            |m: &mut CQuest_PublisherAddCommunityItemsToPlayer_Request| { &mut m.steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CQuest_PublisherAddCommunityItemsToPlayer_Request| { &m.appid },
            |m: &mut CQuest_PublisherAddCommunityItemsToPlayer_Request| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "match_item_type",
            |m: &CQuest_PublisherAddCommunityItemsToPlayer_Request| { &m.match_item_type },
            |m: &mut CQuest_PublisherAddCommunityItemsToPlayer_Request| { &mut m.match_item_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "match_item_class",
            |m: &CQuest_PublisherAddCommunityItemsToPlayer_Request| { &m.match_item_class },
            |m: &mut CQuest_PublisherAddCommunityItemsToPlayer_Request| { &mut m.match_item_class },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "prefix_item_name",
            |m: &CQuest_PublisherAddCommunityItemsToPlayer_Request| { &m.prefix_item_name },
            |m: &mut CQuest_PublisherAddCommunityItemsToPlayer_Request| { &mut m.prefix_item_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "attributes",
            |m: &CQuest_PublisherAddCommunityItemsToPlayer_Request| { &m.attributes },
            |m: &mut CQuest_PublisherAddCommunityItemsToPlayer_Request| { &mut m.attributes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "note",
            |m: &CQuest_PublisherAddCommunityItemsToPlayer_Request| { &m.note },
            |m: &mut CQuest_PublisherAddCommunityItemsToPlayer_Request| { &mut m.note },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CQuest_PublisherAddCommunityItemsToPlayer_Request>(
            "CQuest_PublisherAddCommunityItemsToPlayer_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CQuest_PublisherAddCommunityItemsToPlayer_Request {
    const NAME: &'static str = "CQuest_PublisherAddCommunityItemsToPlayer_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.steamid = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.match_item_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.match_item_class = ::std::option::Option::Some(is.read_uint32()?);
                },
                42 => {
                    self.prefix_item_name = ::std::option::Option::Some(is.read_string()?);
                },
                50 => {
                    self.attributes.push(is.read_message()?);
                },
                58 => {
                    self.note = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.match_item_type {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.match_item_class {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.prefix_item_name.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        for value in &self.attributes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.note.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.match_item_type {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.match_item_class {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.prefix_item_name.as_ref() {
            os.write_string(5, v)?;
        }
        for v in &self.attributes {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        if let Some(v) = self.note.as_ref() {
            os.write_string(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CQuest_PublisherAddCommunityItemsToPlayer_Request {
        CQuest_PublisherAddCommunityItemsToPlayer_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.match_item_type = ::std::option::Option::None;
        self.match_item_class = ::std::option::Option::None;
        self.prefix_item_name = ::std::option::Option::None;
        self.attributes.clear();
        self.note = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CQuest_PublisherAddCommunityItemsToPlayer_Request {
        static instance: CQuest_PublisherAddCommunityItemsToPlayer_Request = CQuest_PublisherAddCommunityItemsToPlayer_Request {
            steamid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            match_item_type: ::std::option::Option::None,
            match_item_class: ::std::option::Option::None,
            prefix_item_name: ::std::option::Option::None,
            attributes: ::std::vec::Vec::new(),
            note: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CQuest_PublisherAddCommunityItemsToPlayer_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CQuest_PublisherAddCommunityItemsToPlayer_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CQuest_PublisherAddCommunityItemsToPlayer_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CQuest_PublisherAddCommunityItemsToPlayer_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CQuest_PublisherAddCommunityItemsToPlayer_Request`
pub mod cquest_publisher_add_community_items_to_player_request {
    // @@protoc_insertion_point(message:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Attribute {
        // message fields
        // @@protoc_insertion_point(field:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute.attribute)
        pub attribute: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute.value)
        pub value: ::std::option::Option<u64>,
        // special fields
        // @@protoc_insertion_point(special_field:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Attribute {
        fn default() -> &'a Attribute {
            <Attribute as ::protobuf::Message>::default_instance()
        }
    }

    impl Attribute {
        pub fn new() -> Attribute {
            ::std::default::Default::default()
        }

        // optional uint32 attribute = 1;

        pub fn attribute(&self) -> u32 {
            self.attribute.unwrap_or(0)
        }

        pub fn clear_attribute(&mut self) {
            self.attribute = ::std::option::Option::None;
        }

        pub fn has_attribute(&self) -> bool {
            self.attribute.is_some()
        }

        // Param is passed by value, moved
        pub fn set_attribute(&mut self, v: u32) {
            self.attribute = ::std::option::Option::Some(v);
        }

        // optional uint64 value = 2;

        pub fn value(&self) -> u64 {
            self.value.unwrap_or(0)
        }

        pub fn clear_value(&mut self) {
            self.value = ::std::option::Option::None;
        }

        pub fn has_value(&self) -> bool {
            self.value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_value(&mut self, v: u64) {
            self.value = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "attribute",
                |m: &Attribute| { &m.attribute },
                |m: &mut Attribute| { &mut m.attribute },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "value",
                |m: &Attribute| { &m.value },
                |m: &mut Attribute| { &mut m.value },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Attribute>(
                "CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Attribute {
        const NAME: &'static str = "Attribute";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.attribute = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.value = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.attribute {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.value {
                my_size += ::protobuf::rt::uint64_size(2, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.attribute {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.value {
                os.write_uint64(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Attribute {
            Attribute::new()
        }

        fn clear(&mut self) {
            self.attribute = ::std::option::Option::None;
            self.value = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Attribute {
            static instance: Attribute = Attribute {
                attribute: ::std::option::Option::None,
                value: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Attribute {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Attribute {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Attribute {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CQuest_PublisherAddCommunityItemsToPlayer_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CQuest_PublisherAddCommunityItemsToPlayer_Response {
    // message fields
    // @@protoc_insertion_point(field:CQuest_PublisherAddCommunityItemsToPlayer_Response.items_matched)
    pub items_matched: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CQuest_PublisherAddCommunityItemsToPlayer_Response.items_granted)
    pub items_granted: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CQuest_PublisherAddCommunityItemsToPlayer_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CQuest_PublisherAddCommunityItemsToPlayer_Response {
    fn default() -> &'a CQuest_PublisherAddCommunityItemsToPlayer_Response {
        <CQuest_PublisherAddCommunityItemsToPlayer_Response as ::protobuf::Message>::default_instance()
    }
}

impl CQuest_PublisherAddCommunityItemsToPlayer_Response {
    pub fn new() -> CQuest_PublisherAddCommunityItemsToPlayer_Response {
        ::std::default::Default::default()
    }

    // optional uint32 items_matched = 1;

    pub fn items_matched(&self) -> u32 {
        self.items_matched.unwrap_or(0)
    }

    pub fn clear_items_matched(&mut self) {
        self.items_matched = ::std::option::Option::None;
    }

    pub fn has_items_matched(&self) -> bool {
        self.items_matched.is_some()
    }

    // Param is passed by value, moved
    pub fn set_items_matched(&mut self, v: u32) {
        self.items_matched = ::std::option::Option::Some(v);
    }

    // optional uint32 items_granted = 2;

    pub fn items_granted(&self) -> u32 {
        self.items_granted.unwrap_or(0)
    }

    pub fn clear_items_granted(&mut self) {
        self.items_granted = ::std::option::Option::None;
    }

    pub fn has_items_granted(&self) -> bool {
        self.items_granted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_items_granted(&mut self, v: u32) {
        self.items_granted = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "items_matched",
            |m: &CQuest_PublisherAddCommunityItemsToPlayer_Response| { &m.items_matched },
            |m: &mut CQuest_PublisherAddCommunityItemsToPlayer_Response| { &mut m.items_matched },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "items_granted",
            |m: &CQuest_PublisherAddCommunityItemsToPlayer_Response| { &m.items_granted },
            |m: &mut CQuest_PublisherAddCommunityItemsToPlayer_Response| { &mut m.items_granted },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CQuest_PublisherAddCommunityItemsToPlayer_Response>(
            "CQuest_PublisherAddCommunityItemsToPlayer_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CQuest_PublisherAddCommunityItemsToPlayer_Response {
    const NAME: &'static str = "CQuest_PublisherAddCommunityItemsToPlayer_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.items_matched = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.items_granted = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.items_matched {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.items_granted {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.items_matched {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.items_granted {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CQuest_PublisherAddCommunityItemsToPlayer_Response {
        CQuest_PublisherAddCommunityItemsToPlayer_Response::new()
    }

    fn clear(&mut self) {
        self.items_matched = ::std::option::Option::None;
        self.items_granted = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CQuest_PublisherAddCommunityItemsToPlayer_Response {
        static instance: CQuest_PublisherAddCommunityItemsToPlayer_Response = CQuest_PublisherAddCommunityItemsToPlayer_Response {
            items_matched: ::std::option::Option::None,
            items_granted: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CQuest_PublisherAddCommunityItemsToPlayer_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CQuest_PublisherAddCommunityItemsToPlayer_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CQuest_PublisherAddCommunityItemsToPlayer_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CQuest_PublisherAddCommunityItemsToPlayer_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCommunity_GamePersonalDataCategoryInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCommunity_GamePersonalDataCategoryInfo {
    // message fields
    // @@protoc_insertion_point(field:CCommunity_GamePersonalDataCategoryInfo.type)
    pub type_: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CCommunity_GamePersonalDataCategoryInfo.localization_token)
    pub localization_token: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CCommunity_GamePersonalDataCategoryInfo.template_file)
    pub template_file: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CCommunity_GamePersonalDataCategoryInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCommunity_GamePersonalDataCategoryInfo {
    fn default() -> &'a CCommunity_GamePersonalDataCategoryInfo {
        <CCommunity_GamePersonalDataCategoryInfo as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GamePersonalDataCategoryInfo {
    pub fn new() -> CCommunity_GamePersonalDataCategoryInfo {
        ::std::default::Default::default()
    }

    // optional string type = 1;

    pub fn type_(&self) -> &str {
        match self.type_.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: ::std::string::String) {
        self.type_ = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type(&mut self) -> &mut ::std::string::String {
        if self.type_.is_none() {
            self.type_ = ::std::option::Option::Some(::std::string::String::new());
        }
        self.type_.as_mut().unwrap()
    }

    // Take field
    pub fn take_type_(&mut self) -> ::std::string::String {
        self.type_.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string localization_token = 2;

    pub fn localization_token(&self) -> &str {
        match self.localization_token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_localization_token(&mut self) {
        self.localization_token = ::std::option::Option::None;
    }

    pub fn has_localization_token(&self) -> bool {
        self.localization_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_localization_token(&mut self, v: ::std::string::String) {
        self.localization_token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_localization_token(&mut self) -> &mut ::std::string::String {
        if self.localization_token.is_none() {
            self.localization_token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.localization_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_localization_token(&mut self) -> ::std::string::String {
        self.localization_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string template_file = 3;

    pub fn template_file(&self) -> &str {
        match self.template_file.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_template_file(&mut self) {
        self.template_file = ::std::option::Option::None;
    }

    pub fn has_template_file(&self) -> bool {
        self.template_file.is_some()
    }

    // Param is passed by value, moved
    pub fn set_template_file(&mut self, v: ::std::string::String) {
        self.template_file = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_template_file(&mut self) -> &mut ::std::string::String {
        if self.template_file.is_none() {
            self.template_file = ::std::option::Option::Some(::std::string::String::new());
        }
        self.template_file.as_mut().unwrap()
    }

    // Take field
    pub fn take_template_file(&mut self) -> ::std::string::String {
        self.template_file.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &CCommunity_GamePersonalDataCategoryInfo| { &m.type_ },
            |m: &mut CCommunity_GamePersonalDataCategoryInfo| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "localization_token",
            |m: &CCommunity_GamePersonalDataCategoryInfo| { &m.localization_token },
            |m: &mut CCommunity_GamePersonalDataCategoryInfo| { &mut m.localization_token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "template_file",
            |m: &CCommunity_GamePersonalDataCategoryInfo| { &m.template_file },
            |m: &mut CCommunity_GamePersonalDataCategoryInfo| { &mut m.template_file },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CCommunity_GamePersonalDataCategoryInfo>(
            "CCommunity_GamePersonalDataCategoryInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CCommunity_GamePersonalDataCategoryInfo {
    const NAME: &'static str = "CCommunity_GamePersonalDataCategoryInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.type_ = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.localization_token = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.template_file = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.localization_token.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.template_file.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.localization_token.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.template_file.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCommunity_GamePersonalDataCategoryInfo {
        CCommunity_GamePersonalDataCategoryInfo::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.localization_token = ::std::option::Option::None;
        self.template_file = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCommunity_GamePersonalDataCategoryInfo {
        static instance: CCommunity_GamePersonalDataCategoryInfo = CCommunity_GamePersonalDataCategoryInfo {
            type_: ::std::option::Option::None,
            localization_token: ::std::option::Option::None,
            template_file: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CCommunity_GamePersonalDataCategoryInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCommunity_GamePersonalDataCategoryInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCommunity_GamePersonalDataCategoryInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_GamePersonalDataCategoryInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCommunity_GetGamePersonalDataCategories_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCommunity_GetGamePersonalDataCategories_Request {
    // message fields
    // @@protoc_insertion_point(field:CCommunity_GetGamePersonalDataCategories_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CCommunity_GetGamePersonalDataCategories_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetGamePersonalDataCategories_Request {
    fn default() -> &'a CCommunity_GetGamePersonalDataCategories_Request {
        <CCommunity_GetGamePersonalDataCategories_Request as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GetGamePersonalDataCategories_Request {
    pub fn new() -> CCommunity_GetGamePersonalDataCategories_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CCommunity_GetGamePersonalDataCategories_Request| { &m.appid },
            |m: &mut CCommunity_GetGamePersonalDataCategories_Request| { &mut m.appid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CCommunity_GetGamePersonalDataCategories_Request>(
            "CCommunity_GetGamePersonalDataCategories_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CCommunity_GetGamePersonalDataCategories_Request {
    const NAME: &'static str = "CCommunity_GetGamePersonalDataCategories_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCommunity_GetGamePersonalDataCategories_Request {
        CCommunity_GetGamePersonalDataCategories_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCommunity_GetGamePersonalDataCategories_Request {
        static instance: CCommunity_GetGamePersonalDataCategories_Request = CCommunity_GetGamePersonalDataCategories_Request {
            appid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CCommunity_GetGamePersonalDataCategories_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCommunity_GetGamePersonalDataCategories_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCommunity_GetGamePersonalDataCategories_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_GetGamePersonalDataCategories_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCommunity_GetGamePersonalDataCategories_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCommunity_GetGamePersonalDataCategories_Response {
    // message fields
    // @@protoc_insertion_point(field:CCommunity_GetGamePersonalDataCategories_Response.categories)
    pub categories: ::std::vec::Vec<CCommunity_GamePersonalDataCategoryInfo>,
    // @@protoc_insertion_point(field:CCommunity_GetGamePersonalDataCategories_Response.app_assets_basename)
    pub app_assets_basename: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CCommunity_GetGamePersonalDataCategories_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetGamePersonalDataCategories_Response {
    fn default() -> &'a CCommunity_GetGamePersonalDataCategories_Response {
        <CCommunity_GetGamePersonalDataCategories_Response as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GetGamePersonalDataCategories_Response {
    pub fn new() -> CCommunity_GetGamePersonalDataCategories_Response {
        ::std::default::Default::default()
    }

    // optional string app_assets_basename = 2;

    pub fn app_assets_basename(&self) -> &str {
        match self.app_assets_basename.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_app_assets_basename(&mut self) {
        self.app_assets_basename = ::std::option::Option::None;
    }

    pub fn has_app_assets_basename(&self) -> bool {
        self.app_assets_basename.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_assets_basename(&mut self, v: ::std::string::String) {
        self.app_assets_basename = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app_assets_basename(&mut self) -> &mut ::std::string::String {
        if self.app_assets_basename.is_none() {
            self.app_assets_basename = ::std::option::Option::Some(::std::string::String::new());
        }
        self.app_assets_basename.as_mut().unwrap()
    }

    // Take field
    pub fn take_app_assets_basename(&mut self) -> ::std::string::String {
        self.app_assets_basename.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "categories",
            |m: &CCommunity_GetGamePersonalDataCategories_Response| { &m.categories },
            |m: &mut CCommunity_GetGamePersonalDataCategories_Response| { &mut m.categories },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_assets_basename",
            |m: &CCommunity_GetGamePersonalDataCategories_Response| { &m.app_assets_basename },
            |m: &mut CCommunity_GetGamePersonalDataCategories_Response| { &mut m.app_assets_basename },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CCommunity_GetGamePersonalDataCategories_Response>(
            "CCommunity_GetGamePersonalDataCategories_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CCommunity_GetGamePersonalDataCategories_Response {
    const NAME: &'static str = "CCommunity_GetGamePersonalDataCategories_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.categories.push(is.read_message()?);
                },
                18 => {
                    self.app_assets_basename = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.categories {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.app_assets_basename.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.categories {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.app_assets_basename.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCommunity_GetGamePersonalDataCategories_Response {
        CCommunity_GetGamePersonalDataCategories_Response::new()
    }

    fn clear(&mut self) {
        self.categories.clear();
        self.app_assets_basename = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCommunity_GetGamePersonalDataCategories_Response {
        static instance: CCommunity_GetGamePersonalDataCategories_Response = CCommunity_GetGamePersonalDataCategories_Response {
            categories: ::std::vec::Vec::new(),
            app_assets_basename: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CCommunity_GetGamePersonalDataCategories_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCommunity_GetGamePersonalDataCategories_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCommunity_GetGamePersonalDataCategories_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_GetGamePersonalDataCategories_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCommunity_GetGamePersonalDataEntries_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCommunity_GetGamePersonalDataEntries_Request {
    // message fields
    // @@protoc_insertion_point(field:CCommunity_GetGamePersonalDataEntries_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CCommunity_GetGamePersonalDataEntries_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CCommunity_GetGamePersonalDataEntries_Request.type)
    pub type_: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CCommunity_GetGamePersonalDataEntries_Request.continue_token)
    pub continue_token: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CCommunity_GetGamePersonalDataEntries_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetGamePersonalDataEntries_Request {
    fn default() -> &'a CCommunity_GetGamePersonalDataEntries_Request {
        <CCommunity_GetGamePersonalDataEntries_Request as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GetGamePersonalDataEntries_Request {
    pub fn new() -> CCommunity_GetGamePersonalDataEntries_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 steamid = 2;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional string type = 3;

    pub fn type_(&self) -> &str {
        match self.type_.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: ::std::string::String) {
        self.type_ = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type(&mut self) -> &mut ::std::string::String {
        if self.type_.is_none() {
            self.type_ = ::std::option::Option::Some(::std::string::String::new());
        }
        self.type_.as_mut().unwrap()
    }

    // Take field
    pub fn take_type_(&mut self) -> ::std::string::String {
        self.type_.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string continue_token = 4;

    pub fn continue_token(&self) -> &str {
        match self.continue_token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_continue_token(&mut self) {
        self.continue_token = ::std::option::Option::None;
    }

    pub fn has_continue_token(&self) -> bool {
        self.continue_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_continue_token(&mut self, v: ::std::string::String) {
        self.continue_token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_continue_token(&mut self) -> &mut ::std::string::String {
        if self.continue_token.is_none() {
            self.continue_token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.continue_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_continue_token(&mut self) -> ::std::string::String {
        self.continue_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CCommunity_GetGamePersonalDataEntries_Request| { &m.appid },
            |m: &mut CCommunity_GetGamePersonalDataEntries_Request| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CCommunity_GetGamePersonalDataEntries_Request| { &m.steamid },
            |m: &mut CCommunity_GetGamePersonalDataEntries_Request| { &mut m.steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &CCommunity_GetGamePersonalDataEntries_Request| { &m.type_ },
            |m: &mut CCommunity_GetGamePersonalDataEntries_Request| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "continue_token",
            |m: &CCommunity_GetGamePersonalDataEntries_Request| { &m.continue_token },
            |m: &mut CCommunity_GetGamePersonalDataEntries_Request| { &mut m.continue_token },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CCommunity_GetGamePersonalDataEntries_Request>(
            "CCommunity_GetGamePersonalDataEntries_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CCommunity_GetGamePersonalDataEntries_Request {
    const NAME: &'static str = "CCommunity_GetGamePersonalDataEntries_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.steamid = ::std::option::Option::Some(is.read_uint64()?);
                },
                26 => {
                    self.type_ = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.continue_token = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.steamid {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.type_.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.continue_token.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.type_.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.continue_token.as_ref() {
            os.write_string(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCommunity_GetGamePersonalDataEntries_Request {
        CCommunity_GetGamePersonalDataEntries_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.type_ = ::std::option::Option::None;
        self.continue_token = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCommunity_GetGamePersonalDataEntries_Request {
        static instance: CCommunity_GetGamePersonalDataEntries_Request = CCommunity_GetGamePersonalDataEntries_Request {
            appid: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            type_: ::std::option::Option::None,
            continue_token: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CCommunity_GetGamePersonalDataEntries_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCommunity_GetGamePersonalDataEntries_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCommunity_GetGamePersonalDataEntries_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_GetGamePersonalDataEntries_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCommunity_GetGamePersonalDataEntries_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCommunity_GetGamePersonalDataEntries_Response {
    // message fields
    // @@protoc_insertion_point(field:CCommunity_GetGamePersonalDataEntries_Response.gceresult)
    pub gceresult: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CCommunity_GetGamePersonalDataEntries_Response.entries)
    pub entries: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:CCommunity_GetGamePersonalDataEntries_Response.continue_token)
    pub continue_token: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CCommunity_GetGamePersonalDataEntries_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetGamePersonalDataEntries_Response {
    fn default() -> &'a CCommunity_GetGamePersonalDataEntries_Response {
        <CCommunity_GetGamePersonalDataEntries_Response as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GetGamePersonalDataEntries_Response {
    pub fn new() -> CCommunity_GetGamePersonalDataEntries_Response {
        ::std::default::Default::default()
    }

    // optional uint32 gceresult = 1;

    pub fn gceresult(&self) -> u32 {
        self.gceresult.unwrap_or(0)
    }

    pub fn clear_gceresult(&mut self) {
        self.gceresult = ::std::option::Option::None;
    }

    pub fn has_gceresult(&self) -> bool {
        self.gceresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gceresult(&mut self, v: u32) {
        self.gceresult = ::std::option::Option::Some(v);
    }

    // optional string continue_token = 3;

    pub fn continue_token(&self) -> &str {
        match self.continue_token.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_continue_token(&mut self) {
        self.continue_token = ::std::option::Option::None;
    }

    pub fn has_continue_token(&self) -> bool {
        self.continue_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_continue_token(&mut self, v: ::std::string::String) {
        self.continue_token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_continue_token(&mut self) -> &mut ::std::string::String {
        if self.continue_token.is_none() {
            self.continue_token = ::std::option::Option::Some(::std::string::String::new());
        }
        self.continue_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_continue_token(&mut self) -> ::std::string::String {
        self.continue_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gceresult",
            |m: &CCommunity_GetGamePersonalDataEntries_Response| { &m.gceresult },
            |m: &mut CCommunity_GetGamePersonalDataEntries_Response| { &mut m.gceresult },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "entries",
            |m: &CCommunity_GetGamePersonalDataEntries_Response| { &m.entries },
            |m: &mut CCommunity_GetGamePersonalDataEntries_Response| { &mut m.entries },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "continue_token",
            |m: &CCommunity_GetGamePersonalDataEntries_Response| { &m.continue_token },
            |m: &mut CCommunity_GetGamePersonalDataEntries_Response| { &mut m.continue_token },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CCommunity_GetGamePersonalDataEntries_Response>(
            "CCommunity_GetGamePersonalDataEntries_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CCommunity_GetGamePersonalDataEntries_Response {
    const NAME: &'static str = "CCommunity_GetGamePersonalDataEntries_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.gceresult = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.entries.push(is.read_string()?);
                },
                26 => {
                    self.continue_token = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.gceresult {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        for value in &self.entries {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if let Some(v) = self.continue_token.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.gceresult {
            os.write_uint32(1, v)?;
        }
        for v in &self.entries {
            os.write_string(2, &v)?;
        };
        if let Some(v) = self.continue_token.as_ref() {
            os.write_string(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCommunity_GetGamePersonalDataEntries_Response {
        CCommunity_GetGamePersonalDataEntries_Response::new()
    }

    fn clear(&mut self) {
        self.gceresult = ::std::option::Option::None;
        self.entries.clear();
        self.continue_token = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCommunity_GetGamePersonalDataEntries_Response {
        static instance: CCommunity_GetGamePersonalDataEntries_Response = CCommunity_GetGamePersonalDataEntries_Response {
            gceresult: ::std::option::Option::None,
            entries: ::std::vec::Vec::new(),
            continue_token: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CCommunity_GetGamePersonalDataEntries_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCommunity_GetGamePersonalDataEntries_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCommunity_GetGamePersonalDataEntries_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_GetGamePersonalDataEntries_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCommunity_TerminateGamePersonalDataEntries_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCommunity_TerminateGamePersonalDataEntries_Request {
    // message fields
    // @@protoc_insertion_point(field:CCommunity_TerminateGamePersonalDataEntries_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CCommunity_TerminateGamePersonalDataEntries_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CCommunity_TerminateGamePersonalDataEntries_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCommunity_TerminateGamePersonalDataEntries_Request {
    fn default() -> &'a CCommunity_TerminateGamePersonalDataEntries_Request {
        <CCommunity_TerminateGamePersonalDataEntries_Request as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_TerminateGamePersonalDataEntries_Request {
    pub fn new() -> CCommunity_TerminateGamePersonalDataEntries_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 steamid = 2;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CCommunity_TerminateGamePersonalDataEntries_Request| { &m.appid },
            |m: &mut CCommunity_TerminateGamePersonalDataEntries_Request| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CCommunity_TerminateGamePersonalDataEntries_Request| { &m.steamid },
            |m: &mut CCommunity_TerminateGamePersonalDataEntries_Request| { &mut m.steamid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CCommunity_TerminateGamePersonalDataEntries_Request>(
            "CCommunity_TerminateGamePersonalDataEntries_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CCommunity_TerminateGamePersonalDataEntries_Request {
    const NAME: &'static str = "CCommunity_TerminateGamePersonalDataEntries_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.steamid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.steamid {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCommunity_TerminateGamePersonalDataEntries_Request {
        CCommunity_TerminateGamePersonalDataEntries_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCommunity_TerminateGamePersonalDataEntries_Request {
        static instance: CCommunity_TerminateGamePersonalDataEntries_Request = CCommunity_TerminateGamePersonalDataEntries_Request {
            appid: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CCommunity_TerminateGamePersonalDataEntries_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCommunity_TerminateGamePersonalDataEntries_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCommunity_TerminateGamePersonalDataEntries_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_TerminateGamePersonalDataEntries_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCommunity_TerminateGamePersonalDataEntries_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCommunity_TerminateGamePersonalDataEntries_Response {
    // message fields
    // @@protoc_insertion_point(field:CCommunity_TerminateGamePersonalDataEntries_Response.gceresult)
    pub gceresult: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CCommunity_TerminateGamePersonalDataEntries_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCommunity_TerminateGamePersonalDataEntries_Response {
    fn default() -> &'a CCommunity_TerminateGamePersonalDataEntries_Response {
        <CCommunity_TerminateGamePersonalDataEntries_Response as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_TerminateGamePersonalDataEntries_Response {
    pub fn new() -> CCommunity_TerminateGamePersonalDataEntries_Response {
        ::std::default::Default::default()
    }

    // optional uint32 gceresult = 1;

    pub fn gceresult(&self) -> u32 {
        self.gceresult.unwrap_or(0)
    }

    pub fn clear_gceresult(&mut self) {
        self.gceresult = ::std::option::Option::None;
    }

    pub fn has_gceresult(&self) -> bool {
        self.gceresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gceresult(&mut self, v: u32) {
        self.gceresult = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "gceresult",
            |m: &CCommunity_TerminateGamePersonalDataEntries_Response| { &m.gceresult },
            |m: &mut CCommunity_TerminateGamePersonalDataEntries_Response| { &mut m.gceresult },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CCommunity_TerminateGamePersonalDataEntries_Response>(
            "CCommunity_TerminateGamePersonalDataEntries_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CCommunity_TerminateGamePersonalDataEntries_Response {
    const NAME: &'static str = "CCommunity_TerminateGamePersonalDataEntries_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.gceresult = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.gceresult {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.gceresult {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCommunity_TerminateGamePersonalDataEntries_Response {
        CCommunity_TerminateGamePersonalDataEntries_Response::new()
    }

    fn clear(&mut self) {
        self.gceresult = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCommunity_TerminateGamePersonalDataEntries_Response {
        static instance: CCommunity_TerminateGamePersonalDataEntries_Response = CCommunity_TerminateGamePersonalDataEntries_Response {
            gceresult: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CCommunity_TerminateGamePersonalDataEntries_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCommunity_TerminateGamePersonalDataEntries_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCommunity_TerminateGamePersonalDataEntries_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_TerminateGamePersonalDataEntries_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EGCSystemMsg)
pub enum EGCSystemMsg {
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgInvalid)
    k_EGCMsgInvalid = 0,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMulti)
    k_EGCMsgMulti = 1,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGenericReply)
    k_EGCMsgGenericReply = 10,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgSystemBase)
    k_EGCMsgSystemBase = 50,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgAchievementAwarded)
    k_EGCMsgAchievementAwarded = 51,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgConCommand)
    k_EGCMsgConCommand = 52,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgStartPlaying)
    k_EGCMsgStartPlaying = 53,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgStopPlaying)
    k_EGCMsgStopPlaying = 54,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgStartGameserver)
    k_EGCMsgStartGameserver = 55,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgStopGameserver)
    k_EGCMsgStopGameserver = 56,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgWGRequest)
    k_EGCMsgWGRequest = 57,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgWGResponse)
    k_EGCMsgWGResponse = 58,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetUserGameStatsSchema)
    k_EGCMsgGetUserGameStatsSchema = 59,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetUserGameStatsSchemaResponse)
    k_EGCMsgGetUserGameStatsSchemaResponse = 60,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetUserStatsDEPRECATED)
    k_EGCMsgGetUserStatsDEPRECATED = 61,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetUserStatsResponse)
    k_EGCMsgGetUserStatsResponse = 62,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgAppInfoUpdated)
    k_EGCMsgAppInfoUpdated = 63,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgValidateSession)
    k_EGCMsgValidateSession = 64,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgValidateSessionResponse)
    k_EGCMsgValidateSessionResponse = 65,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgLookupAccountFromInput)
    k_EGCMsgLookupAccountFromInput = 66,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgSendHTTPRequest)
    k_EGCMsgSendHTTPRequest = 67,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgSendHTTPRequestResponse)
    k_EGCMsgSendHTTPRequestResponse = 68,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgPreTestSetup)
    k_EGCMsgPreTestSetup = 69,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgRecordSupportAction)
    k_EGCMsgRecordSupportAction = 70,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetAccountDetails_DEPRECATED)
    k_EGCMsgGetAccountDetails_DEPRECATED = 71,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgReceiveInterAppMessage)
    k_EGCMsgReceiveInterAppMessage = 73,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgFindAccounts)
    k_EGCMsgFindAccounts = 74,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgPostAlert)
    k_EGCMsgPostAlert = 75,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetLicenses)
    k_EGCMsgGetLicenses = 76,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetUserStats)
    k_EGCMsgGetUserStats = 77,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetCommands)
    k_EGCMsgGetCommands = 78,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetCommandsResponse)
    k_EGCMsgGetCommandsResponse = 79,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgAddFreeLicense)
    k_EGCMsgAddFreeLicense = 80,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgAddFreeLicenseResponse)
    k_EGCMsgAddFreeLicenseResponse = 81,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetIPLocation)
    k_EGCMsgGetIPLocation = 82,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetIPLocationResponse)
    k_EGCMsgGetIPLocationResponse = 83,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgSystemStatsSchema)
    k_EGCMsgSystemStatsSchema = 84,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetSystemStats)
    k_EGCMsgGetSystemStats = 85,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetSystemStatsResponse)
    k_EGCMsgGetSystemStatsResponse = 86,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgSendEmail)
    k_EGCMsgSendEmail = 87,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgSendEmailResponse)
    k_EGCMsgSendEmailResponse = 88,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetEmailTemplate)
    k_EGCMsgGetEmailTemplate = 89,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetEmailTemplateResponse)
    k_EGCMsgGetEmailTemplateResponse = 90,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGrantGuestPass)
    k_EGCMsgGrantGuestPass = 91,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGrantGuestPassResponse)
    k_EGCMsgGrantGuestPassResponse = 92,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetAccountDetails)
    k_EGCMsgGetAccountDetails = 93,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetAccountDetailsResponse)
    k_EGCMsgGetAccountDetailsResponse = 94,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetPersonaNames)
    k_EGCMsgGetPersonaNames = 95,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetPersonaNamesResponse)
    k_EGCMsgGetPersonaNamesResponse = 96,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMultiplexMsg)
    k_EGCMsgMultiplexMsg = 97,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMultiplexMsgResponse)
    k_EGCMsgMultiplexMsgResponse = 98,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgWebAPIRegisterInterfaces)
    k_EGCMsgWebAPIRegisterInterfaces = 101,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgWebAPIJobRequest)
    k_EGCMsgWebAPIJobRequest = 102,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgWebAPIJobRequestHttpResponse)
    k_EGCMsgWebAPIJobRequestHttpResponse = 104,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgWebAPIJobRequestForwardResponse)
    k_EGCMsgWebAPIJobRequestForwardResponse = 105,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMemCachedGet)
    k_EGCMsgMemCachedGet = 200,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMemCachedGetResponse)
    k_EGCMsgMemCachedGetResponse = 201,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMemCachedSet)
    k_EGCMsgMemCachedSet = 202,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMemCachedDelete)
    k_EGCMsgMemCachedDelete = 203,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMemCachedStats)
    k_EGCMsgMemCachedStats = 204,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMemCachedStatsResponse)
    k_EGCMsgMemCachedStatsResponse = 205,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMasterSetDirectory)
    k_EGCMsgMasterSetDirectory = 220,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMasterSetDirectoryResponse)
    k_EGCMsgMasterSetDirectoryResponse = 221,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMasterSetWebAPIRouting)
    k_EGCMsgMasterSetWebAPIRouting = 222,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMasterSetWebAPIRoutingResponse)
    k_EGCMsgMasterSetWebAPIRoutingResponse = 223,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMasterSetClientMsgRouting)
    k_EGCMsgMasterSetClientMsgRouting = 224,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgMasterSetClientMsgRoutingResponse)
    k_EGCMsgMasterSetClientMsgRoutingResponse = 225,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgSetOptions)
    k_EGCMsgSetOptions = 226,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgSetOptionsResponse)
    k_EGCMsgSetOptionsResponse = 227,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgSystemBase2)
    k_EGCMsgSystemBase2 = 500,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetPurchaseTrustStatus)
    k_EGCMsgGetPurchaseTrustStatus = 501,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetPurchaseTrustStatusResponse)
    k_EGCMsgGetPurchaseTrustStatusResponse = 502,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgUpdateSession)
    k_EGCMsgUpdateSession = 503,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGCAccountVacStatusChange)
    k_EGCMsgGCAccountVacStatusChange = 504,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgCheckFriendship)
    k_EGCMsgCheckFriendship = 505,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgCheckFriendshipResponse)
    k_EGCMsgCheckFriendshipResponse = 506,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetPartnerAccountLink)
    k_EGCMsgGetPartnerAccountLink = 507,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetPartnerAccountLinkResponse)
    k_EGCMsgGetPartnerAccountLinkResponse = 508,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgDPPartnerMicroTxns)
    k_EGCMsgDPPartnerMicroTxns = 512,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgDPPartnerMicroTxnsResponse)
    k_EGCMsgDPPartnerMicroTxnsResponse = 513,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgVacVerificationChange)
    k_EGCMsgVacVerificationChange = 518,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgAccountPhoneNumberChange)
    k_EGCMsgAccountPhoneNumberChange = 519,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgInviteUserToLobby)
    k_EGCMsgInviteUserToLobby = 523,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetGamePersonalDataCategoriesRequest)
    k_EGCMsgGetGamePersonalDataCategoriesRequest = 524,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetGamePersonalDataCategoriesResponse)
    k_EGCMsgGetGamePersonalDataCategoriesResponse = 525,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetGamePersonalDataEntriesRequest)
    k_EGCMsgGetGamePersonalDataEntriesRequest = 526,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgGetGamePersonalDataEntriesResponse)
    k_EGCMsgGetGamePersonalDataEntriesResponse = 527,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgTerminateGamePersonalDataEntriesRequest)
    k_EGCMsgTerminateGamePersonalDataEntriesRequest = 528,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgTerminateGamePersonalDataEntriesResponse)
    k_EGCMsgTerminateGamePersonalDataEntriesResponse = 529,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgRecurringSubscriptionStatusChange)
    k_EGCMsgRecurringSubscriptionStatusChange = 530,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgDirectServiceMethod)
    k_EGCMsgDirectServiceMethod = 531,
    // @@protoc_insertion_point(enum_value:EGCSystemMsg.k_EGCMsgDirectServiceMethodResponse)
    k_EGCMsgDirectServiceMethodResponse = 532,
}

impl ::protobuf::Enum for EGCSystemMsg {
    const NAME: &'static str = "EGCSystemMsg";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EGCSystemMsg> {
        match value {
            0 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgInvalid),
            1 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMulti),
            10 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGenericReply),
            50 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSystemBase),
            51 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAchievementAwarded),
            52 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgConCommand),
            53 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgStartPlaying),
            54 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgStopPlaying),
            55 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgStartGameserver),
            56 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgStopGameserver),
            57 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWGRequest),
            58 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWGResponse),
            59 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserGameStatsSchema),
            60 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserGameStatsSchemaResponse),
            61 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserStatsDEPRECATED),
            62 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserStatsResponse),
            63 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAppInfoUpdated),
            64 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgValidateSession),
            65 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgValidateSessionResponse),
            66 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgLookupAccountFromInput),
            67 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSendHTTPRequest),
            68 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSendHTTPRequestResponse),
            69 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgPreTestSetup),
            70 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgRecordSupportAction),
            71 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetAccountDetails_DEPRECATED),
            73 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgReceiveInterAppMessage),
            74 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgFindAccounts),
            75 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgPostAlert),
            76 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetLicenses),
            77 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserStats),
            78 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetCommands),
            79 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetCommandsResponse),
            80 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAddFreeLicense),
            81 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAddFreeLicenseResponse),
            82 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetIPLocation),
            83 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetIPLocationResponse),
            84 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSystemStatsSchema),
            85 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetSystemStats),
            86 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetSystemStatsResponse),
            87 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSendEmail),
            88 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSendEmailResponse),
            89 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetEmailTemplate),
            90 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetEmailTemplateResponse),
            91 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGrantGuestPass),
            92 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGrantGuestPassResponse),
            93 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetAccountDetails),
            94 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetAccountDetailsResponse),
            95 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPersonaNames),
            96 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPersonaNamesResponse),
            97 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMultiplexMsg),
            98 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMultiplexMsgResponse),
            101 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWebAPIRegisterInterfaces),
            102 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWebAPIJobRequest),
            104 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWebAPIJobRequestHttpResponse),
            105 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWebAPIJobRequestForwardResponse),
            200 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedGet),
            201 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedGetResponse),
            202 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedSet),
            203 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedDelete),
            204 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedStats),
            205 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedStatsResponse),
            220 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetDirectory),
            221 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetDirectoryResponse),
            222 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetWebAPIRouting),
            223 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetWebAPIRoutingResponse),
            224 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetClientMsgRouting),
            225 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetClientMsgRoutingResponse),
            226 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSetOptions),
            227 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSetOptionsResponse),
            500 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSystemBase2),
            501 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPurchaseTrustStatus),
            502 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPurchaseTrustStatusResponse),
            503 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgUpdateSession),
            504 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGCAccountVacStatusChange),
            505 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgCheckFriendship),
            506 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgCheckFriendshipResponse),
            507 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPartnerAccountLink),
            508 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPartnerAccountLinkResponse),
            512 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgDPPartnerMicroTxns),
            513 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgDPPartnerMicroTxnsResponse),
            518 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgVacVerificationChange),
            519 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAccountPhoneNumberChange),
            523 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgInviteUserToLobby),
            524 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetGamePersonalDataCategoriesRequest),
            525 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetGamePersonalDataCategoriesResponse),
            526 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetGamePersonalDataEntriesRequest),
            527 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetGamePersonalDataEntriesResponse),
            528 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgTerminateGamePersonalDataEntriesRequest),
            529 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgTerminateGamePersonalDataEntriesResponse),
            530 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgRecurringSubscriptionStatusChange),
            531 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgDirectServiceMethod),
            532 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgDirectServiceMethodResponse),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EGCSystemMsg> {
        match str {
            "k_EGCMsgInvalid" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgInvalid),
            "k_EGCMsgMulti" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMulti),
            "k_EGCMsgGenericReply" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGenericReply),
            "k_EGCMsgSystemBase" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSystemBase),
            "k_EGCMsgAchievementAwarded" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAchievementAwarded),
            "k_EGCMsgConCommand" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgConCommand),
            "k_EGCMsgStartPlaying" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgStartPlaying),
            "k_EGCMsgStopPlaying" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgStopPlaying),
            "k_EGCMsgStartGameserver" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgStartGameserver),
            "k_EGCMsgStopGameserver" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgStopGameserver),
            "k_EGCMsgWGRequest" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWGRequest),
            "k_EGCMsgWGResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWGResponse),
            "k_EGCMsgGetUserGameStatsSchema" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserGameStatsSchema),
            "k_EGCMsgGetUserGameStatsSchemaResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserGameStatsSchemaResponse),
            "k_EGCMsgGetUserStatsDEPRECATED" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserStatsDEPRECATED),
            "k_EGCMsgGetUserStatsResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserStatsResponse),
            "k_EGCMsgAppInfoUpdated" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAppInfoUpdated),
            "k_EGCMsgValidateSession" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgValidateSession),
            "k_EGCMsgValidateSessionResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgValidateSessionResponse),
            "k_EGCMsgLookupAccountFromInput" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgLookupAccountFromInput),
            "k_EGCMsgSendHTTPRequest" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSendHTTPRequest),
            "k_EGCMsgSendHTTPRequestResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSendHTTPRequestResponse),
            "k_EGCMsgPreTestSetup" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgPreTestSetup),
            "k_EGCMsgRecordSupportAction" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgRecordSupportAction),
            "k_EGCMsgGetAccountDetails_DEPRECATED" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetAccountDetails_DEPRECATED),
            "k_EGCMsgReceiveInterAppMessage" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgReceiveInterAppMessage),
            "k_EGCMsgFindAccounts" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgFindAccounts),
            "k_EGCMsgPostAlert" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgPostAlert),
            "k_EGCMsgGetLicenses" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetLicenses),
            "k_EGCMsgGetUserStats" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserStats),
            "k_EGCMsgGetCommands" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetCommands),
            "k_EGCMsgGetCommandsResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetCommandsResponse),
            "k_EGCMsgAddFreeLicense" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAddFreeLicense),
            "k_EGCMsgAddFreeLicenseResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAddFreeLicenseResponse),
            "k_EGCMsgGetIPLocation" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetIPLocation),
            "k_EGCMsgGetIPLocationResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetIPLocationResponse),
            "k_EGCMsgSystemStatsSchema" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSystemStatsSchema),
            "k_EGCMsgGetSystemStats" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetSystemStats),
            "k_EGCMsgGetSystemStatsResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetSystemStatsResponse),
            "k_EGCMsgSendEmail" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSendEmail),
            "k_EGCMsgSendEmailResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSendEmailResponse),
            "k_EGCMsgGetEmailTemplate" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetEmailTemplate),
            "k_EGCMsgGetEmailTemplateResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetEmailTemplateResponse),
            "k_EGCMsgGrantGuestPass" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGrantGuestPass),
            "k_EGCMsgGrantGuestPassResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGrantGuestPassResponse),
            "k_EGCMsgGetAccountDetails" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetAccountDetails),
            "k_EGCMsgGetAccountDetailsResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetAccountDetailsResponse),
            "k_EGCMsgGetPersonaNames" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPersonaNames),
            "k_EGCMsgGetPersonaNamesResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPersonaNamesResponse),
            "k_EGCMsgMultiplexMsg" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMultiplexMsg),
            "k_EGCMsgMultiplexMsgResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMultiplexMsgResponse),
            "k_EGCMsgWebAPIRegisterInterfaces" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWebAPIRegisterInterfaces),
            "k_EGCMsgWebAPIJobRequest" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWebAPIJobRequest),
            "k_EGCMsgWebAPIJobRequestHttpResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWebAPIJobRequestHttpResponse),
            "k_EGCMsgWebAPIJobRequestForwardResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWebAPIJobRequestForwardResponse),
            "k_EGCMsgMemCachedGet" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedGet),
            "k_EGCMsgMemCachedGetResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedGetResponse),
            "k_EGCMsgMemCachedSet" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedSet),
            "k_EGCMsgMemCachedDelete" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedDelete),
            "k_EGCMsgMemCachedStats" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedStats),
            "k_EGCMsgMemCachedStatsResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedStatsResponse),
            "k_EGCMsgMasterSetDirectory" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetDirectory),
            "k_EGCMsgMasterSetDirectoryResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetDirectoryResponse),
            "k_EGCMsgMasterSetWebAPIRouting" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetWebAPIRouting),
            "k_EGCMsgMasterSetWebAPIRoutingResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetWebAPIRoutingResponse),
            "k_EGCMsgMasterSetClientMsgRouting" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetClientMsgRouting),
            "k_EGCMsgMasterSetClientMsgRoutingResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetClientMsgRoutingResponse),
            "k_EGCMsgSetOptions" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSetOptions),
            "k_EGCMsgSetOptionsResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSetOptionsResponse),
            "k_EGCMsgSystemBase2" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSystemBase2),
            "k_EGCMsgGetPurchaseTrustStatus" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPurchaseTrustStatus),
            "k_EGCMsgGetPurchaseTrustStatusResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPurchaseTrustStatusResponse),
            "k_EGCMsgUpdateSession" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgUpdateSession),
            "k_EGCMsgGCAccountVacStatusChange" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGCAccountVacStatusChange),
            "k_EGCMsgCheckFriendship" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgCheckFriendship),
            "k_EGCMsgCheckFriendshipResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgCheckFriendshipResponse),
            "k_EGCMsgGetPartnerAccountLink" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPartnerAccountLink),
            "k_EGCMsgGetPartnerAccountLinkResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPartnerAccountLinkResponse),
            "k_EGCMsgDPPartnerMicroTxns" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgDPPartnerMicroTxns),
            "k_EGCMsgDPPartnerMicroTxnsResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgDPPartnerMicroTxnsResponse),
            "k_EGCMsgVacVerificationChange" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgVacVerificationChange),
            "k_EGCMsgAccountPhoneNumberChange" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAccountPhoneNumberChange),
            "k_EGCMsgInviteUserToLobby" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgInviteUserToLobby),
            "k_EGCMsgGetGamePersonalDataCategoriesRequest" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetGamePersonalDataCategoriesRequest),
            "k_EGCMsgGetGamePersonalDataCategoriesResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetGamePersonalDataCategoriesResponse),
            "k_EGCMsgGetGamePersonalDataEntriesRequest" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetGamePersonalDataEntriesRequest),
            "k_EGCMsgGetGamePersonalDataEntriesResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetGamePersonalDataEntriesResponse),
            "k_EGCMsgTerminateGamePersonalDataEntriesRequest" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgTerminateGamePersonalDataEntriesRequest),
            "k_EGCMsgTerminateGamePersonalDataEntriesResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgTerminateGamePersonalDataEntriesResponse),
            "k_EGCMsgRecurringSubscriptionStatusChange" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgRecurringSubscriptionStatusChange),
            "k_EGCMsgDirectServiceMethod" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgDirectServiceMethod),
            "k_EGCMsgDirectServiceMethodResponse" => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgDirectServiceMethodResponse),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EGCSystemMsg] = &[
        EGCSystemMsg::k_EGCMsgInvalid,
        EGCSystemMsg::k_EGCMsgMulti,
        EGCSystemMsg::k_EGCMsgGenericReply,
        EGCSystemMsg::k_EGCMsgSystemBase,
        EGCSystemMsg::k_EGCMsgAchievementAwarded,
        EGCSystemMsg::k_EGCMsgConCommand,
        EGCSystemMsg::k_EGCMsgStartPlaying,
        EGCSystemMsg::k_EGCMsgStopPlaying,
        EGCSystemMsg::k_EGCMsgStartGameserver,
        EGCSystemMsg::k_EGCMsgStopGameserver,
        EGCSystemMsg::k_EGCMsgWGRequest,
        EGCSystemMsg::k_EGCMsgWGResponse,
        EGCSystemMsg::k_EGCMsgGetUserGameStatsSchema,
        EGCSystemMsg::k_EGCMsgGetUserGameStatsSchemaResponse,
        EGCSystemMsg::k_EGCMsgGetUserStatsDEPRECATED,
        EGCSystemMsg::k_EGCMsgGetUserStatsResponse,
        EGCSystemMsg::k_EGCMsgAppInfoUpdated,
        EGCSystemMsg::k_EGCMsgValidateSession,
        EGCSystemMsg::k_EGCMsgValidateSessionResponse,
        EGCSystemMsg::k_EGCMsgLookupAccountFromInput,
        EGCSystemMsg::k_EGCMsgSendHTTPRequest,
        EGCSystemMsg::k_EGCMsgSendHTTPRequestResponse,
        EGCSystemMsg::k_EGCMsgPreTestSetup,
        EGCSystemMsg::k_EGCMsgRecordSupportAction,
        EGCSystemMsg::k_EGCMsgGetAccountDetails_DEPRECATED,
        EGCSystemMsg::k_EGCMsgReceiveInterAppMessage,
        EGCSystemMsg::k_EGCMsgFindAccounts,
        EGCSystemMsg::k_EGCMsgPostAlert,
        EGCSystemMsg::k_EGCMsgGetLicenses,
        EGCSystemMsg::k_EGCMsgGetUserStats,
        EGCSystemMsg::k_EGCMsgGetCommands,
        EGCSystemMsg::k_EGCMsgGetCommandsResponse,
        EGCSystemMsg::k_EGCMsgAddFreeLicense,
        EGCSystemMsg::k_EGCMsgAddFreeLicenseResponse,
        EGCSystemMsg::k_EGCMsgGetIPLocation,
        EGCSystemMsg::k_EGCMsgGetIPLocationResponse,
        EGCSystemMsg::k_EGCMsgSystemStatsSchema,
        EGCSystemMsg::k_EGCMsgGetSystemStats,
        EGCSystemMsg::k_EGCMsgGetSystemStatsResponse,
        EGCSystemMsg::k_EGCMsgSendEmail,
        EGCSystemMsg::k_EGCMsgSendEmailResponse,
        EGCSystemMsg::k_EGCMsgGetEmailTemplate,
        EGCSystemMsg::k_EGCMsgGetEmailTemplateResponse,
        EGCSystemMsg::k_EGCMsgGrantGuestPass,
        EGCSystemMsg::k_EGCMsgGrantGuestPassResponse,
        EGCSystemMsg::k_EGCMsgGetAccountDetails,
        EGCSystemMsg::k_EGCMsgGetAccountDetailsResponse,
        EGCSystemMsg::k_EGCMsgGetPersonaNames,
        EGCSystemMsg::k_EGCMsgGetPersonaNamesResponse,
        EGCSystemMsg::k_EGCMsgMultiplexMsg,
        EGCSystemMsg::k_EGCMsgMultiplexMsgResponse,
        EGCSystemMsg::k_EGCMsgWebAPIRegisterInterfaces,
        EGCSystemMsg::k_EGCMsgWebAPIJobRequest,
        EGCSystemMsg::k_EGCMsgWebAPIJobRequestHttpResponse,
        EGCSystemMsg::k_EGCMsgWebAPIJobRequestForwardResponse,
        EGCSystemMsg::k_EGCMsgMemCachedGet,
        EGCSystemMsg::k_EGCMsgMemCachedGetResponse,
        EGCSystemMsg::k_EGCMsgMemCachedSet,
        EGCSystemMsg::k_EGCMsgMemCachedDelete,
        EGCSystemMsg::k_EGCMsgMemCachedStats,
        EGCSystemMsg::k_EGCMsgMemCachedStatsResponse,
        EGCSystemMsg::k_EGCMsgMasterSetDirectory,
        EGCSystemMsg::k_EGCMsgMasterSetDirectoryResponse,
        EGCSystemMsg::k_EGCMsgMasterSetWebAPIRouting,
        EGCSystemMsg::k_EGCMsgMasterSetWebAPIRoutingResponse,
        EGCSystemMsg::k_EGCMsgMasterSetClientMsgRouting,
        EGCSystemMsg::k_EGCMsgMasterSetClientMsgRoutingResponse,
        EGCSystemMsg::k_EGCMsgSetOptions,
        EGCSystemMsg::k_EGCMsgSetOptionsResponse,
        EGCSystemMsg::k_EGCMsgSystemBase2,
        EGCSystemMsg::k_EGCMsgGetPurchaseTrustStatus,
        EGCSystemMsg::k_EGCMsgGetPurchaseTrustStatusResponse,
        EGCSystemMsg::k_EGCMsgUpdateSession,
        EGCSystemMsg::k_EGCMsgGCAccountVacStatusChange,
        EGCSystemMsg::k_EGCMsgCheckFriendship,
        EGCSystemMsg::k_EGCMsgCheckFriendshipResponse,
        EGCSystemMsg::k_EGCMsgGetPartnerAccountLink,
        EGCSystemMsg::k_EGCMsgGetPartnerAccountLinkResponse,
        EGCSystemMsg::k_EGCMsgDPPartnerMicroTxns,
        EGCSystemMsg::k_EGCMsgDPPartnerMicroTxnsResponse,
        EGCSystemMsg::k_EGCMsgVacVerificationChange,
        EGCSystemMsg::k_EGCMsgAccountPhoneNumberChange,
        EGCSystemMsg::k_EGCMsgInviteUserToLobby,
        EGCSystemMsg::k_EGCMsgGetGamePersonalDataCategoriesRequest,
        EGCSystemMsg::k_EGCMsgGetGamePersonalDataCategoriesResponse,
        EGCSystemMsg::k_EGCMsgGetGamePersonalDataEntriesRequest,
        EGCSystemMsg::k_EGCMsgGetGamePersonalDataEntriesResponse,
        EGCSystemMsg::k_EGCMsgTerminateGamePersonalDataEntriesRequest,
        EGCSystemMsg::k_EGCMsgTerminateGamePersonalDataEntriesResponse,
        EGCSystemMsg::k_EGCMsgRecurringSubscriptionStatusChange,
        EGCSystemMsg::k_EGCMsgDirectServiceMethod,
        EGCSystemMsg::k_EGCMsgDirectServiceMethodResponse,
    ];
}

impl ::protobuf::EnumFull for EGCSystemMsg {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EGCSystemMsg").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            EGCSystemMsg::k_EGCMsgInvalid => 0,
            EGCSystemMsg::k_EGCMsgMulti => 1,
            EGCSystemMsg::k_EGCMsgGenericReply => 2,
            EGCSystemMsg::k_EGCMsgSystemBase => 3,
            EGCSystemMsg::k_EGCMsgAchievementAwarded => 4,
            EGCSystemMsg::k_EGCMsgConCommand => 5,
            EGCSystemMsg::k_EGCMsgStartPlaying => 6,
            EGCSystemMsg::k_EGCMsgStopPlaying => 7,
            EGCSystemMsg::k_EGCMsgStartGameserver => 8,
            EGCSystemMsg::k_EGCMsgStopGameserver => 9,
            EGCSystemMsg::k_EGCMsgWGRequest => 10,
            EGCSystemMsg::k_EGCMsgWGResponse => 11,
            EGCSystemMsg::k_EGCMsgGetUserGameStatsSchema => 12,
            EGCSystemMsg::k_EGCMsgGetUserGameStatsSchemaResponse => 13,
            EGCSystemMsg::k_EGCMsgGetUserStatsDEPRECATED => 14,
            EGCSystemMsg::k_EGCMsgGetUserStatsResponse => 15,
            EGCSystemMsg::k_EGCMsgAppInfoUpdated => 16,
            EGCSystemMsg::k_EGCMsgValidateSession => 17,
            EGCSystemMsg::k_EGCMsgValidateSessionResponse => 18,
            EGCSystemMsg::k_EGCMsgLookupAccountFromInput => 19,
            EGCSystemMsg::k_EGCMsgSendHTTPRequest => 20,
            EGCSystemMsg::k_EGCMsgSendHTTPRequestResponse => 21,
            EGCSystemMsg::k_EGCMsgPreTestSetup => 22,
            EGCSystemMsg::k_EGCMsgRecordSupportAction => 23,
            EGCSystemMsg::k_EGCMsgGetAccountDetails_DEPRECATED => 24,
            EGCSystemMsg::k_EGCMsgReceiveInterAppMessage => 25,
            EGCSystemMsg::k_EGCMsgFindAccounts => 26,
            EGCSystemMsg::k_EGCMsgPostAlert => 27,
            EGCSystemMsg::k_EGCMsgGetLicenses => 28,
            EGCSystemMsg::k_EGCMsgGetUserStats => 29,
            EGCSystemMsg::k_EGCMsgGetCommands => 30,
            EGCSystemMsg::k_EGCMsgGetCommandsResponse => 31,
            EGCSystemMsg::k_EGCMsgAddFreeLicense => 32,
            EGCSystemMsg::k_EGCMsgAddFreeLicenseResponse => 33,
            EGCSystemMsg::k_EGCMsgGetIPLocation => 34,
            EGCSystemMsg::k_EGCMsgGetIPLocationResponse => 35,
            EGCSystemMsg::k_EGCMsgSystemStatsSchema => 36,
            EGCSystemMsg::k_EGCMsgGetSystemStats => 37,
            EGCSystemMsg::k_EGCMsgGetSystemStatsResponse => 38,
            EGCSystemMsg::k_EGCMsgSendEmail => 39,
            EGCSystemMsg::k_EGCMsgSendEmailResponse => 40,
            EGCSystemMsg::k_EGCMsgGetEmailTemplate => 41,
            EGCSystemMsg::k_EGCMsgGetEmailTemplateResponse => 42,
            EGCSystemMsg::k_EGCMsgGrantGuestPass => 43,
            EGCSystemMsg::k_EGCMsgGrantGuestPassResponse => 44,
            EGCSystemMsg::k_EGCMsgGetAccountDetails => 45,
            EGCSystemMsg::k_EGCMsgGetAccountDetailsResponse => 46,
            EGCSystemMsg::k_EGCMsgGetPersonaNames => 47,
            EGCSystemMsg::k_EGCMsgGetPersonaNamesResponse => 48,
            EGCSystemMsg::k_EGCMsgMultiplexMsg => 49,
            EGCSystemMsg::k_EGCMsgMultiplexMsgResponse => 50,
            EGCSystemMsg::k_EGCMsgWebAPIRegisterInterfaces => 51,
            EGCSystemMsg::k_EGCMsgWebAPIJobRequest => 52,
            EGCSystemMsg::k_EGCMsgWebAPIJobRequestHttpResponse => 53,
            EGCSystemMsg::k_EGCMsgWebAPIJobRequestForwardResponse => 54,
            EGCSystemMsg::k_EGCMsgMemCachedGet => 55,
            EGCSystemMsg::k_EGCMsgMemCachedGetResponse => 56,
            EGCSystemMsg::k_EGCMsgMemCachedSet => 57,
            EGCSystemMsg::k_EGCMsgMemCachedDelete => 58,
            EGCSystemMsg::k_EGCMsgMemCachedStats => 59,
            EGCSystemMsg::k_EGCMsgMemCachedStatsResponse => 60,
            EGCSystemMsg::k_EGCMsgMasterSetDirectory => 61,
            EGCSystemMsg::k_EGCMsgMasterSetDirectoryResponse => 62,
            EGCSystemMsg::k_EGCMsgMasterSetWebAPIRouting => 63,
            EGCSystemMsg::k_EGCMsgMasterSetWebAPIRoutingResponse => 64,
            EGCSystemMsg::k_EGCMsgMasterSetClientMsgRouting => 65,
            EGCSystemMsg::k_EGCMsgMasterSetClientMsgRoutingResponse => 66,
            EGCSystemMsg::k_EGCMsgSetOptions => 67,
            EGCSystemMsg::k_EGCMsgSetOptionsResponse => 68,
            EGCSystemMsg::k_EGCMsgSystemBase2 => 69,
            EGCSystemMsg::k_EGCMsgGetPurchaseTrustStatus => 70,
            EGCSystemMsg::k_EGCMsgGetPurchaseTrustStatusResponse => 71,
            EGCSystemMsg::k_EGCMsgUpdateSession => 72,
            EGCSystemMsg::k_EGCMsgGCAccountVacStatusChange => 73,
            EGCSystemMsg::k_EGCMsgCheckFriendship => 74,
            EGCSystemMsg::k_EGCMsgCheckFriendshipResponse => 75,
            EGCSystemMsg::k_EGCMsgGetPartnerAccountLink => 76,
            EGCSystemMsg::k_EGCMsgGetPartnerAccountLinkResponse => 77,
            EGCSystemMsg::k_EGCMsgDPPartnerMicroTxns => 78,
            EGCSystemMsg::k_EGCMsgDPPartnerMicroTxnsResponse => 79,
            EGCSystemMsg::k_EGCMsgVacVerificationChange => 80,
            EGCSystemMsg::k_EGCMsgAccountPhoneNumberChange => 81,
            EGCSystemMsg::k_EGCMsgInviteUserToLobby => 82,
            EGCSystemMsg::k_EGCMsgGetGamePersonalDataCategoriesRequest => 83,
            EGCSystemMsg::k_EGCMsgGetGamePersonalDataCategoriesResponse => 84,
            EGCSystemMsg::k_EGCMsgGetGamePersonalDataEntriesRequest => 85,
            EGCSystemMsg::k_EGCMsgGetGamePersonalDataEntriesResponse => 86,
            EGCSystemMsg::k_EGCMsgTerminateGamePersonalDataEntriesRequest => 87,
            EGCSystemMsg::k_EGCMsgTerminateGamePersonalDataEntriesResponse => 88,
            EGCSystemMsg::k_EGCMsgRecurringSubscriptionStatusChange => 89,
            EGCSystemMsg::k_EGCMsgDirectServiceMethod => 90,
            EGCSystemMsg::k_EGCMsgDirectServiceMethodResponse => 91,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EGCSystemMsg {
    fn default() -> Self {
        EGCSystemMsg::k_EGCMsgInvalid
    }
}

impl EGCSystemMsg {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EGCSystemMsg>("EGCSystemMsg")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ESOMsg)
pub enum ESOMsg {
    // @@protoc_insertion_point(enum_value:ESOMsg.k_ESOMsg_Create)
    k_ESOMsg_Create = 21,
    // @@protoc_insertion_point(enum_value:ESOMsg.k_ESOMsg_Update)
    k_ESOMsg_Update = 22,
    // @@protoc_insertion_point(enum_value:ESOMsg.k_ESOMsg_Destroy)
    k_ESOMsg_Destroy = 23,
    // @@protoc_insertion_point(enum_value:ESOMsg.k_ESOMsg_CacheSubscribed)
    k_ESOMsg_CacheSubscribed = 24,
    // @@protoc_insertion_point(enum_value:ESOMsg.k_ESOMsg_CacheUnsubscribed)
    k_ESOMsg_CacheUnsubscribed = 25,
    // @@protoc_insertion_point(enum_value:ESOMsg.k_ESOMsg_UpdateMultiple)
    k_ESOMsg_UpdateMultiple = 26,
    // @@protoc_insertion_point(enum_value:ESOMsg.k_ESOMsg_CacheSubscriptionCheck)
    k_ESOMsg_CacheSubscriptionCheck = 27,
    // @@protoc_insertion_point(enum_value:ESOMsg.k_ESOMsg_CacheSubscriptionRefresh)
    k_ESOMsg_CacheSubscriptionRefresh = 28,
}

impl ::protobuf::Enum for ESOMsg {
    const NAME: &'static str = "ESOMsg";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ESOMsg> {
        match value {
            21 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_Create),
            22 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_Update),
            23 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_Destroy),
            24 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheSubscribed),
            25 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheUnsubscribed),
            26 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_UpdateMultiple),
            27 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheSubscriptionCheck),
            28 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheSubscriptionRefresh),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ESOMsg> {
        match str {
            "k_ESOMsg_Create" => ::std::option::Option::Some(ESOMsg::k_ESOMsg_Create),
            "k_ESOMsg_Update" => ::std::option::Option::Some(ESOMsg::k_ESOMsg_Update),
            "k_ESOMsg_Destroy" => ::std::option::Option::Some(ESOMsg::k_ESOMsg_Destroy),
            "k_ESOMsg_CacheSubscribed" => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheSubscribed),
            "k_ESOMsg_CacheUnsubscribed" => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheUnsubscribed),
            "k_ESOMsg_UpdateMultiple" => ::std::option::Option::Some(ESOMsg::k_ESOMsg_UpdateMultiple),
            "k_ESOMsg_CacheSubscriptionCheck" => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheSubscriptionCheck),
            "k_ESOMsg_CacheSubscriptionRefresh" => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheSubscriptionRefresh),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ESOMsg] = &[
        ESOMsg::k_ESOMsg_Create,
        ESOMsg::k_ESOMsg_Update,
        ESOMsg::k_ESOMsg_Destroy,
        ESOMsg::k_ESOMsg_CacheSubscribed,
        ESOMsg::k_ESOMsg_CacheUnsubscribed,
        ESOMsg::k_ESOMsg_UpdateMultiple,
        ESOMsg::k_ESOMsg_CacheSubscriptionCheck,
        ESOMsg::k_ESOMsg_CacheSubscriptionRefresh,
    ];
}

impl ::protobuf::EnumFull for ESOMsg {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ESOMsg").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            ESOMsg::k_ESOMsg_Create => 0,
            ESOMsg::k_ESOMsg_Update => 1,
            ESOMsg::k_ESOMsg_Destroy => 2,
            ESOMsg::k_ESOMsg_CacheSubscribed => 3,
            ESOMsg::k_ESOMsg_CacheUnsubscribed => 4,
            ESOMsg::k_ESOMsg_UpdateMultiple => 5,
            ESOMsg::k_ESOMsg_CacheSubscriptionCheck => 6,
            ESOMsg::k_ESOMsg_CacheSubscriptionRefresh => 7,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for ESOMsg {
    fn default() -> Self {
        ESOMsg::k_ESOMsg_Create
    }
}

impl ESOMsg {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ESOMsg>("ESOMsg")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EGCBaseClientMsg)
pub enum EGCBaseClientMsg {
    // @@protoc_insertion_point(enum_value:EGCBaseClientMsg.k_EMsgGCClientWelcome)
    k_EMsgGCClientWelcome = 4004,
    // @@protoc_insertion_point(enum_value:EGCBaseClientMsg.k_EMsgGCServerWelcome)
    k_EMsgGCServerWelcome = 4005,
    // @@protoc_insertion_point(enum_value:EGCBaseClientMsg.k_EMsgGCClientHello)
    k_EMsgGCClientHello = 4006,
    // @@protoc_insertion_point(enum_value:EGCBaseClientMsg.k_EMsgGCServerHello)
    k_EMsgGCServerHello = 4007,
    // @@protoc_insertion_point(enum_value:EGCBaseClientMsg.k_EMsgGCClientConnectionStatus)
    k_EMsgGCClientConnectionStatus = 4009,
    // @@protoc_insertion_point(enum_value:EGCBaseClientMsg.k_EMsgGCServerConnectionStatus)
    k_EMsgGCServerConnectionStatus = 4010,
    // @@protoc_insertion_point(enum_value:EGCBaseClientMsg.k_EMsgGCClientHelloPartner)
    k_EMsgGCClientHelloPartner = 4011,
    // @@protoc_insertion_point(enum_value:EGCBaseClientMsg.k_EMsgGCClientHelloPW)
    k_EMsgGCClientHelloPW = 4012,
    // @@protoc_insertion_point(enum_value:EGCBaseClientMsg.k_EMsgGCClientHelloR2)
    k_EMsgGCClientHelloR2 = 4013,
    // @@protoc_insertion_point(enum_value:EGCBaseClientMsg.k_EMsgGCClientHelloR3)
    k_EMsgGCClientHelloR3 = 4014,
    // @@protoc_insertion_point(enum_value:EGCBaseClientMsg.k_EMsgGCClientHelloR4)
    k_EMsgGCClientHelloR4 = 4015,
}

impl ::protobuf::Enum for EGCBaseClientMsg {
    const NAME: &'static str = "EGCBaseClientMsg";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EGCBaseClientMsg> {
        match value {
            4004 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientWelcome),
            4005 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCServerWelcome),
            4006 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientHello),
            4007 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCServerHello),
            4009 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientConnectionStatus),
            4010 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCServerConnectionStatus),
            4011 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientHelloPartner),
            4012 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientHelloPW),
            4013 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientHelloR2),
            4014 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientHelloR3),
            4015 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientHelloR4),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EGCBaseClientMsg> {
        match str {
            "k_EMsgGCClientWelcome" => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientWelcome),
            "k_EMsgGCServerWelcome" => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCServerWelcome),
            "k_EMsgGCClientHello" => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientHello),
            "k_EMsgGCServerHello" => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCServerHello),
            "k_EMsgGCClientConnectionStatus" => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientConnectionStatus),
            "k_EMsgGCServerConnectionStatus" => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCServerConnectionStatus),
            "k_EMsgGCClientHelloPartner" => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientHelloPartner),
            "k_EMsgGCClientHelloPW" => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientHelloPW),
            "k_EMsgGCClientHelloR2" => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientHelloR2),
            "k_EMsgGCClientHelloR3" => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientHelloR3),
            "k_EMsgGCClientHelloR4" => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientHelloR4),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EGCBaseClientMsg] = &[
        EGCBaseClientMsg::k_EMsgGCClientWelcome,
        EGCBaseClientMsg::k_EMsgGCServerWelcome,
        EGCBaseClientMsg::k_EMsgGCClientHello,
        EGCBaseClientMsg::k_EMsgGCServerHello,
        EGCBaseClientMsg::k_EMsgGCClientConnectionStatus,
        EGCBaseClientMsg::k_EMsgGCServerConnectionStatus,
        EGCBaseClientMsg::k_EMsgGCClientHelloPartner,
        EGCBaseClientMsg::k_EMsgGCClientHelloPW,
        EGCBaseClientMsg::k_EMsgGCClientHelloR2,
        EGCBaseClientMsg::k_EMsgGCClientHelloR3,
        EGCBaseClientMsg::k_EMsgGCClientHelloR4,
    ];
}

impl ::protobuf::EnumFull for EGCBaseClientMsg {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EGCBaseClientMsg").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            EGCBaseClientMsg::k_EMsgGCClientWelcome => 0,
            EGCBaseClientMsg::k_EMsgGCServerWelcome => 1,
            EGCBaseClientMsg::k_EMsgGCClientHello => 2,
            EGCBaseClientMsg::k_EMsgGCServerHello => 3,
            EGCBaseClientMsg::k_EMsgGCClientConnectionStatus => 4,
            EGCBaseClientMsg::k_EMsgGCServerConnectionStatus => 5,
            EGCBaseClientMsg::k_EMsgGCClientHelloPartner => 6,
            EGCBaseClientMsg::k_EMsgGCClientHelloPW => 7,
            EGCBaseClientMsg::k_EMsgGCClientHelloR2 => 8,
            EGCBaseClientMsg::k_EMsgGCClientHelloR3 => 9,
            EGCBaseClientMsg::k_EMsgGCClientHelloR4 => 10,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for EGCBaseClientMsg {
    fn default() -> Self {
        EGCBaseClientMsg::k_EMsgGCClientWelcome
    }
}

impl EGCBaseClientMsg {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EGCBaseClientMsg>("EGCBaseClientMsg")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EGCToGCMsg)
pub enum EGCToGCMsg {
    // @@protoc_insertion_point(enum_value:EGCToGCMsg.k_EGCToGCMsgMasterAck)
    k_EGCToGCMsgMasterAck = 150,
    // @@protoc_insertion_point(enum_value:EGCToGCMsg.k_EGCToGCMsgMasterAckResponse)
    k_EGCToGCMsgMasterAckResponse = 151,
    // @@protoc_insertion_point(enum_value:EGCToGCMsg.k_EGCToGCMsgRouted)
    k_EGCToGCMsgRouted = 152,
    // @@protoc_insertion_point(enum_value:EGCToGCMsg.k_EGCToGCMsgRoutedReply)
    k_EGCToGCMsgRoutedReply = 153,
    // @@protoc_insertion_point(enum_value:EGCToGCMsg.k_EMsgUpdateSessionIP)
    k_EMsgUpdateSessionIP = 154,
    // @@protoc_insertion_point(enum_value:EGCToGCMsg.k_EMsgRequestSessionIP)
    k_EMsgRequestSessionIP = 155,
    // @@protoc_insertion_point(enum_value:EGCToGCMsg.k_EMsgRequestSessionIPResponse)
    k_EMsgRequestSessionIPResponse = 156,
    // @@protoc_insertion_point(enum_value:EGCToGCMsg.k_EGCToGCMsgMasterStartupComplete)
    k_EGCToGCMsgMasterStartupComplete = 157,
}

impl ::protobuf::Enum for EGCToGCMsg {
    const NAME: &'static str = "EGCToGCMsg";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EGCToGCMsg> {
        match value {
            150 => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgMasterAck),
            151 => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgMasterAckResponse),
            152 => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgRouted),
            153 => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgRoutedReply),
            154 => ::std::option::Option::Some(EGCToGCMsg::k_EMsgUpdateSessionIP),
            155 => ::std::option::Option::Some(EGCToGCMsg::k_EMsgRequestSessionIP),
            156 => ::std::option::Option::Some(EGCToGCMsg::k_EMsgRequestSessionIPResponse),
            157 => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgMasterStartupComplete),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EGCToGCMsg> {
        match str {
            "k_EGCToGCMsgMasterAck" => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgMasterAck),
            "k_EGCToGCMsgMasterAckResponse" => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgMasterAckResponse),
            "k_EGCToGCMsgRouted" => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgRouted),
            "k_EGCToGCMsgRoutedReply" => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgRoutedReply),
            "k_EMsgUpdateSessionIP" => ::std::option::Option::Some(EGCToGCMsg::k_EMsgUpdateSessionIP),
            "k_EMsgRequestSessionIP" => ::std::option::Option::Some(EGCToGCMsg::k_EMsgRequestSessionIP),
            "k_EMsgRequestSessionIPResponse" => ::std::option::Option::Some(EGCToGCMsg::k_EMsgRequestSessionIPResponse),
            "k_EGCToGCMsgMasterStartupComplete" => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgMasterStartupComplete),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EGCToGCMsg] = &[
        EGCToGCMsg::k_EGCToGCMsgMasterAck,
        EGCToGCMsg::k_EGCToGCMsgMasterAckResponse,
        EGCToGCMsg::k_EGCToGCMsgRouted,
        EGCToGCMsg::k_EGCToGCMsgRoutedReply,
        EGCToGCMsg::k_EMsgUpdateSessionIP,
        EGCToGCMsg::k_EMsgRequestSessionIP,
        EGCToGCMsg::k_EMsgRequestSessionIPResponse,
        EGCToGCMsg::k_EGCToGCMsgMasterStartupComplete,
    ];
}

impl ::protobuf::EnumFull for EGCToGCMsg {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EGCToGCMsg").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            EGCToGCMsg::k_EGCToGCMsgMasterAck => 0,
            EGCToGCMsg::k_EGCToGCMsgMasterAckResponse => 1,
            EGCToGCMsg::k_EGCToGCMsgRouted => 2,
            EGCToGCMsg::k_EGCToGCMsgRoutedReply => 3,
            EGCToGCMsg::k_EMsgUpdateSessionIP => 4,
            EGCToGCMsg::k_EMsgRequestSessionIP => 5,
            EGCToGCMsg::k_EMsgRequestSessionIPResponse => 6,
            EGCToGCMsg::k_EGCToGCMsgMasterStartupComplete => 7,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for EGCToGCMsg {
    fn default() -> Self {
        EGCToGCMsg::k_EGCToGCMsgMasterAck
    }
}

impl EGCToGCMsg {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EGCToGCMsg>("EGCToGCMsg")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ECommunityItemClass)
pub enum ECommunityItemClass {
    // @@protoc_insertion_point(enum_value:ECommunityItemClass.k_ECommunityItemClass_Invalid)
    k_ECommunityItemClass_Invalid = 0,
    // @@protoc_insertion_point(enum_value:ECommunityItemClass.k_ECommunityItemClass_Badge)
    k_ECommunityItemClass_Badge = 1,
    // @@protoc_insertion_point(enum_value:ECommunityItemClass.k_ECommunityItemClass_GameCard)
    k_ECommunityItemClass_GameCard = 2,
    // @@protoc_insertion_point(enum_value:ECommunityItemClass.k_ECommunityItemClass_ProfileBackground)
    k_ECommunityItemClass_ProfileBackground = 3,
    // @@protoc_insertion_point(enum_value:ECommunityItemClass.k_ECommunityItemClass_Emoticon)
    k_ECommunityItemClass_Emoticon = 4,
    // @@protoc_insertion_point(enum_value:ECommunityItemClass.k_ECommunityItemClass_BoosterPack)
    k_ECommunityItemClass_BoosterPack = 5,
    // @@protoc_insertion_point(enum_value:ECommunityItemClass.k_ECommunityItemClass_Consumable)
    k_ECommunityItemClass_Consumable = 6,
    // @@protoc_insertion_point(enum_value:ECommunityItemClass.k_ECommunityItemClass_GameGoo)
    k_ECommunityItemClass_GameGoo = 7,
    // @@protoc_insertion_point(enum_value:ECommunityItemClass.k_ECommunityItemClass_ProfileModifier)
    k_ECommunityItemClass_ProfileModifier = 8,
    // @@protoc_insertion_point(enum_value:ECommunityItemClass.k_ECommunityItemClass_Scene)
    k_ECommunityItemClass_Scene = 9,
    // @@protoc_insertion_point(enum_value:ECommunityItemClass.k_ECommunityItemClass_SalienItem)
    k_ECommunityItemClass_SalienItem = 10,
}

impl ::protobuf::Enum for ECommunityItemClass {
    const NAME: &'static str = "ECommunityItemClass";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ECommunityItemClass> {
        match value {
            0 => ::std::option::Option::Some(ECommunityItemClass::k_ECommunityItemClass_Invalid),
            1 => ::std::option::Option::Some(ECommunityItemClass::k_ECommunityItemClass_Badge),
            2 => ::std::option::Option::Some(ECommunityItemClass::k_ECommunityItemClass_GameCard),
            3 => ::std::option::Option::Some(ECommunityItemClass::k_ECommunityItemClass_ProfileBackground),
            4 => ::std::option::Option::Some(ECommunityItemClass::k_ECommunityItemClass_Emoticon),
            5 => ::std::option::Option::Some(ECommunityItemClass::k_ECommunityItemClass_BoosterPack),
            6 => ::std::option::Option::Some(ECommunityItemClass::k_ECommunityItemClass_Consumable),
            7 => ::std::option::Option::Some(ECommunityItemClass::k_ECommunityItemClass_GameGoo),
            8 => ::std::option::Option::Some(ECommunityItemClass::k_ECommunityItemClass_ProfileModifier),
            9 => ::std::option::Option::Some(ECommunityItemClass::k_ECommunityItemClass_Scene),
            10 => ::std::option::Option::Some(ECommunityItemClass::k_ECommunityItemClass_SalienItem),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ECommunityItemClass> {
        match str {
            "k_ECommunityItemClass_Invalid" => ::std::option::Option::Some(ECommunityItemClass::k_ECommunityItemClass_Invalid),
            "k_ECommunityItemClass_Badge" => ::std::option::Option::Some(ECommunityItemClass::k_ECommunityItemClass_Badge),
            "k_ECommunityItemClass_GameCard" => ::std::option::Option::Some(ECommunityItemClass::k_ECommunityItemClass_GameCard),
            "k_ECommunityItemClass_ProfileBackground" => ::std::option::Option::Some(ECommunityItemClass::k_ECommunityItemClass_ProfileBackground),
            "k_ECommunityItemClass_Emoticon" => ::std::option::Option::Some(ECommunityItemClass::k_ECommunityItemClass_Emoticon),
            "k_ECommunityItemClass_BoosterPack" => ::std::option::Option::Some(ECommunityItemClass::k_ECommunityItemClass_BoosterPack),
            "k_ECommunityItemClass_Consumable" => ::std::option::Option::Some(ECommunityItemClass::k_ECommunityItemClass_Consumable),
            "k_ECommunityItemClass_GameGoo" => ::std::option::Option::Some(ECommunityItemClass::k_ECommunityItemClass_GameGoo),
            "k_ECommunityItemClass_ProfileModifier" => ::std::option::Option::Some(ECommunityItemClass::k_ECommunityItemClass_ProfileModifier),
            "k_ECommunityItemClass_Scene" => ::std::option::Option::Some(ECommunityItemClass::k_ECommunityItemClass_Scene),
            "k_ECommunityItemClass_SalienItem" => ::std::option::Option::Some(ECommunityItemClass::k_ECommunityItemClass_SalienItem),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ECommunityItemClass] = &[
        ECommunityItemClass::k_ECommunityItemClass_Invalid,
        ECommunityItemClass::k_ECommunityItemClass_Badge,
        ECommunityItemClass::k_ECommunityItemClass_GameCard,
        ECommunityItemClass::k_ECommunityItemClass_ProfileBackground,
        ECommunityItemClass::k_ECommunityItemClass_Emoticon,
        ECommunityItemClass::k_ECommunityItemClass_BoosterPack,
        ECommunityItemClass::k_ECommunityItemClass_Consumable,
        ECommunityItemClass::k_ECommunityItemClass_GameGoo,
        ECommunityItemClass::k_ECommunityItemClass_ProfileModifier,
        ECommunityItemClass::k_ECommunityItemClass_Scene,
        ECommunityItemClass::k_ECommunityItemClass_SalienItem,
    ];
}

impl ::protobuf::EnumFull for ECommunityItemClass {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ECommunityItemClass").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ECommunityItemClass {
    fn default() -> Self {
        ECommunityItemClass::k_ECommunityItemClass_Invalid
    }
}

impl ECommunityItemClass {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ECommunityItemClass>("ECommunityItemClass")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ECommunityItemAttribute)
pub enum ECommunityItemAttribute {
    // @@protoc_insertion_point(enum_value:ECommunityItemAttribute.k_ECommunityItemAttribute_Invalid)
    k_ECommunityItemAttribute_Invalid = 0,
    // @@protoc_insertion_point(enum_value:ECommunityItemAttribute.k_ECommunityItemAttribute_CardBorder)
    k_ECommunityItemAttribute_CardBorder = 1,
    // @@protoc_insertion_point(enum_value:ECommunityItemAttribute.k_ECommunityItemAttribute_Level)
    k_ECommunityItemAttribute_Level = 2,
    // @@protoc_insertion_point(enum_value:ECommunityItemAttribute.k_ECommunityItemAttribute_IssueNumber)
    k_ECommunityItemAttribute_IssueNumber = 3,
    // @@protoc_insertion_point(enum_value:ECommunityItemAttribute.k_ECommunityItemAttribute_TradableTime)
    k_ECommunityItemAttribute_TradableTime = 4,
    // @@protoc_insertion_point(enum_value:ECommunityItemAttribute.k_ECommunityItemAttribute_StorePackageID)
    k_ECommunityItemAttribute_StorePackageID = 5,
    // @@protoc_insertion_point(enum_value:ECommunityItemAttribute.k_ECommunityItemAttribute_CommunityItemAppID)
    k_ECommunityItemAttribute_CommunityItemAppID = 6,
    // @@protoc_insertion_point(enum_value:ECommunityItemAttribute.k_ECommunityItemAttribute_CommunityItemType)
    k_ECommunityItemAttribute_CommunityItemType = 7,
    // @@protoc_insertion_point(enum_value:ECommunityItemAttribute.k_ECommunityItemAttribute_ProfileModiferEnabled)
    k_ECommunityItemAttribute_ProfileModiferEnabled = 8,
    // @@protoc_insertion_point(enum_value:ECommunityItemAttribute.k_ECommunityItemAttribute_ExpiryTime)
    k_ECommunityItemAttribute_ExpiryTime = 9,
}

impl ::protobuf::Enum for ECommunityItemAttribute {
    const NAME: &'static str = "ECommunityItemAttribute";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ECommunityItemAttribute> {
        match value {
            0 => ::std::option::Option::Some(ECommunityItemAttribute::k_ECommunityItemAttribute_Invalid),
            1 => ::std::option::Option::Some(ECommunityItemAttribute::k_ECommunityItemAttribute_CardBorder),
            2 => ::std::option::Option::Some(ECommunityItemAttribute::k_ECommunityItemAttribute_Level),
            3 => ::std::option::Option::Some(ECommunityItemAttribute::k_ECommunityItemAttribute_IssueNumber),
            4 => ::std::option::Option::Some(ECommunityItemAttribute::k_ECommunityItemAttribute_TradableTime),
            5 => ::std::option::Option::Some(ECommunityItemAttribute::k_ECommunityItemAttribute_StorePackageID),
            6 => ::std::option::Option::Some(ECommunityItemAttribute::k_ECommunityItemAttribute_CommunityItemAppID),
            7 => ::std::option::Option::Some(ECommunityItemAttribute::k_ECommunityItemAttribute_CommunityItemType),
            8 => ::std::option::Option::Some(ECommunityItemAttribute::k_ECommunityItemAttribute_ProfileModiferEnabled),
            9 => ::std::option::Option::Some(ECommunityItemAttribute::k_ECommunityItemAttribute_ExpiryTime),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ECommunityItemAttribute> {
        match str {
            "k_ECommunityItemAttribute_Invalid" => ::std::option::Option::Some(ECommunityItemAttribute::k_ECommunityItemAttribute_Invalid),
            "k_ECommunityItemAttribute_CardBorder" => ::std::option::Option::Some(ECommunityItemAttribute::k_ECommunityItemAttribute_CardBorder),
            "k_ECommunityItemAttribute_Level" => ::std::option::Option::Some(ECommunityItemAttribute::k_ECommunityItemAttribute_Level),
            "k_ECommunityItemAttribute_IssueNumber" => ::std::option::Option::Some(ECommunityItemAttribute::k_ECommunityItemAttribute_IssueNumber),
            "k_ECommunityItemAttribute_TradableTime" => ::std::option::Option::Some(ECommunityItemAttribute::k_ECommunityItemAttribute_TradableTime),
            "k_ECommunityItemAttribute_StorePackageID" => ::std::option::Option::Some(ECommunityItemAttribute::k_ECommunityItemAttribute_StorePackageID),
            "k_ECommunityItemAttribute_CommunityItemAppID" => ::std::option::Option::Some(ECommunityItemAttribute::k_ECommunityItemAttribute_CommunityItemAppID),
            "k_ECommunityItemAttribute_CommunityItemType" => ::std::option::Option::Some(ECommunityItemAttribute::k_ECommunityItemAttribute_CommunityItemType),
            "k_ECommunityItemAttribute_ProfileModiferEnabled" => ::std::option::Option::Some(ECommunityItemAttribute::k_ECommunityItemAttribute_ProfileModiferEnabled),
            "k_ECommunityItemAttribute_ExpiryTime" => ::std::option::Option::Some(ECommunityItemAttribute::k_ECommunityItemAttribute_ExpiryTime),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ECommunityItemAttribute] = &[
        ECommunityItemAttribute::k_ECommunityItemAttribute_Invalid,
        ECommunityItemAttribute::k_ECommunityItemAttribute_CardBorder,
        ECommunityItemAttribute::k_ECommunityItemAttribute_Level,
        ECommunityItemAttribute::k_ECommunityItemAttribute_IssueNumber,
        ECommunityItemAttribute::k_ECommunityItemAttribute_TradableTime,
        ECommunityItemAttribute::k_ECommunityItemAttribute_StorePackageID,
        ECommunityItemAttribute::k_ECommunityItemAttribute_CommunityItemAppID,
        ECommunityItemAttribute::k_ECommunityItemAttribute_CommunityItemType,
        ECommunityItemAttribute::k_ECommunityItemAttribute_ProfileModiferEnabled,
        ECommunityItemAttribute::k_ECommunityItemAttribute_ExpiryTime,
    ];
}

impl ::protobuf::EnumFull for ECommunityItemAttribute {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ECommunityItemAttribute").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ECommunityItemAttribute {
    fn default() -> Self {
        ECommunityItemAttribute::k_ECommunityItemAttribute_Invalid
    }
}

impl ECommunityItemAttribute {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ECommunityItemAttribute>("ECommunityItemAttribute")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12gcsystemmsgs.proto\"o\n\x1cCMsgGCHVacVerificationChange\x12\x18\n\
    \x07steamid\x18\x01\x20\x01(\x06R\x07steamid\x12\x14\n\x05appid\x18\x02\
    \x20\x01(\rR\x05appid\x12\x1f\n\x0bis_verified\x18\x03\x20\x01(\x08R\nis\
    Verified\"\xb4\x01\n\x1fCMsgGCHAccountPhoneNumberChange\x12\x18\n\x07ste\
    amid\x18\x01\x20\x01(\x06R\x07steamid\x12\x14\n\x05appid\x18\x02\x20\x01\
    (\rR\x05appid\x12\x19\n\x08phone_id\x18\x03\x20\x01(\x04R\x07phoneId\x12\
    \x1f\n\x0bis_verified\x18\x04\x20\x01(\x08R\nisVerified\x12%\n\x0eis_ide\
    ntifying\x18\x05\x20\x01(\x08R\risIdentifying\"\x98\x01\n\x18CMsgGCHInvi\
    teUserToLobby\x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\x12\
    \x14\n\x05appid\x18\x02\x20\x01(\rR\x05appid\x12'\n\x0fsteamid_invited\
    \x18\x03\x20\x01(\x06R\x0esteamidInvited\x12#\n\rsteamid_lobby\x18\x04\
    \x20\x01(\x06R\x0csteamidLobby\"\x94\x01\n(CMsgGCHRecurringSubscriptionS\
    tatusChange\x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\x12\
    \x14\n\x05appid\x18\x02\x20\x01(\rR\x05appid\x12\x20\n\x0bagreementid\
    \x18\x03\x20\x01(\x06R\x0bagreementid\x12\x16\n\x06active\x18\x04\x20\
    \x01(\x08R\x06active\"\x92\x03\n1CQuest_PublisherAddCommunityItemsToPlay\
    er_Request\x12\x18\n\x07steamid\x18\x01\x20\x01(\x04R\x07steamid\x12\x14\
    \n\x05appid\x18\x02\x20\x01(\rR\x05appid\x12&\n\x0fmatch_item_type\x18\
    \x03\x20\x01(\rR\rmatchItemType\x12(\n\x10match_item_class\x18\x04\x20\
    \x01(\rR\x0ematchItemClass\x12(\n\x10prefix_item_name\x18\x05\x20\x01(\t\
    R\x0eprefixItemName\x12\\\n\nattributes\x18\x06\x20\x03(\x0b2<.CQuest_Pu\
    blisherAddCommunityItemsToPlayer_Request.AttributeR\nattributes\x12\x12\
    \n\x04note\x18\x07\x20\x01(\tR\x04note\x1a?\n\tAttribute\x12\x1c\n\tattr\
    ibute\x18\x01\x20\x01(\rR\tattribute\x12\x14\n\x05value\x18\x02\x20\x01(\
    \x04R\x05value\"~\n2CQuest_PublisherAddCommunityItemsToPlayer_Response\
    \x12#\n\ritems_matched\x18\x01\x20\x01(\rR\x0citemsMatched\x12#\n\ritems\
    _granted\x18\x02\x20\x01(\rR\x0citemsGranted\"\x91\x01\n'CCommunity_Game\
    PersonalDataCategoryInfo\x12\x12\n\x04type\x18\x01\x20\x01(\tR\x04type\
    \x12-\n\x12localization_token\x18\x02\x20\x01(\tR\x11localizationToken\
    \x12#\n\rtemplate_file\x18\x03\x20\x01(\tR\x0ctemplateFile\"H\n0CCommuni\
    ty_GetGamePersonalDataCategories_Request\x12\x14\n\x05appid\x18\x01\x20\
    \x01(\rR\x05appid\"\xad\x01\n1CCommunity_GetGamePersonalDataCategories_R\
    esponse\x12H\n\ncategories\x18\x01\x20\x03(\x0b2(.CCommunity_GamePersona\
    lDataCategoryInfoR\ncategories\x12.\n\x13app_assets_basename\x18\x02\x20\
    \x01(\tR\x11appAssetsBasename\"\x9a\x01\n-CCommunity_GetGamePersonalData\
    Entries_Request\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12\x18\
    \n\x07steamid\x18\x02\x20\x01(\x04R\x07steamid\x12\x12\n\x04type\x18\x03\
    \x20\x01(\tR\x04type\x12%\n\x0econtinue_token\x18\x04\x20\x01(\tR\rconti\
    nueToken\"\x8f\x01\n.CCommunity_GetGamePersonalDataEntries_Response\x12\
    \x1c\n\tgceresult\x18\x01\x20\x01(\rR\tgceresult\x12\x18\n\x07entries\
    \x18\x02\x20\x03(\tR\x07entries\x12%\n\x0econtinue_token\x18\x03\x20\x01\
    (\tR\rcontinueToken\"e\n3CCommunity_TerminateGamePersonalDataEntries_Req\
    uest\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12\x18\n\x07steami\
    d\x18\x02\x20\x01(\x04R\x07steamid\"T\n4CCommunity_TerminateGamePersonal\
    DataEntries_Response\x12\x1c\n\tgceresult\x18\x01\x20\x01(\rR\tgceresult\
    *\xc2\x18\n\x0cEGCSystemMsg\x12\x13\n\x0fk_EGCMsgInvalid\x10\0\x12\x11\n\
    \rk_EGCMsgMulti\x10\x01\x12\x18\n\x14k_EGCMsgGenericReply\x10\n\x12\x16\
    \n\x12k_EGCMsgSystemBase\x102\x12\x1e\n\x1ak_EGCMsgAchievementAwarded\
    \x103\x12\x16\n\x12k_EGCMsgConCommand\x104\x12\x18\n\x14k_EGCMsgStartPla\
    ying\x105\x12\x17\n\x13k_EGCMsgStopPlaying\x106\x12\x1b\n\x17k_EGCMsgSta\
    rtGameserver\x107\x12\x1a\n\x16k_EGCMsgStopGameserver\x108\x12\x15\n\x11\
    k_EGCMsgWGRequest\x109\x12\x16\n\x12k_EGCMsgWGResponse\x10:\x12\"\n\x1ek\
    _EGCMsgGetUserGameStatsSchema\x10;\x12*\n&k_EGCMsgGetUserGameStatsSchema\
    Response\x10<\x12\"\n\x1ek_EGCMsgGetUserStatsDEPRECATED\x10=\x12\x20\n\
    \x1ck_EGCMsgGetUserStatsResponse\x10>\x12\x1a\n\x16k_EGCMsgAppInfoUpdate\
    d\x10?\x12\x1b\n\x17k_EGCMsgValidateSession\x10@\x12#\n\x1fk_EGCMsgValid\
    ateSessionResponse\x10A\x12\"\n\x1ek_EGCMsgLookupAccountFromInput\x10B\
    \x12\x1b\n\x17k_EGCMsgSendHTTPRequest\x10C\x12#\n\x1fk_EGCMsgSendHTTPReq\
    uestResponse\x10D\x12\x18\n\x14k_EGCMsgPreTestSetup\x10E\x12\x1f\n\x1bk_\
    EGCMsgRecordSupportAction\x10F\x12(\n$k_EGCMsgGetAccountDetails_DEPRECAT\
    ED\x10G\x12\"\n\x1ek_EGCMsgReceiveInterAppMessage\x10I\x12\x18\n\x14k_EG\
    CMsgFindAccounts\x10J\x12\x15\n\x11k_EGCMsgPostAlert\x10K\x12\x17\n\x13k\
    _EGCMsgGetLicenses\x10L\x12\x18\n\x14k_EGCMsgGetUserStats\x10M\x12\x17\n\
    \x13k_EGCMsgGetCommands\x10N\x12\x1f\n\x1bk_EGCMsgGetCommandsResponse\
    \x10O\x12\x1a\n\x16k_EGCMsgAddFreeLicense\x10P\x12\"\n\x1ek_EGCMsgAddFre\
    eLicenseResponse\x10Q\x12\x19\n\x15k_EGCMsgGetIPLocation\x10R\x12!\n\x1d\
    k_EGCMsgGetIPLocationResponse\x10S\x12\x1d\n\x19k_EGCMsgSystemStatsSchem\
    a\x10T\x12\x1a\n\x16k_EGCMsgGetSystemStats\x10U\x12\"\n\x1ek_EGCMsgGetSy\
    stemStatsResponse\x10V\x12\x15\n\x11k_EGCMsgSendEmail\x10W\x12\x1d\n\x19\
    k_EGCMsgSendEmailResponse\x10X\x12\x1c\n\x18k_EGCMsgGetEmailTemplate\x10\
    Y\x12$\n\x20k_EGCMsgGetEmailTemplateResponse\x10Z\x12\x1a\n\x16k_EGCMsgG\
    rantGuestPass\x10[\x12\"\n\x1ek_EGCMsgGrantGuestPassResponse\x10\\\x12\
    \x1d\n\x19k_EGCMsgGetAccountDetails\x10]\x12%\n!k_EGCMsgGetAccountDetail\
    sResponse\x10^\x12\x1b\n\x17k_EGCMsgGetPersonaNames\x10_\x12#\n\x1fk_EGC\
    MsgGetPersonaNamesResponse\x10`\x12\x18\n\x14k_EGCMsgMultiplexMsg\x10a\
    \x12\x20\n\x1ck_EGCMsgMultiplexMsgResponse\x10b\x12$\n\x20k_EGCMsgWebAPI\
    RegisterInterfaces\x10e\x12\x1c\n\x18k_EGCMsgWebAPIJobRequest\x10f\x12(\
    \n$k_EGCMsgWebAPIJobRequestHttpResponse\x10h\x12+\n'k_EGCMsgWebAPIJobReq\
    uestForwardResponse\x10i\x12\x19\n\x14k_EGCMsgMemCachedGet\x10\xc8\x01\
    \x12!\n\x1ck_EGCMsgMemCachedGetResponse\x10\xc9\x01\x12\x19\n\x14k_EGCMs\
    gMemCachedSet\x10\xca\x01\x12\x1c\n\x17k_EGCMsgMemCachedDelete\x10\xcb\
    \x01\x12\x1b\n\x16k_EGCMsgMemCachedStats\x10\xcc\x01\x12#\n\x1ek_EGCMsgM\
    emCachedStatsResponse\x10\xcd\x01\x12\x1f\n\x1ak_EGCMsgMasterSetDirector\
    y\x10\xdc\x01\x12'\n\"k_EGCMsgMasterSetDirectoryResponse\x10\xdd\x01\x12\
    #\n\x1ek_EGCMsgMasterSetWebAPIRouting\x10\xde\x01\x12+\n&k_EGCMsgMasterS\
    etWebAPIRoutingResponse\x10\xdf\x01\x12&\n!k_EGCMsgMasterSetClientMsgRou\
    ting\x10\xe0\x01\x12.\n)k_EGCMsgMasterSetClientMsgRoutingResponse\x10\
    \xe1\x01\x12\x17\n\x12k_EGCMsgSetOptions\x10\xe2\x01\x12\x1f\n\x1ak_EGCM\
    sgSetOptionsResponse\x10\xe3\x01\x12\x18\n\x13k_EGCMsgSystemBase2\x10\
    \xf4\x03\x12#\n\x1ek_EGCMsgGetPurchaseTrustStatus\x10\xf5\x03\x12+\n&k_E\
    GCMsgGetPurchaseTrustStatusResponse\x10\xf6\x03\x12\x1a\n\x15k_EGCMsgUpd\
    ateSession\x10\xf7\x03\x12%\n\x20k_EGCMsgGCAccountVacStatusChange\x10\
    \xf8\x03\x12\x1c\n\x17k_EGCMsgCheckFriendship\x10\xf9\x03\x12$\n\x1fk_EG\
    CMsgCheckFriendshipResponse\x10\xfa\x03\x12\"\n\x1dk_EGCMsgGetPartnerAcc\
    ountLink\x10\xfb\x03\x12*\n%k_EGCMsgGetPartnerAccountLinkResponse\x10\
    \xfc\x03\x12\x1f\n\x1ak_EGCMsgDPPartnerMicroTxns\x10\x80\x04\x12'\n\"k_E\
    GCMsgDPPartnerMicroTxnsResponse\x10\x81\x04\x12\"\n\x1dk_EGCMsgVacVerifi\
    cationChange\x10\x86\x04\x12%\n\x20k_EGCMsgAccountPhoneNumberChange\x10\
    \x87\x04\x12\x1e\n\x19k_EGCMsgInviteUserToLobby\x10\x8b\x04\x121\n,k_EGC\
    MsgGetGamePersonalDataCategoriesRequest\x10\x8c\x04\x122\n-k_EGCMsgGetGa\
    mePersonalDataCategoriesResponse\x10\x8d\x04\x12.\n)k_EGCMsgGetGamePerso\
    nalDataEntriesRequest\x10\x8e\x04\x12/\n*k_EGCMsgGetGamePersonalDataEntr\
    iesResponse\x10\x8f\x04\x124\n/k_EGCMsgTerminateGamePersonalDataEntriesR\
    equest\x10\x90\x04\x125\n0k_EGCMsgTerminateGamePersonalDataEntriesRespon\
    se\x10\x91\x04\x12.\n)k_EGCMsgRecurringSubscriptionStatusChange\x10\x92\
    \x04\x12\x20\n\x1bk_EGCMsgDirectServiceMethod\x10\x93\x04\x12(\n#k_EGCMs\
    gDirectServiceMethodResponse\x10\x94\x04*\xef\x01\n\x06ESOMsg\x12\x13\n\
    \x0fk_ESOMsg_Create\x10\x15\x12\x13\n\x0fk_ESOMsg_Update\x10\x16\x12\x14\
    \n\x10k_ESOMsg_Destroy\x10\x17\x12\x1c\n\x18k_ESOMsg_CacheSubscribed\x10\
    \x18\x12\x1e\n\x1ak_ESOMsg_CacheUnsubscribed\x10\x19\x12\x1b\n\x17k_ESOM\
    sg_UpdateMultiple\x10\x1a\x12#\n\x1fk_ESOMsg_CacheSubscriptionCheck\x10\
    \x1b\x12%\n!k_ESOMsg_CacheSubscriptionRefresh\x10\x1c*\xd9\x02\n\x10EGCB\
    aseClientMsg\x12\x1a\n\x15k_EMsgGCClientWelcome\x10\xa4\x1f\x12\x1a\n\
    \x15k_EMsgGCServerWelcome\x10\xa5\x1f\x12\x18\n\x13k_EMsgGCClientHello\
    \x10\xa6\x1f\x12\x18\n\x13k_EMsgGCServerHello\x10\xa7\x1f\x12#\n\x1ek_EM\
    sgGCClientConnectionStatus\x10\xa9\x1f\x12#\n\x1ek_EMsgGCServerConnectio\
    nStatus\x10\xaa\x1f\x12\x1f\n\x1ak_EMsgGCClientHelloPartner\x10\xab\x1f\
    \x12\x1a\n\x15k_EMsgGCClientHelloPW\x10\xac\x1f\x12\x1a\n\x15k_EMsgGCCli\
    entHelloR2\x10\xad\x1f\x12\x1a\n\x15k_EMsgGCClientHelloR3\x10\xae\x1f\
    \x12\x1a\n\x15k_EMsgGCClientHelloR4\x10\xaf\x1f*\x89\x02\n\nEGCToGCMsg\
    \x12\x1a\n\x15k_EGCToGCMsgMasterAck\x10\x96\x01\x12\"\n\x1dk_EGCToGCMsgM\
    asterAckResponse\x10\x97\x01\x12\x17\n\x12k_EGCToGCMsgRouted\x10\x98\x01\
    \x12\x1c\n\x17k_EGCToGCMsgRoutedReply\x10\x99\x01\x12\x1a\n\x15k_EMsgUpd\
    ateSessionIP\x10\x9a\x01\x12\x1b\n\x16k_EMsgRequestSessionIP\x10\x9b\x01\
    \x12#\n\x1ek_EMsgRequestSessionIPResponse\x10\x9c\x01\x12&\n!k_EGCToGCMs\
    gMasterStartupComplete\x10\x9d\x01*\xb0\x03\n\x13ECommunityItemClass\x12\
    !\n\x1dk_ECommunityItemClass_Invalid\x10\0\x12\x1f\n\x1bk_ECommunityItem\
    Class_Badge\x10\x01\x12\"\n\x1ek_ECommunityItemClass_GameCard\x10\x02\
    \x12+\n'k_ECommunityItemClass_ProfileBackground\x10\x03\x12\"\n\x1ek_ECo\
    mmunityItemClass_Emoticon\x10\x04\x12%\n!k_ECommunityItemClass_BoosterPa\
    ck\x10\x05\x12$\n\x20k_ECommunityItemClass_Consumable\x10\x06\x12!\n\x1d\
    k_ECommunityItemClass_GameGoo\x10\x07\x12)\n%k_ECommunityItemClass_Profi\
    leModifier\x10\x08\x12\x1f\n\x1bk_ECommunityItemClass_Scene\x10\t\x12$\n\
    \x20k_ECommunityItemClass_SalienItem\x10\n*\xd6\x03\n\x17ECommunityItemA\
    ttribute\x12%\n!k_ECommunityItemAttribute_Invalid\x10\0\x12(\n$k_ECommun\
    ityItemAttribute_CardBorder\x10\x01\x12#\n\x1fk_ECommunityItemAttribute_\
    Level\x10\x02\x12)\n%k_ECommunityItemAttribute_IssueNumber\x10\x03\x12*\
    \n&k_ECommunityItemAttribute_TradableTime\x10\x04\x12,\n(k_ECommunityIte\
    mAttribute_StorePackageID\x10\x05\x120\n,k_ECommunityItemAttribute_Commu\
    nityItemAppID\x10\x06\x12/\n+k_ECommunityItemAttribute_CommunityItemType\
    \x10\x07\x123\n/k_ECommunityItemAttribute_ProfileModiferEnabled\x10\x08\
    \x12(\n$k_ECommunityItemAttribute_ExpiryTime\x10\t\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(14);
            messages.push(CMsgGCHVacVerificationChange::generated_message_descriptor_data());
            messages.push(CMsgGCHAccountPhoneNumberChange::generated_message_descriptor_data());
            messages.push(CMsgGCHInviteUserToLobby::generated_message_descriptor_data());
            messages.push(CMsgGCHRecurringSubscriptionStatusChange::generated_message_descriptor_data());
            messages.push(CQuest_PublisherAddCommunityItemsToPlayer_Request::generated_message_descriptor_data());
            messages.push(CQuest_PublisherAddCommunityItemsToPlayer_Response::generated_message_descriptor_data());
            messages.push(CCommunity_GamePersonalDataCategoryInfo::generated_message_descriptor_data());
            messages.push(CCommunity_GetGamePersonalDataCategories_Request::generated_message_descriptor_data());
            messages.push(CCommunity_GetGamePersonalDataCategories_Response::generated_message_descriptor_data());
            messages.push(CCommunity_GetGamePersonalDataEntries_Request::generated_message_descriptor_data());
            messages.push(CCommunity_GetGamePersonalDataEntries_Response::generated_message_descriptor_data());
            messages.push(CCommunity_TerminateGamePersonalDataEntries_Request::generated_message_descriptor_data());
            messages.push(CCommunity_TerminateGamePersonalDataEntries_Response::generated_message_descriptor_data());
            messages.push(cquest_publisher_add_community_items_to_player_request::Attribute::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(6);
            enums.push(EGCSystemMsg::generated_enum_descriptor_data());
            enums.push(ESOMsg::generated_enum_descriptor_data());
            enums.push(EGCBaseClientMsg::generated_enum_descriptor_data());
            enums.push(EGCToGCMsg::generated_enum_descriptor_data());
            enums.push(ECommunityItemClass::generated_enum_descriptor_data());
            enums.push(ECommunityItemAttribute::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
