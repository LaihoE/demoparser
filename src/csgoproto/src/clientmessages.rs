// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `clientmessages.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:CClientMsg_CustomGameEvent)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CClientMsg_CustomGameEvent {
    // message fields
    // @@protoc_insertion_point(field:CClientMsg_CustomGameEvent.event_name)
    pub event_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CClientMsg_CustomGameEvent.data)
    pub data: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:CClientMsg_CustomGameEvent.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CClientMsg_CustomGameEvent {
    fn default() -> &'a CClientMsg_CustomGameEvent {
        <CClientMsg_CustomGameEvent as ::protobuf::Message>::default_instance()
    }
}

impl CClientMsg_CustomGameEvent {
    pub fn new() -> CClientMsg_CustomGameEvent {
        ::std::default::Default::default()
    }

    // optional string event_name = 1;

    pub fn event_name(&self) -> &str {
        match self.event_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_event_name(&mut self) {
        self.event_name = ::std::option::Option::None;
    }

    pub fn has_event_name(&self) -> bool {
        self.event_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_event_name(&mut self, v: ::std::string::String) {
        self.event_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_event_name(&mut self) -> &mut ::std::string::String {
        if self.event_name.is_none() {
            self.event_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.event_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_event_name(&mut self) -> ::std::string::String {
        self.event_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes data = 2;

    pub fn data(&self) -> &[u8] {
        match self.data.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.data.is_none() {
            self.data = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.data.as_mut().unwrap()
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        self.data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "event_name",
            |m: &CClientMsg_CustomGameEvent| { &m.event_name },
            |m: &mut CClientMsg_CustomGameEvent| { &mut m.event_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "data",
            |m: &CClientMsg_CustomGameEvent| { &m.data },
            |m: &mut CClientMsg_CustomGameEvent| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CClientMsg_CustomGameEvent>(
            "CClientMsg_CustomGameEvent",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CClientMsg_CustomGameEvent {
    const NAME: &'static str = "CClientMsg_CustomGameEvent";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.event_name = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.data = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.event_name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.event_name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.data.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CClientMsg_CustomGameEvent {
        CClientMsg_CustomGameEvent::new()
    }

    fn clear(&mut self) {
        self.event_name = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CClientMsg_CustomGameEvent {
        static instance: CClientMsg_CustomGameEvent = CClientMsg_CustomGameEvent {
            event_name: ::std::option::Option::None,
            data: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CClientMsg_CustomGameEvent {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CClientMsg_CustomGameEvent").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CClientMsg_CustomGameEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CClientMsg_CustomGameEvent {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CClientMsg_CustomGameEventBounce)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CClientMsg_CustomGameEventBounce {
    // message fields
    // @@protoc_insertion_point(field:CClientMsg_CustomGameEventBounce.event_name)
    pub event_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CClientMsg_CustomGameEventBounce.data)
    pub data: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:CClientMsg_CustomGameEventBounce.player_slot)
    pub player_slot: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CClientMsg_CustomGameEventBounce.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CClientMsg_CustomGameEventBounce {
    fn default() -> &'a CClientMsg_CustomGameEventBounce {
        <CClientMsg_CustomGameEventBounce as ::protobuf::Message>::default_instance()
    }
}

impl CClientMsg_CustomGameEventBounce {
    pub fn new() -> CClientMsg_CustomGameEventBounce {
        ::std::default::Default::default()
    }

    // optional string event_name = 1;

    pub fn event_name(&self) -> &str {
        match self.event_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_event_name(&mut self) {
        self.event_name = ::std::option::Option::None;
    }

    pub fn has_event_name(&self) -> bool {
        self.event_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_event_name(&mut self, v: ::std::string::String) {
        self.event_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_event_name(&mut self) -> &mut ::std::string::String {
        if self.event_name.is_none() {
            self.event_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.event_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_event_name(&mut self) -> ::std::string::String {
        self.event_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes data = 2;

    pub fn data(&self) -> &[u8] {
        match self.data.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.data.is_none() {
            self.data = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.data.as_mut().unwrap()
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        self.data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional int32 player_slot = 3;

    pub fn player_slot(&self) -> i32 {
        self.player_slot.unwrap_or(-1i32)
    }

    pub fn clear_player_slot(&mut self) {
        self.player_slot = ::std::option::Option::None;
    }

    pub fn has_player_slot(&self) -> bool {
        self.player_slot.is_some()
    }

    // Param is passed by value, moved
    pub fn set_player_slot(&mut self, v: i32) {
        self.player_slot = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "event_name",
            |m: &CClientMsg_CustomGameEventBounce| { &m.event_name },
            |m: &mut CClientMsg_CustomGameEventBounce| { &mut m.event_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "data",
            |m: &CClientMsg_CustomGameEventBounce| { &m.data },
            |m: &mut CClientMsg_CustomGameEventBounce| { &mut m.data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "player_slot",
            |m: &CClientMsg_CustomGameEventBounce| { &m.player_slot },
            |m: &mut CClientMsg_CustomGameEventBounce| { &mut m.player_slot },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CClientMsg_CustomGameEventBounce>(
            "CClientMsg_CustomGameEventBounce",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CClientMsg_CustomGameEventBounce {
    const NAME: &'static str = "CClientMsg_CustomGameEventBounce";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.event_name = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.data = ::std::option::Option::Some(is.read_bytes()?);
                },
                24 => {
                    self.player_slot = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.event_name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.player_slot {
            my_size += ::protobuf::rt::int32_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.event_name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.data.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.player_slot {
            os.write_int32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CClientMsg_CustomGameEventBounce {
        CClientMsg_CustomGameEventBounce::new()
    }

    fn clear(&mut self) {
        self.event_name = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.player_slot = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CClientMsg_CustomGameEventBounce {
        static instance: CClientMsg_CustomGameEventBounce = CClientMsg_CustomGameEventBounce {
            event_name: ::std::option::Option::None,
            data: ::std::option::Option::None,
            player_slot: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CClientMsg_CustomGameEventBounce {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CClientMsg_CustomGameEventBounce").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CClientMsg_CustomGameEventBounce {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CClientMsg_CustomGameEventBounce {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CClientMsg_ClientUIEvent)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CClientMsg_ClientUIEvent {
    // message fields
    // @@protoc_insertion_point(field:CClientMsg_ClientUIEvent.event)
    pub event: ::std::option::Option<::protobuf::EnumOrUnknown<EClientUIEvent>>,
    // @@protoc_insertion_point(field:CClientMsg_ClientUIEvent.ent_ehandle)
    pub ent_ehandle: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CClientMsg_ClientUIEvent.client_ehandle)
    pub client_ehandle: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CClientMsg_ClientUIEvent.data1)
    pub data1: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CClientMsg_ClientUIEvent.data2)
    pub data2: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CClientMsg_ClientUIEvent.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CClientMsg_ClientUIEvent {
    fn default() -> &'a CClientMsg_ClientUIEvent {
        <CClientMsg_ClientUIEvent as ::protobuf::Message>::default_instance()
    }
}

impl CClientMsg_ClientUIEvent {
    pub fn new() -> CClientMsg_ClientUIEvent {
        ::std::default::Default::default()
    }

    // optional .EClientUIEvent event = 1;

    pub fn event(&self) -> EClientUIEvent {
        match self.event {
            Some(e) => e.enum_value_or(EClientUIEvent::EClientUIEvent_Invalid),
            None => EClientUIEvent::EClientUIEvent_Invalid,
        }
    }

    pub fn clear_event(&mut self) {
        self.event = ::std::option::Option::None;
    }

    pub fn has_event(&self) -> bool {
        self.event.is_some()
    }

    // Param is passed by value, moved
    pub fn set_event(&mut self, v: EClientUIEvent) {
        self.event = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint32 ent_ehandle = 2;

    pub fn ent_ehandle(&self) -> u32 {
        self.ent_ehandle.unwrap_or(0)
    }

    pub fn clear_ent_ehandle(&mut self) {
        self.ent_ehandle = ::std::option::Option::None;
    }

    pub fn has_ent_ehandle(&self) -> bool {
        self.ent_ehandle.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ent_ehandle(&mut self, v: u32) {
        self.ent_ehandle = ::std::option::Option::Some(v);
    }

    // optional uint32 client_ehandle = 3;

    pub fn client_ehandle(&self) -> u32 {
        self.client_ehandle.unwrap_or(0)
    }

    pub fn clear_client_ehandle(&mut self) {
        self.client_ehandle = ::std::option::Option::None;
    }

    pub fn has_client_ehandle(&self) -> bool {
        self.client_ehandle.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_ehandle(&mut self, v: u32) {
        self.client_ehandle = ::std::option::Option::Some(v);
    }

    // optional string data1 = 4;

    pub fn data1(&self) -> &str {
        match self.data1.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_data1(&mut self) {
        self.data1 = ::std::option::Option::None;
    }

    pub fn has_data1(&self) -> bool {
        self.data1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data1(&mut self, v: ::std::string::String) {
        self.data1 = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data1(&mut self) -> &mut ::std::string::String {
        if self.data1.is_none() {
            self.data1 = ::std::option::Option::Some(::std::string::String::new());
        }
        self.data1.as_mut().unwrap()
    }

    // Take field
    pub fn take_data1(&mut self) -> ::std::string::String {
        self.data1.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string data2 = 5;

    pub fn data2(&self) -> &str {
        match self.data2.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_data2(&mut self) {
        self.data2 = ::std::option::Option::None;
    }

    pub fn has_data2(&self) -> bool {
        self.data2.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data2(&mut self, v: ::std::string::String) {
        self.data2 = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data2(&mut self) -> &mut ::std::string::String {
        if self.data2.is_none() {
            self.data2 = ::std::option::Option::Some(::std::string::String::new());
        }
        self.data2.as_mut().unwrap()
    }

    // Take field
    pub fn take_data2(&mut self) -> ::std::string::String {
        self.data2.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "event",
            |m: &CClientMsg_ClientUIEvent| { &m.event },
            |m: &mut CClientMsg_ClientUIEvent| { &mut m.event },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ent_ehandle",
            |m: &CClientMsg_ClientUIEvent| { &m.ent_ehandle },
            |m: &mut CClientMsg_ClientUIEvent| { &mut m.ent_ehandle },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_ehandle",
            |m: &CClientMsg_ClientUIEvent| { &m.client_ehandle },
            |m: &mut CClientMsg_ClientUIEvent| { &mut m.client_ehandle },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "data1",
            |m: &CClientMsg_ClientUIEvent| { &m.data1 },
            |m: &mut CClientMsg_ClientUIEvent| { &mut m.data1 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "data2",
            |m: &CClientMsg_ClientUIEvent| { &m.data2 },
            |m: &mut CClientMsg_ClientUIEvent| { &mut m.data2 },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CClientMsg_ClientUIEvent>(
            "CClientMsg_ClientUIEvent",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CClientMsg_ClientUIEvent {
    const NAME: &'static str = "CClientMsg_ClientUIEvent";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.event = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                16 => {
                    self.ent_ehandle = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.client_ehandle = ::std::option::Option::Some(is.read_uint32()?);
                },
                34 => {
                    self.data1 = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    self.data2 = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.event {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.ent_ehandle {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.client_ehandle {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.data1.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.data2.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.event {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.ent_ehandle {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.client_ehandle {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.data1.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.data2.as_ref() {
            os.write_string(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CClientMsg_ClientUIEvent {
        CClientMsg_ClientUIEvent::new()
    }

    fn clear(&mut self) {
        self.event = ::std::option::Option::None;
        self.ent_ehandle = ::std::option::Option::None;
        self.client_ehandle = ::std::option::Option::None;
        self.data1 = ::std::option::Option::None;
        self.data2 = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CClientMsg_ClientUIEvent {
        static instance: CClientMsg_ClientUIEvent = CClientMsg_ClientUIEvent {
            event: ::std::option::Option::None,
            ent_ehandle: ::std::option::Option::None,
            client_ehandle: ::std::option::Option::None,
            data1: ::std::option::Option::None,
            data2: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CClientMsg_ClientUIEvent {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CClientMsg_ClientUIEvent").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CClientMsg_ClientUIEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CClientMsg_ClientUIEvent {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CClientMsg_DevPaletteVisibilityChangedEvent)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CClientMsg_DevPaletteVisibilityChangedEvent {
    // message fields
    // @@protoc_insertion_point(field:CClientMsg_DevPaletteVisibilityChangedEvent.visible)
    pub visible: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CClientMsg_DevPaletteVisibilityChangedEvent.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CClientMsg_DevPaletteVisibilityChangedEvent {
    fn default() -> &'a CClientMsg_DevPaletteVisibilityChangedEvent {
        <CClientMsg_DevPaletteVisibilityChangedEvent as ::protobuf::Message>::default_instance()
    }
}

impl CClientMsg_DevPaletteVisibilityChangedEvent {
    pub fn new() -> CClientMsg_DevPaletteVisibilityChangedEvent {
        ::std::default::Default::default()
    }

    // optional bool visible = 1;

    pub fn visible(&self) -> bool {
        self.visible.unwrap_or(false)
    }

    pub fn clear_visible(&mut self) {
        self.visible = ::std::option::Option::None;
    }

    pub fn has_visible(&self) -> bool {
        self.visible.is_some()
    }

    // Param is passed by value, moved
    pub fn set_visible(&mut self, v: bool) {
        self.visible = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "visible",
            |m: &CClientMsg_DevPaletteVisibilityChangedEvent| { &m.visible },
            |m: &mut CClientMsg_DevPaletteVisibilityChangedEvent| { &mut m.visible },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CClientMsg_DevPaletteVisibilityChangedEvent>(
            "CClientMsg_DevPaletteVisibilityChangedEvent",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CClientMsg_DevPaletteVisibilityChangedEvent {
    const NAME: &'static str = "CClientMsg_DevPaletteVisibilityChangedEvent";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.visible = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.visible {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.visible {
            os.write_bool(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CClientMsg_DevPaletteVisibilityChangedEvent {
        CClientMsg_DevPaletteVisibilityChangedEvent::new()
    }

    fn clear(&mut self) {
        self.visible = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CClientMsg_DevPaletteVisibilityChangedEvent {
        static instance: CClientMsg_DevPaletteVisibilityChangedEvent = CClientMsg_DevPaletteVisibilityChangedEvent {
            visible: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CClientMsg_DevPaletteVisibilityChangedEvent {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CClientMsg_DevPaletteVisibilityChangedEvent").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CClientMsg_DevPaletteVisibilityChangedEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CClientMsg_DevPaletteVisibilityChangedEvent {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CClientMsg_WorldUIControllerHasPanelChangedEvent)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CClientMsg_WorldUIControllerHasPanelChangedEvent {
    // message fields
    // @@protoc_insertion_point(field:CClientMsg_WorldUIControllerHasPanelChangedEvent.has_panel)
    pub has_panel: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CClientMsg_WorldUIControllerHasPanelChangedEvent.client_ehandle)
    pub client_ehandle: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CClientMsg_WorldUIControllerHasPanelChangedEvent.literal_hand_type)
    pub literal_hand_type: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CClientMsg_WorldUIControllerHasPanelChangedEvent.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CClientMsg_WorldUIControllerHasPanelChangedEvent {
    fn default() -> &'a CClientMsg_WorldUIControllerHasPanelChangedEvent {
        <CClientMsg_WorldUIControllerHasPanelChangedEvent as ::protobuf::Message>::default_instance()
    }
}

impl CClientMsg_WorldUIControllerHasPanelChangedEvent {
    pub fn new() -> CClientMsg_WorldUIControllerHasPanelChangedEvent {
        ::std::default::Default::default()
    }

    // optional bool has_panel = 1;

    pub fn has_panel(&self) -> bool {
        self.has_panel.unwrap_or(false)
    }

    pub fn clear_has_panel(&mut self) {
        self.has_panel = ::std::option::Option::None;
    }

    pub fn has_has_panel(&self) -> bool {
        self.has_panel.is_some()
    }

    // Param is passed by value, moved
    pub fn set_has_panel(&mut self, v: bool) {
        self.has_panel = ::std::option::Option::Some(v);
    }

    // optional uint32 client_ehandle = 2;

    pub fn client_ehandle(&self) -> u32 {
        self.client_ehandle.unwrap_or(0)
    }

    pub fn clear_client_ehandle(&mut self) {
        self.client_ehandle = ::std::option::Option::None;
    }

    pub fn has_client_ehandle(&self) -> bool {
        self.client_ehandle.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_ehandle(&mut self, v: u32) {
        self.client_ehandle = ::std::option::Option::Some(v);
    }

    // optional uint32 literal_hand_type = 3;

    pub fn literal_hand_type(&self) -> u32 {
        self.literal_hand_type.unwrap_or(0)
    }

    pub fn clear_literal_hand_type(&mut self) {
        self.literal_hand_type = ::std::option::Option::None;
    }

    pub fn has_literal_hand_type(&self) -> bool {
        self.literal_hand_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_literal_hand_type(&mut self, v: u32) {
        self.literal_hand_type = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "has_panel",
            |m: &CClientMsg_WorldUIControllerHasPanelChangedEvent| { &m.has_panel },
            |m: &mut CClientMsg_WorldUIControllerHasPanelChangedEvent| { &mut m.has_panel },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "client_ehandle",
            |m: &CClientMsg_WorldUIControllerHasPanelChangedEvent| { &m.client_ehandle },
            |m: &mut CClientMsg_WorldUIControllerHasPanelChangedEvent| { &mut m.client_ehandle },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "literal_hand_type",
            |m: &CClientMsg_WorldUIControllerHasPanelChangedEvent| { &m.literal_hand_type },
            |m: &mut CClientMsg_WorldUIControllerHasPanelChangedEvent| { &mut m.literal_hand_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CClientMsg_WorldUIControllerHasPanelChangedEvent>(
            "CClientMsg_WorldUIControllerHasPanelChangedEvent",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CClientMsg_WorldUIControllerHasPanelChangedEvent {
    const NAME: &'static str = "CClientMsg_WorldUIControllerHasPanelChangedEvent";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.has_panel = ::std::option::Option::Some(is.read_bool()?);
                },
                16 => {
                    self.client_ehandle = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.literal_hand_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.has_panel {
            my_size += 1 + 1;
        }
        if let Some(v) = self.client_ehandle {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.literal_hand_type {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.has_panel {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.client_ehandle {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.literal_hand_type {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CClientMsg_WorldUIControllerHasPanelChangedEvent {
        CClientMsg_WorldUIControllerHasPanelChangedEvent::new()
    }

    fn clear(&mut self) {
        self.has_panel = ::std::option::Option::None;
        self.client_ehandle = ::std::option::Option::None;
        self.literal_hand_type = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CClientMsg_WorldUIControllerHasPanelChangedEvent {
        static instance: CClientMsg_WorldUIControllerHasPanelChangedEvent = CClientMsg_WorldUIControllerHasPanelChangedEvent {
            has_panel: ::std::option::Option::None,
            client_ehandle: ::std::option::Option::None,
            literal_hand_type: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CClientMsg_WorldUIControllerHasPanelChangedEvent {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CClientMsg_WorldUIControllerHasPanelChangedEvent").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CClientMsg_WorldUIControllerHasPanelChangedEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CClientMsg_WorldUIControllerHasPanelChangedEvent {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CClientMsg_RotateAnchor)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CClientMsg_RotateAnchor {
    // message fields
    // @@protoc_insertion_point(field:CClientMsg_RotateAnchor.angle)
    pub angle: ::std::option::Option<f32>,
    // special fields
    // @@protoc_insertion_point(special_field:CClientMsg_RotateAnchor.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CClientMsg_RotateAnchor {
    fn default() -> &'a CClientMsg_RotateAnchor {
        <CClientMsg_RotateAnchor as ::protobuf::Message>::default_instance()
    }
}

impl CClientMsg_RotateAnchor {
    pub fn new() -> CClientMsg_RotateAnchor {
        ::std::default::Default::default()
    }

    // optional float angle = 1;

    pub fn angle(&self) -> f32 {
        self.angle.unwrap_or(0.)
    }

    pub fn clear_angle(&mut self) {
        self.angle = ::std::option::Option::None;
    }

    pub fn has_angle(&self) -> bool {
        self.angle.is_some()
    }

    // Param is passed by value, moved
    pub fn set_angle(&mut self, v: f32) {
        self.angle = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "angle",
            |m: &CClientMsg_RotateAnchor| { &m.angle },
            |m: &mut CClientMsg_RotateAnchor| { &mut m.angle },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CClientMsg_RotateAnchor>(
            "CClientMsg_RotateAnchor",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CClientMsg_RotateAnchor {
    const NAME: &'static str = "CClientMsg_RotateAnchor";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.angle = ::std::option::Option::Some(is.read_float()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.angle {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.angle {
            os.write_float(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CClientMsg_RotateAnchor {
        CClientMsg_RotateAnchor::new()
    }

    fn clear(&mut self) {
        self.angle = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CClientMsg_RotateAnchor {
        static instance: CClientMsg_RotateAnchor = CClientMsg_RotateAnchor {
            angle: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CClientMsg_RotateAnchor {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CClientMsg_RotateAnchor").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CClientMsg_RotateAnchor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CClientMsg_RotateAnchor {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EBaseClientMessages)
pub enum EBaseClientMessages {
    // @@protoc_insertion_point(enum_value:EBaseClientMessages.CM_CustomGameEvent)
    CM_CustomGameEvent = 280,
    // @@protoc_insertion_point(enum_value:EBaseClientMessages.CM_CustomGameEventBounce)
    CM_CustomGameEventBounce = 281,
    // @@protoc_insertion_point(enum_value:EBaseClientMessages.CM_ClientUIEvent)
    CM_ClientUIEvent = 282,
    // @@protoc_insertion_point(enum_value:EBaseClientMessages.CM_DevPaletteVisibilityChanged)
    CM_DevPaletteVisibilityChanged = 283,
    // @@protoc_insertion_point(enum_value:EBaseClientMessages.CM_WorldUIControllerHasPanelChanged)
    CM_WorldUIControllerHasPanelChanged = 284,
    // @@protoc_insertion_point(enum_value:EBaseClientMessages.CM_RotateAnchor)
    CM_RotateAnchor = 285,
    // @@protoc_insertion_point(enum_value:EBaseClientMessages.CM_MAX_BASE)
    CM_MAX_BASE = 300,
}

impl ::protobuf::Enum for EBaseClientMessages {
    const NAME: &'static str = "EBaseClientMessages";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EBaseClientMessages> {
        match value {
            280 => ::std::option::Option::Some(EBaseClientMessages::CM_CustomGameEvent),
            281 => ::std::option::Option::Some(EBaseClientMessages::CM_CustomGameEventBounce),
            282 => ::std::option::Option::Some(EBaseClientMessages::CM_ClientUIEvent),
            283 => ::std::option::Option::Some(EBaseClientMessages::CM_DevPaletteVisibilityChanged),
            284 => ::std::option::Option::Some(EBaseClientMessages::CM_WorldUIControllerHasPanelChanged),
            285 => ::std::option::Option::Some(EBaseClientMessages::CM_RotateAnchor),
            300 => ::std::option::Option::Some(EBaseClientMessages::CM_MAX_BASE),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EBaseClientMessages> {
        match str {
            "CM_CustomGameEvent" => ::std::option::Option::Some(EBaseClientMessages::CM_CustomGameEvent),
            "CM_CustomGameEventBounce" => ::std::option::Option::Some(EBaseClientMessages::CM_CustomGameEventBounce),
            "CM_ClientUIEvent" => ::std::option::Option::Some(EBaseClientMessages::CM_ClientUIEvent),
            "CM_DevPaletteVisibilityChanged" => ::std::option::Option::Some(EBaseClientMessages::CM_DevPaletteVisibilityChanged),
            "CM_WorldUIControllerHasPanelChanged" => ::std::option::Option::Some(EBaseClientMessages::CM_WorldUIControllerHasPanelChanged),
            "CM_RotateAnchor" => ::std::option::Option::Some(EBaseClientMessages::CM_RotateAnchor),
            "CM_MAX_BASE" => ::std::option::Option::Some(EBaseClientMessages::CM_MAX_BASE),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EBaseClientMessages] = &[
        EBaseClientMessages::CM_CustomGameEvent,
        EBaseClientMessages::CM_CustomGameEventBounce,
        EBaseClientMessages::CM_ClientUIEvent,
        EBaseClientMessages::CM_DevPaletteVisibilityChanged,
        EBaseClientMessages::CM_WorldUIControllerHasPanelChanged,
        EBaseClientMessages::CM_RotateAnchor,
        EBaseClientMessages::CM_MAX_BASE,
    ];
}

impl ::protobuf::EnumFull for EBaseClientMessages {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EBaseClientMessages").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            EBaseClientMessages::CM_CustomGameEvent => 0,
            EBaseClientMessages::CM_CustomGameEventBounce => 1,
            EBaseClientMessages::CM_ClientUIEvent => 2,
            EBaseClientMessages::CM_DevPaletteVisibilityChanged => 3,
            EBaseClientMessages::CM_WorldUIControllerHasPanelChanged => 4,
            EBaseClientMessages::CM_RotateAnchor => 5,
            EBaseClientMessages::CM_MAX_BASE => 6,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for EBaseClientMessages {
    fn default() -> Self {
        EBaseClientMessages::CM_CustomGameEvent
    }
}

impl EBaseClientMessages {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EBaseClientMessages>("EBaseClientMessages")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EClientUIEvent)
pub enum EClientUIEvent {
    // @@protoc_insertion_point(enum_value:EClientUIEvent.EClientUIEvent_Invalid)
    EClientUIEvent_Invalid = 0,
    // @@protoc_insertion_point(enum_value:EClientUIEvent.EClientUIEvent_DialogFinished)
    EClientUIEvent_DialogFinished = 1,
    // @@protoc_insertion_point(enum_value:EClientUIEvent.EClientUIEvent_FireOutput)
    EClientUIEvent_FireOutput = 2,
}

impl ::protobuf::Enum for EClientUIEvent {
    const NAME: &'static str = "EClientUIEvent";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EClientUIEvent> {
        match value {
            0 => ::std::option::Option::Some(EClientUIEvent::EClientUIEvent_Invalid),
            1 => ::std::option::Option::Some(EClientUIEvent::EClientUIEvent_DialogFinished),
            2 => ::std::option::Option::Some(EClientUIEvent::EClientUIEvent_FireOutput),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EClientUIEvent> {
        match str {
            "EClientUIEvent_Invalid" => ::std::option::Option::Some(EClientUIEvent::EClientUIEvent_Invalid),
            "EClientUIEvent_DialogFinished" => ::std::option::Option::Some(EClientUIEvent::EClientUIEvent_DialogFinished),
            "EClientUIEvent_FireOutput" => ::std::option::Option::Some(EClientUIEvent::EClientUIEvent_FireOutput),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EClientUIEvent] = &[
        EClientUIEvent::EClientUIEvent_Invalid,
        EClientUIEvent::EClientUIEvent_DialogFinished,
        EClientUIEvent::EClientUIEvent_FireOutput,
    ];
}

impl ::protobuf::EnumFull for EClientUIEvent {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EClientUIEvent").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EClientUIEvent {
    fn default() -> Self {
        EClientUIEvent::EClientUIEvent_Invalid
    }
}

impl EClientUIEvent {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EClientUIEvent>("EClientUIEvent")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14clientmessages.proto\"O\n\x1aCClientMsg_CustomGameEvent\x12\x1d\n\
    \nevent_name\x18\x01\x20\x01(\tR\teventName\x12\x12\n\x04data\x18\x02\
    \x20\x01(\x0cR\x04data\"z\n\x20CClientMsg_CustomGameEventBounce\x12\x1d\
    \n\nevent_name\x18\x01\x20\x01(\tR\teventName\x12\x12\n\x04data\x18\x02\
    \x20\x01(\x0cR\x04data\x12#\n\x0bplayer_slot\x18\x03\x20\x01(\x05:\x02-1\
    R\nplayerSlot\"\xcd\x01\n\x18CClientMsg_ClientUIEvent\x12=\n\x05event\
    \x18\x01\x20\x01(\x0e2\x0f.EClientUIEvent:\x16EClientUIEvent_InvalidR\
    \x05event\x12\x1f\n\x0bent_ehandle\x18\x02\x20\x01(\rR\nentEhandle\x12%\
    \n\x0eclient_ehandle\x18\x03\x20\x01(\rR\rclientEhandle\x12\x14\n\x05dat\
    a1\x18\x04\x20\x01(\tR\x05data1\x12\x14\n\x05data2\x18\x05\x20\x01(\tR\
    \x05data2\"G\n+CClientMsg_DevPaletteVisibilityChangedEvent\x12\x18\n\x07\
    visible\x18\x01\x20\x01(\x08R\x07visible\"\xa2\x01\n0CClientMsg_WorldUIC\
    ontrollerHasPanelChangedEvent\x12\x1b\n\thas_panel\x18\x01\x20\x01(\x08R\
    \x08hasPanel\x12%\n\x0eclient_ehandle\x18\x02\x20\x01(\rR\rclientEhandle\
    \x12*\n\x11literal_hand_type\x18\x03\x20\x01(\rR\x0fliteralHandType\"/\n\
    \x17CClientMsg_RotateAnchor\x12\x14\n\x05angle\x18\x01\x20\x01(\x02R\x05\
    angle*\xdb\x01\n\x13EBaseClientMessages\x12\x17\n\x12CM_CustomGameEvent\
    \x10\x98\x02\x12\x1d\n\x18CM_CustomGameEventBounce\x10\x99\x02\x12\x15\n\
    \x10CM_ClientUIEvent\x10\x9a\x02\x12#\n\x1eCM_DevPaletteVisibilityChange\
    d\x10\x9b\x02\x12(\n#CM_WorldUIControllerHasPanelChanged\x10\x9c\x02\x12\
    \x14\n\x0fCM_RotateAnchor\x10\x9d\x02\x12\x10\n\x0bCM_MAX_BASE\x10\xac\
    \x02*n\n\x0eEClientUIEvent\x12\x1a\n\x16EClientUIEvent_Invalid\x10\0\x12\
    !\n\x1dEClientUIEvent_DialogFinished\x10\x01\x12\x1d\n\x19EClientUIEvent\
    _FireOutput\x10\x02\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(CClientMsg_CustomGameEvent::generated_message_descriptor_data());
            messages.push(CClientMsg_CustomGameEventBounce::generated_message_descriptor_data());
            messages.push(CClientMsg_ClientUIEvent::generated_message_descriptor_data());
            messages.push(CClientMsg_DevPaletteVisibilityChangedEvent::generated_message_descriptor_data());
            messages.push(CClientMsg_WorldUIControllerHasPanelChangedEvent::generated_message_descriptor_data());
            messages.push(CClientMsg_RotateAnchor::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(EBaseClientMessages::generated_enum_descriptor_data());
            enums.push(EClientUIEvent::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
