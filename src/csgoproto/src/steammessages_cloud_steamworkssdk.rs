// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_cloud.steamworkssdk.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:CCloud_GetUploadServerInfo_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCloud_GetUploadServerInfo_Request {
    // message fields
    // @@protoc_insertion_point(field:CCloud_GetUploadServerInfo_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CCloud_GetUploadServerInfo_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCloud_GetUploadServerInfo_Request {
    fn default() -> &'a CCloud_GetUploadServerInfo_Request {
        <CCloud_GetUploadServerInfo_Request as ::protobuf::Message>::default_instance()
    }
}

impl CCloud_GetUploadServerInfo_Request {
    pub fn new() -> CCloud_GetUploadServerInfo_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CCloud_GetUploadServerInfo_Request| { &m.appid },
            |m: &mut CCloud_GetUploadServerInfo_Request| { &mut m.appid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CCloud_GetUploadServerInfo_Request>(
            "CCloud_GetUploadServerInfo_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CCloud_GetUploadServerInfo_Request {
    const NAME: &'static str = "CCloud_GetUploadServerInfo_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCloud_GetUploadServerInfo_Request {
        CCloud_GetUploadServerInfo_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCloud_GetUploadServerInfo_Request {
        static instance: CCloud_GetUploadServerInfo_Request = CCloud_GetUploadServerInfo_Request {
            appid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CCloud_GetUploadServerInfo_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCloud_GetUploadServerInfo_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCloud_GetUploadServerInfo_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCloud_GetUploadServerInfo_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCloud_GetUploadServerInfo_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCloud_GetUploadServerInfo_Response {
    // message fields
    // @@protoc_insertion_point(field:CCloud_GetUploadServerInfo_Response.server_url)
    pub server_url: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CCloud_GetUploadServerInfo_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCloud_GetUploadServerInfo_Response {
    fn default() -> &'a CCloud_GetUploadServerInfo_Response {
        <CCloud_GetUploadServerInfo_Response as ::protobuf::Message>::default_instance()
    }
}

impl CCloud_GetUploadServerInfo_Response {
    pub fn new() -> CCloud_GetUploadServerInfo_Response {
        ::std::default::Default::default()
    }

    // optional string server_url = 1;

    pub fn server_url(&self) -> &str {
        match self.server_url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_server_url(&mut self) {
        self.server_url = ::std::option::Option::None;
    }

    pub fn has_server_url(&self) -> bool {
        self.server_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_url(&mut self, v: ::std::string::String) {
        self.server_url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_server_url(&mut self) -> &mut ::std::string::String {
        if self.server_url.is_none() {
            self.server_url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.server_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_server_url(&mut self) -> ::std::string::String {
        self.server_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "server_url",
            |m: &CCloud_GetUploadServerInfo_Response| { &m.server_url },
            |m: &mut CCloud_GetUploadServerInfo_Response| { &mut m.server_url },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CCloud_GetUploadServerInfo_Response>(
            "CCloud_GetUploadServerInfo_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CCloud_GetUploadServerInfo_Response {
    const NAME: &'static str = "CCloud_GetUploadServerInfo_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.server_url = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.server_url.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.server_url.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCloud_GetUploadServerInfo_Response {
        CCloud_GetUploadServerInfo_Response::new()
    }

    fn clear(&mut self) {
        self.server_url = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCloud_GetUploadServerInfo_Response {
        static instance: CCloud_GetUploadServerInfo_Response = CCloud_GetUploadServerInfo_Response {
            server_url: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CCloud_GetUploadServerInfo_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCloud_GetUploadServerInfo_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCloud_GetUploadServerInfo_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCloud_GetUploadServerInfo_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCloud_GetFileDetails_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCloud_GetFileDetails_Request {
    // message fields
    // @@protoc_insertion_point(field:CCloud_GetFileDetails_Request.ugcid)
    pub ugcid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CCloud_GetFileDetails_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CCloud_GetFileDetails_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCloud_GetFileDetails_Request {
    fn default() -> &'a CCloud_GetFileDetails_Request {
        <CCloud_GetFileDetails_Request as ::protobuf::Message>::default_instance()
    }
}

impl CCloud_GetFileDetails_Request {
    pub fn new() -> CCloud_GetFileDetails_Request {
        ::std::default::Default::default()
    }

    // optional uint64 ugcid = 1;

    pub fn ugcid(&self) -> u64 {
        self.ugcid.unwrap_or(0)
    }

    pub fn clear_ugcid(&mut self) {
        self.ugcid = ::std::option::Option::None;
    }

    pub fn has_ugcid(&self) -> bool {
        self.ugcid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ugcid(&mut self, v: u64) {
        self.ugcid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ugcid",
            |m: &CCloud_GetFileDetails_Request| { &m.ugcid },
            |m: &mut CCloud_GetFileDetails_Request| { &mut m.ugcid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CCloud_GetFileDetails_Request| { &m.appid },
            |m: &mut CCloud_GetFileDetails_Request| { &mut m.appid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CCloud_GetFileDetails_Request>(
            "CCloud_GetFileDetails_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CCloud_GetFileDetails_Request {
    const NAME: &'static str = "CCloud_GetFileDetails_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ugcid = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ugcid {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.ugcid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCloud_GetFileDetails_Request {
        CCloud_GetFileDetails_Request::new()
    }

    fn clear(&mut self) {
        self.ugcid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCloud_GetFileDetails_Request {
        static instance: CCloud_GetFileDetails_Request = CCloud_GetFileDetails_Request {
            ugcid: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CCloud_GetFileDetails_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCloud_GetFileDetails_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCloud_GetFileDetails_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCloud_GetFileDetails_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCloud_UserFile)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCloud_UserFile {
    // message fields
    // @@protoc_insertion_point(field:CCloud_UserFile.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CCloud_UserFile.ugcid)
    pub ugcid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CCloud_UserFile.filename)
    pub filename: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CCloud_UserFile.timestamp)
    pub timestamp: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CCloud_UserFile.file_size)
    pub file_size: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CCloud_UserFile.url)
    pub url: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CCloud_UserFile.steamid_creator)
    pub steamid_creator: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CCloud_UserFile.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCloud_UserFile {
    fn default() -> &'a CCloud_UserFile {
        <CCloud_UserFile as ::protobuf::Message>::default_instance()
    }
}

impl CCloud_UserFile {
    pub fn new() -> CCloud_UserFile {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 ugcid = 2;

    pub fn ugcid(&self) -> u64 {
        self.ugcid.unwrap_or(0)
    }

    pub fn clear_ugcid(&mut self) {
        self.ugcid = ::std::option::Option::None;
    }

    pub fn has_ugcid(&self) -> bool {
        self.ugcid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ugcid(&mut self, v: u64) {
        self.ugcid = ::std::option::Option::Some(v);
    }

    // optional string filename = 3;

    pub fn filename(&self) -> &str {
        match self.filename.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_filename(&mut self) {
        self.filename = ::std::option::Option::None;
    }

    pub fn has_filename(&self) -> bool {
        self.filename.is_some()
    }

    // Param is passed by value, moved
    pub fn set_filename(&mut self, v: ::std::string::String) {
        self.filename = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filename(&mut self) -> &mut ::std::string::String {
        if self.filename.is_none() {
            self.filename = ::std::option::Option::Some(::std::string::String::new());
        }
        self.filename.as_mut().unwrap()
    }

    // Take field
    pub fn take_filename(&mut self) -> ::std::string::String {
        self.filename.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 timestamp = 4;

    pub fn timestamp(&self) -> u64 {
        self.timestamp.unwrap_or(0)
    }

    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = ::std::option::Option::Some(v);
    }

    // optional uint32 file_size = 5;

    pub fn file_size(&self) -> u32 {
        self.file_size.unwrap_or(0)
    }

    pub fn clear_file_size(&mut self) {
        self.file_size = ::std::option::Option::None;
    }

    pub fn has_file_size(&self) -> bool {
        self.file_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_size(&mut self, v: u32) {
        self.file_size = ::std::option::Option::Some(v);
    }

    // optional string url = 6;

    pub fn url(&self) -> &str {
        match self.url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_url(&mut self) {
        self.url = ::std::option::Option::None;
    }

    pub fn has_url(&self) -> bool {
        self.url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_url(&mut self, v: ::std::string::String) {
        self.url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_url(&mut self) -> &mut ::std::string::String {
        if self.url.is_none() {
            self.url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.url.as_mut().unwrap()
    }

    // Take field
    pub fn take_url(&mut self) -> ::std::string::String {
        self.url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional fixed64 steamid_creator = 7;

    pub fn steamid_creator(&self) -> u64 {
        self.steamid_creator.unwrap_or(0)
    }

    pub fn clear_steamid_creator(&mut self) {
        self.steamid_creator = ::std::option::Option::None;
    }

    pub fn has_steamid_creator(&self) -> bool {
        self.steamid_creator.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid_creator(&mut self, v: u64) {
        self.steamid_creator = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CCloud_UserFile| { &m.appid },
            |m: &mut CCloud_UserFile| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ugcid",
            |m: &CCloud_UserFile| { &m.ugcid },
            |m: &mut CCloud_UserFile| { &mut m.ugcid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "filename",
            |m: &CCloud_UserFile| { &m.filename },
            |m: &mut CCloud_UserFile| { &mut m.filename },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "timestamp",
            |m: &CCloud_UserFile| { &m.timestamp },
            |m: &mut CCloud_UserFile| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "file_size",
            |m: &CCloud_UserFile| { &m.file_size },
            |m: &mut CCloud_UserFile| { &mut m.file_size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "url",
            |m: &CCloud_UserFile| { &m.url },
            |m: &mut CCloud_UserFile| { &mut m.url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid_creator",
            |m: &CCloud_UserFile| { &m.steamid_creator },
            |m: &mut CCloud_UserFile| { &mut m.steamid_creator },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CCloud_UserFile>(
            "CCloud_UserFile",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CCloud_UserFile {
    const NAME: &'static str = "CCloud_UserFile";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.ugcid = ::std::option::Option::Some(is.read_uint64()?);
                },
                26 => {
                    self.filename = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.timestamp = ::std::option::Option::Some(is.read_uint64()?);
                },
                40 => {
                    self.file_size = ::std::option::Option::Some(is.read_uint32()?);
                },
                50 => {
                    self.url = ::std::option::Option::Some(is.read_string()?);
                },
                57 => {
                    self.steamid_creator = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.ugcid {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.filename.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.timestamp {
            my_size += ::protobuf::rt::uint64_size(4, v);
        }
        if let Some(v) = self.file_size {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.url.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(v) = self.steamid_creator {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.ugcid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.filename.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.timestamp {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.file_size {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.url.as_ref() {
            os.write_string(6, v)?;
        }
        if let Some(v) = self.steamid_creator {
            os.write_fixed64(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCloud_UserFile {
        CCloud_UserFile::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.ugcid = ::std::option::Option::None;
        self.filename = ::std::option::Option::None;
        self.timestamp = ::std::option::Option::None;
        self.file_size = ::std::option::Option::None;
        self.url = ::std::option::Option::None;
        self.steamid_creator = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCloud_UserFile {
        static instance: CCloud_UserFile = CCloud_UserFile {
            appid: ::std::option::Option::None,
            ugcid: ::std::option::Option::None,
            filename: ::std::option::Option::None,
            timestamp: ::std::option::Option::None,
            file_size: ::std::option::Option::None,
            url: ::std::option::Option::None,
            steamid_creator: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CCloud_UserFile {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCloud_UserFile").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCloud_UserFile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCloud_UserFile {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCloud_GetFileDetails_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCloud_GetFileDetails_Response {
    // message fields
    // @@protoc_insertion_point(field:CCloud_GetFileDetails_Response.details)
    pub details: ::protobuf::MessageField<CCloud_UserFile>,
    // special fields
    // @@protoc_insertion_point(special_field:CCloud_GetFileDetails_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCloud_GetFileDetails_Response {
    fn default() -> &'a CCloud_GetFileDetails_Response {
        <CCloud_GetFileDetails_Response as ::protobuf::Message>::default_instance()
    }
}

impl CCloud_GetFileDetails_Response {
    pub fn new() -> CCloud_GetFileDetails_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CCloud_UserFile>(
            "details",
            |m: &CCloud_GetFileDetails_Response| { &m.details },
            |m: &mut CCloud_GetFileDetails_Response| { &mut m.details },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CCloud_GetFileDetails_Response>(
            "CCloud_GetFileDetails_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CCloud_GetFileDetails_Response {
    const NAME: &'static str = "CCloud_GetFileDetails_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.details)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.details.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.details.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCloud_GetFileDetails_Response {
        CCloud_GetFileDetails_Response::new()
    }

    fn clear(&mut self) {
        self.details.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCloud_GetFileDetails_Response {
        static instance: CCloud_GetFileDetails_Response = CCloud_GetFileDetails_Response {
            details: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CCloud_GetFileDetails_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCloud_GetFileDetails_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCloud_GetFileDetails_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCloud_GetFileDetails_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCloud_EnumerateUserFiles_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCloud_EnumerateUserFiles_Request {
    // message fields
    // @@protoc_insertion_point(field:CCloud_EnumerateUserFiles_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CCloud_EnumerateUserFiles_Request.extended_details)
    pub extended_details: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CCloud_EnumerateUserFiles_Request.count)
    pub count: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CCloud_EnumerateUserFiles_Request.start_index)
    pub start_index: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CCloud_EnumerateUserFiles_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCloud_EnumerateUserFiles_Request {
    fn default() -> &'a CCloud_EnumerateUserFiles_Request {
        <CCloud_EnumerateUserFiles_Request as ::protobuf::Message>::default_instance()
    }
}

impl CCloud_EnumerateUserFiles_Request {
    pub fn new() -> CCloud_EnumerateUserFiles_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional bool extended_details = 2;

    pub fn extended_details(&self) -> bool {
        self.extended_details.unwrap_or(false)
    }

    pub fn clear_extended_details(&mut self) {
        self.extended_details = ::std::option::Option::None;
    }

    pub fn has_extended_details(&self) -> bool {
        self.extended_details.is_some()
    }

    // Param is passed by value, moved
    pub fn set_extended_details(&mut self, v: bool) {
        self.extended_details = ::std::option::Option::Some(v);
    }

    // optional uint32 count = 3;

    pub fn count(&self) -> u32 {
        self.count.unwrap_or(0)
    }

    pub fn clear_count(&mut self) {
        self.count = ::std::option::Option::None;
    }

    pub fn has_count(&self) -> bool {
        self.count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: u32) {
        self.count = ::std::option::Option::Some(v);
    }

    // optional uint32 start_index = 4;

    pub fn start_index(&self) -> u32 {
        self.start_index.unwrap_or(0)
    }

    pub fn clear_start_index(&mut self) {
        self.start_index = ::std::option::Option::None;
    }

    pub fn has_start_index(&self) -> bool {
        self.start_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_index(&mut self, v: u32) {
        self.start_index = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CCloud_EnumerateUserFiles_Request| { &m.appid },
            |m: &mut CCloud_EnumerateUserFiles_Request| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "extended_details",
            |m: &CCloud_EnumerateUserFiles_Request| { &m.extended_details },
            |m: &mut CCloud_EnumerateUserFiles_Request| { &mut m.extended_details },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "count",
            |m: &CCloud_EnumerateUserFiles_Request| { &m.count },
            |m: &mut CCloud_EnumerateUserFiles_Request| { &mut m.count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "start_index",
            |m: &CCloud_EnumerateUserFiles_Request| { &m.start_index },
            |m: &mut CCloud_EnumerateUserFiles_Request| { &mut m.start_index },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CCloud_EnumerateUserFiles_Request>(
            "CCloud_EnumerateUserFiles_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CCloud_EnumerateUserFiles_Request {
    const NAME: &'static str = "CCloud_EnumerateUserFiles_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.extended_details = ::std::option::Option::Some(is.read_bool()?);
                },
                24 => {
                    self.count = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.start_index = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.extended_details {
            my_size += 1 + 1;
        }
        if let Some(v) = self.count {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.start_index {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.extended_details {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.count {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.start_index {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCloud_EnumerateUserFiles_Request {
        CCloud_EnumerateUserFiles_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.extended_details = ::std::option::Option::None;
        self.count = ::std::option::Option::None;
        self.start_index = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCloud_EnumerateUserFiles_Request {
        static instance: CCloud_EnumerateUserFiles_Request = CCloud_EnumerateUserFiles_Request {
            appid: ::std::option::Option::None,
            extended_details: ::std::option::Option::None,
            count: ::std::option::Option::None,
            start_index: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CCloud_EnumerateUserFiles_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCloud_EnumerateUserFiles_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCloud_EnumerateUserFiles_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCloud_EnumerateUserFiles_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCloud_EnumerateUserFiles_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCloud_EnumerateUserFiles_Response {
    // message fields
    // @@protoc_insertion_point(field:CCloud_EnumerateUserFiles_Response.files)
    pub files: ::std::vec::Vec<CCloud_UserFile>,
    // @@protoc_insertion_point(field:CCloud_EnumerateUserFiles_Response.total_files)
    pub total_files: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CCloud_EnumerateUserFiles_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCloud_EnumerateUserFiles_Response {
    fn default() -> &'a CCloud_EnumerateUserFiles_Response {
        <CCloud_EnumerateUserFiles_Response as ::protobuf::Message>::default_instance()
    }
}

impl CCloud_EnumerateUserFiles_Response {
    pub fn new() -> CCloud_EnumerateUserFiles_Response {
        ::std::default::Default::default()
    }

    // optional uint32 total_files = 2;

    pub fn total_files(&self) -> u32 {
        self.total_files.unwrap_or(0)
    }

    pub fn clear_total_files(&mut self) {
        self.total_files = ::std::option::Option::None;
    }

    pub fn has_total_files(&self) -> bool {
        self.total_files.is_some()
    }

    // Param is passed by value, moved
    pub fn set_total_files(&mut self, v: u32) {
        self.total_files = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "files",
            |m: &CCloud_EnumerateUserFiles_Response| { &m.files },
            |m: &mut CCloud_EnumerateUserFiles_Response| { &mut m.files },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "total_files",
            |m: &CCloud_EnumerateUserFiles_Response| { &m.total_files },
            |m: &mut CCloud_EnumerateUserFiles_Response| { &mut m.total_files },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CCloud_EnumerateUserFiles_Response>(
            "CCloud_EnumerateUserFiles_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CCloud_EnumerateUserFiles_Response {
    const NAME: &'static str = "CCloud_EnumerateUserFiles_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.files.push(is.read_message()?);
                },
                16 => {
                    self.total_files = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.files {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.total_files {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.files {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.total_files {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCloud_EnumerateUserFiles_Response {
        CCloud_EnumerateUserFiles_Response::new()
    }

    fn clear(&mut self) {
        self.files.clear();
        self.total_files = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCloud_EnumerateUserFiles_Response {
        static instance: CCloud_EnumerateUserFiles_Response = CCloud_EnumerateUserFiles_Response {
            files: ::std::vec::Vec::new(),
            total_files: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CCloud_EnumerateUserFiles_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCloud_EnumerateUserFiles_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCloud_EnumerateUserFiles_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCloud_EnumerateUserFiles_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCloud_Delete_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCloud_Delete_Request {
    // message fields
    // @@protoc_insertion_point(field:CCloud_Delete_Request.filename)
    pub filename: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CCloud_Delete_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CCloud_Delete_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCloud_Delete_Request {
    fn default() -> &'a CCloud_Delete_Request {
        <CCloud_Delete_Request as ::protobuf::Message>::default_instance()
    }
}

impl CCloud_Delete_Request {
    pub fn new() -> CCloud_Delete_Request {
        ::std::default::Default::default()
    }

    // optional string filename = 1;

    pub fn filename(&self) -> &str {
        match self.filename.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_filename(&mut self) {
        self.filename = ::std::option::Option::None;
    }

    pub fn has_filename(&self) -> bool {
        self.filename.is_some()
    }

    // Param is passed by value, moved
    pub fn set_filename(&mut self, v: ::std::string::String) {
        self.filename = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filename(&mut self) -> &mut ::std::string::String {
        if self.filename.is_none() {
            self.filename = ::std::option::Option::Some(::std::string::String::new());
        }
        self.filename.as_mut().unwrap()
    }

    // Take field
    pub fn take_filename(&mut self) -> ::std::string::String {
        self.filename.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 appid = 2;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "filename",
            |m: &CCloud_Delete_Request| { &m.filename },
            |m: &mut CCloud_Delete_Request| { &mut m.filename },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CCloud_Delete_Request| { &m.appid },
            |m: &mut CCloud_Delete_Request| { &mut m.appid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CCloud_Delete_Request>(
            "CCloud_Delete_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CCloud_Delete_Request {
    const NAME: &'static str = "CCloud_Delete_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.filename = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.filename.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.filename.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCloud_Delete_Request {
        CCloud_Delete_Request::new()
    }

    fn clear(&mut self) {
        self.filename = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCloud_Delete_Request {
        static instance: CCloud_Delete_Request = CCloud_Delete_Request {
            filename: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CCloud_Delete_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCloud_Delete_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCloud_Delete_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCloud_Delete_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CCloud_Delete_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CCloud_Delete_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CCloud_Delete_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CCloud_Delete_Response {
    fn default() -> &'a CCloud_Delete_Response {
        <CCloud_Delete_Response as ::protobuf::Message>::default_instance()
    }
}

impl CCloud_Delete_Response {
    pub fn new() -> CCloud_Delete_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CCloud_Delete_Response>(
            "CCloud_Delete_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CCloud_Delete_Response {
    const NAME: &'static str = "CCloud_Delete_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CCloud_Delete_Response {
        CCloud_Delete_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CCloud_Delete_Response {
        static instance: CCloud_Delete_Response = CCloud_Delete_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CCloud_Delete_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CCloud_Delete_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CCloud_Delete_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCloud_Delete_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'steammessages_cloud.steamworkssdk.proto\x1a.steammessages_unified_bas\
    e.steamworkssdk.proto\"k\n\"CCloud_GetUploadServerInfo_Request\x12E\n\
    \x05appid\x18\x01\x20\x01(\rR\x05appidB/\x82\xb5\x18+App\x20ID\x20to\x20\
    which\x20a\x20file\x20will\x20be\x20uploaded\x20to.\"D\n#CCloud_GetUploa\
    dServerInfo_Response\x12\x1d\n\nserver_url\x18\x01\x20\x01(\tR\tserverUr\
    l\"\x9a\x01\n\x1dCCloud_GetFileDetails_Request\x12B\n\x05ugcid\x18\x01\
    \x20\x01(\x04R\x05ugcidB,\x82\xb5\x18(ID\x20of\x20the\x20Cloud\x20file\
    \x20to\x20get\x20details\x20for.\x125\n\x05appid\x18\x02\x20\x01(\rR\x05\
    appidB\x1f\x82\xb5\x18\x1bApp\x20ID\x20the\x20file\x20belongs\x20to.\"\
    \xcf\x01\n\x0fCCloud_UserFile\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05\
    appid\x12\x14\n\x05ugcid\x18\x02\x20\x01(\x04R\x05ugcid\x12\x1a\n\x08fil\
    ename\x18\x03\x20\x01(\tR\x08filename\x12\x1c\n\ttimestamp\x18\x04\x20\
    \x01(\x04R\ttimestamp\x12\x1b\n\tfile_size\x18\x05\x20\x01(\rR\x08fileSi\
    ze\x12\x10\n\x03url\x18\x06\x20\x01(\tR\x03url\x12'\n\x0fsteamid_creator\
    \x18\x07\x20\x01(\x06R\x0esteamidCreator\"L\n\x1eCCloud_GetFileDetails_R\
    esponse\x12*\n\x07details\x18\x01\x20\x01(\x0b2\x10.CCloud_UserFileR\x07\
    details\"\x95\x04\n!CCloud_EnumerateUserFiles_Request\x12;\n\x05appid\
    \x18\x01\x20\x01(\rR\x05appidB%\x82\xb5\x18!App\x20ID\x20to\x20enumerate\
    \x20the\x20files\x20of.\x12\xac\x01\n\x10extended_details\x18\x02\x20\
    \x01(\x08R\x0fextendedDetailsB\x80\x01\x82\xb5\x18|(Optional)\x20Get\x20\
    extended\x20details\x20back\x20on\x20the\x20files\x20found.\x20Defaults\
    \x20to\x20only\x20returned\x20the\x20app\x20Id\x20and\x20UGC\x20Id\x20of\
    \x20the\x20files\x20found.\x12\x83\x01\n\x05count\x18\x03\x20\x01(\rR\
    \x05countBm\x82\xb5\x18i(Optional)\x20Maximum\x20number\x20of\x20results\
    \x20to\x20return\x20on\x20this\x20call.\x20Defaults\x20to\x20a\x20maximu\
    m\x20of\x20500\x20files\x20returned.\x12~\n\x0bstart_index\x18\x04\x20\
    \x01(\rR\nstartIndexB]\x82\xb5\x18Y(Optional)\x20Starting\x20index\x20to\
    \x20begin\x20enumeration\x20at.\x20Defaults\x20to\x20the\x20beginning\
    \x20of\x20the\x20list.\"m\n\"CCloud_EnumerateUserFiles_Response\x12&\n\
    \x05files\x18\x01\x20\x03(\x0b2\x10.CCloud_UserFileR\x05files\x12\x1f\n\
    \x0btotal_files\x18\x02\x20\x01(\rR\ntotalFiles\"j\n\x15CCloud_Delete_Re\
    quest\x12\x1a\n\x08filename\x18\x01\x20\x01(\tR\x08filename\x125\n\x05ap\
    pid\x18\x02\x20\x01(\rR\x05appidB\x1f\x82\xb5\x18\x1bApp\x20ID\x20the\
    \x20file\x20belongs\x20to.\"\x18\n\x16CCloud_Delete_Response2\xed\x04\n\
    \x05Cloud\x12\x9c\x01\n\x13GetUploadServerInfo\x12#.CCloud_GetUploadServ\
    erInfo_Request\x1a$.CCloud_GetUploadServerInfo_Response\":\x82\xb5\x186R\
    eturns\x20the\x20URL\x20of\x20the\x20proper\x20cloud\x20server\x20for\
    \x20a\x20user.\x12w\n\x0eGetFileDetails\x12\x1e.CCloud_GetFileDetails_Re\
    quest\x1a\x1f.CCloud_GetFileDetails_Response\"$\x82\xb5\x18\x20Returns\
    \x20details\x20on\x20a\x20Cloud\x20file.\x12\xba\x01\n\x12EnumerateUserF\
    iles\x12\".CCloud_EnumerateUserFiles_Request\x1a#.CCloud_EnumerateUserFi\
    les_Response\"[\x82\xb5\x18WEnumerates\x20Cloud\x20files\x20for\x20a\x20\
    user\x20of\x20a\x20given\x20app\x20ID.\x20Returns\x20up\x20to\x20500\x20\
    files\x20at\x20a\x20time.\x12d\n\x06Delete\x12\x16.CCloud_Delete_Request\
    \x1a\x17.CCloud_Delete_Response\")\x82\xb5\x18%Deletes\x20a\x20file\x20f\
    rom\x20the\x20user's\x20cloud.\x1a)\x82\xb5\x18%A\x20service\x20for\x20S\
    team\x20Cloud\x20operations.\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::steammessages_unified_base_steamworkssdk::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(9);
            messages.push(CCloud_GetUploadServerInfo_Request::generated_message_descriptor_data());
            messages.push(CCloud_GetUploadServerInfo_Response::generated_message_descriptor_data());
            messages.push(CCloud_GetFileDetails_Request::generated_message_descriptor_data());
            messages.push(CCloud_UserFile::generated_message_descriptor_data());
            messages.push(CCloud_GetFileDetails_Response::generated_message_descriptor_data());
            messages.push(CCloud_EnumerateUserFiles_Request::generated_message_descriptor_data());
            messages.push(CCloud_EnumerateUserFiles_Response::generated_message_descriptor_data());
            messages.push(CCloud_Delete_Request::generated_message_descriptor_data());
            messages.push(CCloud_Delete_Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
