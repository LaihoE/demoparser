// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `connectionless_netmessages.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:C2S_CONNECT_Message)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct C2S_CONNECT_Message {
    // message fields
    // @@protoc_insertion_point(field:C2S_CONNECT_Message.host_version)
    pub host_version: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:C2S_CONNECT_Message.auth_protocol)
    pub auth_protocol: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:C2S_CONNECT_Message.challenge_number)
    pub challenge_number: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:C2S_CONNECT_Message.reservation_cookie)
    pub reservation_cookie: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:C2S_CONNECT_Message.low_violence)
    pub low_violence: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:C2S_CONNECT_Message.encrypted_password)
    pub encrypted_password: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:C2S_CONNECT_Message.splitplayers)
    pub splitplayers: ::std::vec::Vec<super::netmessages::CCLCMsg_SplitPlayerConnect>,
    // @@protoc_insertion_point(field:C2S_CONNECT_Message.auth_steam)
    pub auth_steam: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:C2S_CONNECT_Message.challenge_context)
    pub challenge_context: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:C2S_CONNECT_Message.use_snp)
    pub use_snp: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:C2S_CONNECT_Message.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a C2S_CONNECT_Message {
    fn default() -> &'a C2S_CONNECT_Message {
        <C2S_CONNECT_Message as ::protobuf::Message>::default_instance()
    }
}

impl C2S_CONNECT_Message {
    pub fn new() -> C2S_CONNECT_Message {
        ::std::default::Default::default()
    }

    // optional uint32 host_version = 1;

    pub fn host_version(&self) -> u32 {
        self.host_version.unwrap_or(0)
    }

    pub fn clear_host_version(&mut self) {
        self.host_version = ::std::option::Option::None;
    }

    pub fn has_host_version(&self) -> bool {
        self.host_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_host_version(&mut self, v: u32) {
        self.host_version = ::std::option::Option::Some(v);
    }

    // optional uint32 auth_protocol = 2;

    pub fn auth_protocol(&self) -> u32 {
        self.auth_protocol.unwrap_or(0)
    }

    pub fn clear_auth_protocol(&mut self) {
        self.auth_protocol = ::std::option::Option::None;
    }

    pub fn has_auth_protocol(&self) -> bool {
        self.auth_protocol.is_some()
    }

    // Param is passed by value, moved
    pub fn set_auth_protocol(&mut self, v: u32) {
        self.auth_protocol = ::std::option::Option::Some(v);
    }

    // optional uint32 challenge_number = 3;

    pub fn challenge_number(&self) -> u32 {
        self.challenge_number.unwrap_or(0)
    }

    pub fn clear_challenge_number(&mut self) {
        self.challenge_number = ::std::option::Option::None;
    }

    pub fn has_challenge_number(&self) -> bool {
        self.challenge_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_challenge_number(&mut self, v: u32) {
        self.challenge_number = ::std::option::Option::Some(v);
    }

    // optional fixed64 reservation_cookie = 4;

    pub fn reservation_cookie(&self) -> u64 {
        self.reservation_cookie.unwrap_or(0)
    }

    pub fn clear_reservation_cookie(&mut self) {
        self.reservation_cookie = ::std::option::Option::None;
    }

    pub fn has_reservation_cookie(&self) -> bool {
        self.reservation_cookie.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reservation_cookie(&mut self, v: u64) {
        self.reservation_cookie = ::std::option::Option::Some(v);
    }

    // optional bool low_violence = 5;

    pub fn low_violence(&self) -> bool {
        self.low_violence.unwrap_or(false)
    }

    pub fn clear_low_violence(&mut self) {
        self.low_violence = ::std::option::Option::None;
    }

    pub fn has_low_violence(&self) -> bool {
        self.low_violence.is_some()
    }

    // Param is passed by value, moved
    pub fn set_low_violence(&mut self, v: bool) {
        self.low_violence = ::std::option::Option::Some(v);
    }

    // optional bytes encrypted_password = 6;

    pub fn encrypted_password(&self) -> &[u8] {
        match self.encrypted_password.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_encrypted_password(&mut self) {
        self.encrypted_password = ::std::option::Option::None;
    }

    pub fn has_encrypted_password(&self) -> bool {
        self.encrypted_password.is_some()
    }

    // Param is passed by value, moved
    pub fn set_encrypted_password(&mut self, v: ::std::vec::Vec<u8>) {
        self.encrypted_password = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encrypted_password(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.encrypted_password.is_none() {
            self.encrypted_password = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.encrypted_password.as_mut().unwrap()
    }

    // Take field
    pub fn take_encrypted_password(&mut self) -> ::std::vec::Vec<u8> {
        self.encrypted_password.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes auth_steam = 8;

    pub fn auth_steam(&self) -> &[u8] {
        match self.auth_steam.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_auth_steam(&mut self) {
        self.auth_steam = ::std::option::Option::None;
    }

    pub fn has_auth_steam(&self) -> bool {
        self.auth_steam.is_some()
    }

    // Param is passed by value, moved
    pub fn set_auth_steam(&mut self, v: ::std::vec::Vec<u8>) {
        self.auth_steam = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_auth_steam(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.auth_steam.is_none() {
            self.auth_steam = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.auth_steam.as_mut().unwrap()
    }

    // Take field
    pub fn take_auth_steam(&mut self) -> ::std::vec::Vec<u8> {
        self.auth_steam.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional string challenge_context = 9;

    pub fn challenge_context(&self) -> &str {
        match self.challenge_context.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_challenge_context(&mut self) {
        self.challenge_context = ::std::option::Option::None;
    }

    pub fn has_challenge_context(&self) -> bool {
        self.challenge_context.is_some()
    }

    // Param is passed by value, moved
    pub fn set_challenge_context(&mut self, v: ::std::string::String) {
        self.challenge_context = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_challenge_context(&mut self) -> &mut ::std::string::String {
        if self.challenge_context.is_none() {
            self.challenge_context = ::std::option::Option::Some(::std::string::String::new());
        }
        self.challenge_context.as_mut().unwrap()
    }

    // Take field
    pub fn take_challenge_context(&mut self) -> ::std::string::String {
        self.challenge_context.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional sint32 use_snp = 10;

    pub fn use_snp(&self) -> i32 {
        self.use_snp.unwrap_or(0)
    }

    pub fn clear_use_snp(&mut self) {
        self.use_snp = ::std::option::Option::None;
    }

    pub fn has_use_snp(&self) -> bool {
        self.use_snp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_use_snp(&mut self, v: i32) {
        self.use_snp = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "host_version",
            |m: &C2S_CONNECT_Message| { &m.host_version },
            |m: &mut C2S_CONNECT_Message| { &mut m.host_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "auth_protocol",
            |m: &C2S_CONNECT_Message| { &m.auth_protocol },
            |m: &mut C2S_CONNECT_Message| { &mut m.auth_protocol },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "challenge_number",
            |m: &C2S_CONNECT_Message| { &m.challenge_number },
            |m: &mut C2S_CONNECT_Message| { &mut m.challenge_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "reservation_cookie",
            |m: &C2S_CONNECT_Message| { &m.reservation_cookie },
            |m: &mut C2S_CONNECT_Message| { &mut m.reservation_cookie },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "low_violence",
            |m: &C2S_CONNECT_Message| { &m.low_violence },
            |m: &mut C2S_CONNECT_Message| { &mut m.low_violence },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "encrypted_password",
            |m: &C2S_CONNECT_Message| { &m.encrypted_password },
            |m: &mut C2S_CONNECT_Message| { &mut m.encrypted_password },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "splitplayers",
            |m: &C2S_CONNECT_Message| { &m.splitplayers },
            |m: &mut C2S_CONNECT_Message| { &mut m.splitplayers },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "auth_steam",
            |m: &C2S_CONNECT_Message| { &m.auth_steam },
            |m: &mut C2S_CONNECT_Message| { &mut m.auth_steam },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "challenge_context",
            |m: &C2S_CONNECT_Message| { &m.challenge_context },
            |m: &mut C2S_CONNECT_Message| { &mut m.challenge_context },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "use_snp",
            |m: &C2S_CONNECT_Message| { &m.use_snp },
            |m: &mut C2S_CONNECT_Message| { &mut m.use_snp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<C2S_CONNECT_Message>(
            "C2S_CONNECT_Message",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for C2S_CONNECT_Message {
    const NAME: &'static str = "C2S_CONNECT_Message";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.host_version = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.auth_protocol = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.challenge_number = ::std::option::Option::Some(is.read_uint32()?);
                },
                33 => {
                    self.reservation_cookie = ::std::option::Option::Some(is.read_fixed64()?);
                },
                40 => {
                    self.low_violence = ::std::option::Option::Some(is.read_bool()?);
                },
                50 => {
                    self.encrypted_password = ::std::option::Option::Some(is.read_bytes()?);
                },
                58 => {
                    self.splitplayers.push(is.read_message()?);
                },
                66 => {
                    self.auth_steam = ::std::option::Option::Some(is.read_bytes()?);
                },
                74 => {
                    self.challenge_context = ::std::option::Option::Some(is.read_string()?);
                },
                80 => {
                    self.use_snp = ::std::option::Option::Some(is.read_sint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.host_version {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.auth_protocol {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.challenge_number {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.reservation_cookie {
            my_size += 1 + 8;
        }
        if let Some(v) = self.low_violence {
            my_size += 1 + 1;
        }
        if let Some(v) = self.encrypted_password.as_ref() {
            my_size += ::protobuf::rt::bytes_size(6, &v);
        }
        for value in &self.splitplayers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.auth_steam.as_ref() {
            my_size += ::protobuf::rt::bytes_size(8, &v);
        }
        if let Some(v) = self.challenge_context.as_ref() {
            my_size += ::protobuf::rt::string_size(9, &v);
        }
        if let Some(v) = self.use_snp {
            my_size += ::protobuf::rt::sint32_size(10, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.host_version {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.auth_protocol {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.challenge_number {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.reservation_cookie {
            os.write_fixed64(4, v)?;
        }
        if let Some(v) = self.low_violence {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.encrypted_password.as_ref() {
            os.write_bytes(6, v)?;
        }
        for v in &self.splitplayers {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        if let Some(v) = self.auth_steam.as_ref() {
            os.write_bytes(8, v)?;
        }
        if let Some(v) = self.challenge_context.as_ref() {
            os.write_string(9, v)?;
        }
        if let Some(v) = self.use_snp {
            os.write_sint32(10, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> C2S_CONNECT_Message {
        C2S_CONNECT_Message::new()
    }

    fn clear(&mut self) {
        self.host_version = ::std::option::Option::None;
        self.auth_protocol = ::std::option::Option::None;
        self.challenge_number = ::std::option::Option::None;
        self.reservation_cookie = ::std::option::Option::None;
        self.low_violence = ::std::option::Option::None;
        self.encrypted_password = ::std::option::Option::None;
        self.splitplayers.clear();
        self.auth_steam = ::std::option::Option::None;
        self.challenge_context = ::std::option::Option::None;
        self.use_snp = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static C2S_CONNECT_Message {
        static instance: C2S_CONNECT_Message = C2S_CONNECT_Message {
            host_version: ::std::option::Option::None,
            auth_protocol: ::std::option::Option::None,
            challenge_number: ::std::option::Option::None,
            reservation_cookie: ::std::option::Option::None,
            low_violence: ::std::option::Option::None,
            encrypted_password: ::std::option::Option::None,
            splitplayers: ::std::vec::Vec::new(),
            auth_steam: ::std::option::Option::None,
            challenge_context: ::std::option::Option::None,
            use_snp: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for C2S_CONNECT_Message {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("C2S_CONNECT_Message").unwrap()).clone()
    }
}

impl ::std::fmt::Display for C2S_CONNECT_Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C2S_CONNECT_Message {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:C2S_CONNECTION_Message)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct C2S_CONNECTION_Message {
    // message fields
    // @@protoc_insertion_point(field:C2S_CONNECTION_Message.addon_name)
    pub addon_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:C2S_CONNECTION_Message.use_snp)
    pub use_snp: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:C2S_CONNECTION_Message.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a C2S_CONNECTION_Message {
    fn default() -> &'a C2S_CONNECTION_Message {
        <C2S_CONNECTION_Message as ::protobuf::Message>::default_instance()
    }
}

impl C2S_CONNECTION_Message {
    pub fn new() -> C2S_CONNECTION_Message {
        ::std::default::Default::default()
    }

    // optional string addon_name = 1;

    pub fn addon_name(&self) -> &str {
        match self.addon_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_addon_name(&mut self) {
        self.addon_name = ::std::option::Option::None;
    }

    pub fn has_addon_name(&self) -> bool {
        self.addon_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_addon_name(&mut self, v: ::std::string::String) {
        self.addon_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_addon_name(&mut self) -> &mut ::std::string::String {
        if self.addon_name.is_none() {
            self.addon_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.addon_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_addon_name(&mut self) -> ::std::string::String {
        self.addon_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool use_snp = 2;

    pub fn use_snp(&self) -> bool {
        self.use_snp.unwrap_or(false)
    }

    pub fn clear_use_snp(&mut self) {
        self.use_snp = ::std::option::Option::None;
    }

    pub fn has_use_snp(&self) -> bool {
        self.use_snp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_use_snp(&mut self, v: bool) {
        self.use_snp = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "addon_name",
            |m: &C2S_CONNECTION_Message| { &m.addon_name },
            |m: &mut C2S_CONNECTION_Message| { &mut m.addon_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "use_snp",
            |m: &C2S_CONNECTION_Message| { &m.use_snp },
            |m: &mut C2S_CONNECTION_Message| { &mut m.use_snp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<C2S_CONNECTION_Message>(
            "C2S_CONNECTION_Message",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for C2S_CONNECTION_Message {
    const NAME: &'static str = "C2S_CONNECTION_Message";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.addon_name = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.use_snp = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.addon_name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.use_snp {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.addon_name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.use_snp {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> C2S_CONNECTION_Message {
        C2S_CONNECTION_Message::new()
    }

    fn clear(&mut self) {
        self.addon_name = ::std::option::Option::None;
        self.use_snp = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static C2S_CONNECTION_Message {
        static instance: C2S_CONNECTION_Message = C2S_CONNECTION_Message {
            addon_name: ::std::option::Option::None,
            use_snp: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for C2S_CONNECTION_Message {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("C2S_CONNECTION_Message").unwrap()).clone()
    }
}

impl ::std::fmt::Display for C2S_CONNECTION_Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for C2S_CONNECTION_Message {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20connectionless_netmessages.proto\x1a\x11netmessages.proto\"\xaf\
    \x03\n\x13C2S_CONNECT_Message\x12!\n\x0chost_version\x18\x01\x20\x01(\rR\
    \x0bhostVersion\x12#\n\rauth_protocol\x18\x02\x20\x01(\rR\x0cauthProtoco\
    l\x12)\n\x10challenge_number\x18\x03\x20\x01(\rR\x0fchallengeNumber\x12-\
    \n\x12reservation_cookie\x18\x04\x20\x01(\x06R\x11reservationCookie\x12!\
    \n\x0clow_violence\x18\x05\x20\x01(\x08R\x0blowViolence\x12-\n\x12encryp\
    ted_password\x18\x06\x20\x01(\x0cR\x11encryptedPassword\x12?\n\x0csplitp\
    layers\x18\x07\x20\x03(\x0b2\x1b.CCLCMsg_SplitPlayerConnectR\x0csplitpla\
    yers\x12\x1d\n\nauth_steam\x18\x08\x20\x01(\x0cR\tauthSteam\x12+\n\x11ch\
    allenge_context\x18\t\x20\x01(\tR\x10challengeContext\x12\x17\n\x07use_s\
    np\x18\n\x20\x01(\x11R\x06useSnp\"P\n\x16C2S_CONNECTION_Message\x12\x1d\
    \n\naddon_name\x18\x01\x20\x01(\tR\taddonName\x12\x17\n\x07use_snp\x18\
    \x02\x20\x01(\x08R\x06useSnp\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::netmessages::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(C2S_CONNECT_Message::generated_message_descriptor_data());
            messages.push(C2S_CONNECTION_Message::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
