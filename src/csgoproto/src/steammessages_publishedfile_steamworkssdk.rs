// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_publishedfile.steamworkssdk.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:CPublishedFile_Subscribe_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPublishedFile_Subscribe_Request {
    // message fields
    // @@protoc_insertion_point(field:CPublishedFile_Subscribe_Request.publishedfileid)
    pub publishedfileid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPublishedFile_Subscribe_Request.list_type)
    pub list_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPublishedFile_Subscribe_Request.appid)
    pub appid: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CPublishedFile_Subscribe_Request.notify_client)
    pub notify_client: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CPublishedFile_Subscribe_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPublishedFile_Subscribe_Request {
    fn default() -> &'a CPublishedFile_Subscribe_Request {
        <CPublishedFile_Subscribe_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPublishedFile_Subscribe_Request {
    pub fn new() -> CPublishedFile_Subscribe_Request {
        ::std::default::Default::default()
    }

    // optional uint64 publishedfileid = 1;

    pub fn publishedfileid(&self) -> u64 {
        self.publishedfileid.unwrap_or(0)
    }

    pub fn clear_publishedfileid(&mut self) {
        self.publishedfileid = ::std::option::Option::None;
    }

    pub fn has_publishedfileid(&self) -> bool {
        self.publishedfileid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_publishedfileid(&mut self, v: u64) {
        self.publishedfileid = ::std::option::Option::Some(v);
    }

    // optional uint32 list_type = 2;

    pub fn list_type(&self) -> u32 {
        self.list_type.unwrap_or(0)
    }

    pub fn clear_list_type(&mut self) {
        self.list_type = ::std::option::Option::None;
    }

    pub fn has_list_type(&self) -> bool {
        self.list_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_list_type(&mut self, v: u32) {
        self.list_type = ::std::option::Option::Some(v);
    }

    // optional int32 appid = 3;

    pub fn appid(&self) -> i32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: i32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional bool notify_client = 4;

    pub fn notify_client(&self) -> bool {
        self.notify_client.unwrap_or(false)
    }

    pub fn clear_notify_client(&mut self) {
        self.notify_client = ::std::option::Option::None;
    }

    pub fn has_notify_client(&self) -> bool {
        self.notify_client.is_some()
    }

    // Param is passed by value, moved
    pub fn set_notify_client(&mut self, v: bool) {
        self.notify_client = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "publishedfileid",
            |m: &CPublishedFile_Subscribe_Request| { &m.publishedfileid },
            |m: &mut CPublishedFile_Subscribe_Request| { &mut m.publishedfileid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "list_type",
            |m: &CPublishedFile_Subscribe_Request| { &m.list_type },
            |m: &mut CPublishedFile_Subscribe_Request| { &mut m.list_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CPublishedFile_Subscribe_Request| { &m.appid },
            |m: &mut CPublishedFile_Subscribe_Request| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "notify_client",
            |m: &CPublishedFile_Subscribe_Request| { &m.notify_client },
            |m: &mut CPublishedFile_Subscribe_Request| { &mut m.notify_client },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPublishedFile_Subscribe_Request>(
            "CPublishedFile_Subscribe_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPublishedFile_Subscribe_Request {
    const NAME: &'static str = "CPublishedFile_Subscribe_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.publishedfileid = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.list_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.appid = ::std::option::Option::Some(is.read_int32()?);
                },
                32 => {
                    self.notify_client = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.publishedfileid {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.list_type {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::int32_size(3, v);
        }
        if let Some(v) = self.notify_client {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.publishedfileid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.list_type {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.appid {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.notify_client {
            os.write_bool(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPublishedFile_Subscribe_Request {
        CPublishedFile_Subscribe_Request::new()
    }

    fn clear(&mut self) {
        self.publishedfileid = ::std::option::Option::None;
        self.list_type = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.notify_client = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPublishedFile_Subscribe_Request {
        static instance: CPublishedFile_Subscribe_Request = CPublishedFile_Subscribe_Request {
            publishedfileid: ::std::option::Option::None,
            list_type: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            notify_client: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPublishedFile_Subscribe_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPublishedFile_Subscribe_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPublishedFile_Subscribe_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPublishedFile_Subscribe_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPublishedFile_Subscribe_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPublishedFile_Subscribe_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CPublishedFile_Subscribe_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPublishedFile_Subscribe_Response {
    fn default() -> &'a CPublishedFile_Subscribe_Response {
        <CPublishedFile_Subscribe_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPublishedFile_Subscribe_Response {
    pub fn new() -> CPublishedFile_Subscribe_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPublishedFile_Subscribe_Response>(
            "CPublishedFile_Subscribe_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPublishedFile_Subscribe_Response {
    const NAME: &'static str = "CPublishedFile_Subscribe_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPublishedFile_Subscribe_Response {
        CPublishedFile_Subscribe_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPublishedFile_Subscribe_Response {
        static instance: CPublishedFile_Subscribe_Response = CPublishedFile_Subscribe_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPublishedFile_Subscribe_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPublishedFile_Subscribe_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPublishedFile_Subscribe_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPublishedFile_Subscribe_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPublishedFile_Unsubscribe_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPublishedFile_Unsubscribe_Request {
    // message fields
    // @@protoc_insertion_point(field:CPublishedFile_Unsubscribe_Request.publishedfileid)
    pub publishedfileid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPublishedFile_Unsubscribe_Request.list_type)
    pub list_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPublishedFile_Unsubscribe_Request.appid)
    pub appid: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CPublishedFile_Unsubscribe_Request.notify_client)
    pub notify_client: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CPublishedFile_Unsubscribe_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPublishedFile_Unsubscribe_Request {
    fn default() -> &'a CPublishedFile_Unsubscribe_Request {
        <CPublishedFile_Unsubscribe_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPublishedFile_Unsubscribe_Request {
    pub fn new() -> CPublishedFile_Unsubscribe_Request {
        ::std::default::Default::default()
    }

    // optional uint64 publishedfileid = 1;

    pub fn publishedfileid(&self) -> u64 {
        self.publishedfileid.unwrap_or(0)
    }

    pub fn clear_publishedfileid(&mut self) {
        self.publishedfileid = ::std::option::Option::None;
    }

    pub fn has_publishedfileid(&self) -> bool {
        self.publishedfileid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_publishedfileid(&mut self, v: u64) {
        self.publishedfileid = ::std::option::Option::Some(v);
    }

    // optional uint32 list_type = 2;

    pub fn list_type(&self) -> u32 {
        self.list_type.unwrap_or(0)
    }

    pub fn clear_list_type(&mut self) {
        self.list_type = ::std::option::Option::None;
    }

    pub fn has_list_type(&self) -> bool {
        self.list_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_list_type(&mut self, v: u32) {
        self.list_type = ::std::option::Option::Some(v);
    }

    // optional int32 appid = 3;

    pub fn appid(&self) -> i32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: i32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional bool notify_client = 4;

    pub fn notify_client(&self) -> bool {
        self.notify_client.unwrap_or(false)
    }

    pub fn clear_notify_client(&mut self) {
        self.notify_client = ::std::option::Option::None;
    }

    pub fn has_notify_client(&self) -> bool {
        self.notify_client.is_some()
    }

    // Param is passed by value, moved
    pub fn set_notify_client(&mut self, v: bool) {
        self.notify_client = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "publishedfileid",
            |m: &CPublishedFile_Unsubscribe_Request| { &m.publishedfileid },
            |m: &mut CPublishedFile_Unsubscribe_Request| { &mut m.publishedfileid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "list_type",
            |m: &CPublishedFile_Unsubscribe_Request| { &m.list_type },
            |m: &mut CPublishedFile_Unsubscribe_Request| { &mut m.list_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CPublishedFile_Unsubscribe_Request| { &m.appid },
            |m: &mut CPublishedFile_Unsubscribe_Request| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "notify_client",
            |m: &CPublishedFile_Unsubscribe_Request| { &m.notify_client },
            |m: &mut CPublishedFile_Unsubscribe_Request| { &mut m.notify_client },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPublishedFile_Unsubscribe_Request>(
            "CPublishedFile_Unsubscribe_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPublishedFile_Unsubscribe_Request {
    const NAME: &'static str = "CPublishedFile_Unsubscribe_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.publishedfileid = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.list_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.appid = ::std::option::Option::Some(is.read_int32()?);
                },
                32 => {
                    self.notify_client = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.publishedfileid {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.list_type {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::int32_size(3, v);
        }
        if let Some(v) = self.notify_client {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.publishedfileid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.list_type {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.appid {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.notify_client {
            os.write_bool(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPublishedFile_Unsubscribe_Request {
        CPublishedFile_Unsubscribe_Request::new()
    }

    fn clear(&mut self) {
        self.publishedfileid = ::std::option::Option::None;
        self.list_type = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.notify_client = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPublishedFile_Unsubscribe_Request {
        static instance: CPublishedFile_Unsubscribe_Request = CPublishedFile_Unsubscribe_Request {
            publishedfileid: ::std::option::Option::None,
            list_type: ::std::option::Option::None,
            appid: ::std::option::Option::None,
            notify_client: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPublishedFile_Unsubscribe_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPublishedFile_Unsubscribe_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPublishedFile_Unsubscribe_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPublishedFile_Unsubscribe_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPublishedFile_Unsubscribe_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPublishedFile_Unsubscribe_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CPublishedFile_Unsubscribe_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPublishedFile_Unsubscribe_Response {
    fn default() -> &'a CPublishedFile_Unsubscribe_Response {
        <CPublishedFile_Unsubscribe_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPublishedFile_Unsubscribe_Response {
    pub fn new() -> CPublishedFile_Unsubscribe_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPublishedFile_Unsubscribe_Response>(
            "CPublishedFile_Unsubscribe_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPublishedFile_Unsubscribe_Response {
    const NAME: &'static str = "CPublishedFile_Unsubscribe_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPublishedFile_Unsubscribe_Response {
        CPublishedFile_Unsubscribe_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPublishedFile_Unsubscribe_Response {
        static instance: CPublishedFile_Unsubscribe_Response = CPublishedFile_Unsubscribe_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPublishedFile_Unsubscribe_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPublishedFile_Unsubscribe_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPublishedFile_Unsubscribe_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPublishedFile_Unsubscribe_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPublishedFile_Publish_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPublishedFile_Publish_Request {
    // message fields
    // @@protoc_insertion_point(field:CPublishedFile_Publish_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPublishedFile_Publish_Request.consumer_appid)
    pub consumer_appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPublishedFile_Publish_Request.cloudfilename)
    pub cloudfilename: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPublishedFile_Publish_Request.preview_cloudfilename)
    pub preview_cloudfilename: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPublishedFile_Publish_Request.title)
    pub title: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPublishedFile_Publish_Request.file_description)
    pub file_description: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPublishedFile_Publish_Request.file_type)
    pub file_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPublishedFile_Publish_Request.consumer_shortcut_name)
    pub consumer_shortcut_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPublishedFile_Publish_Request.youtube_username)
    pub youtube_username: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPublishedFile_Publish_Request.youtube_videoid)
    pub youtube_videoid: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPublishedFile_Publish_Request.visibility)
    pub visibility: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPublishedFile_Publish_Request.redirect_uri)
    pub redirect_uri: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPublishedFile_Publish_Request.tags)
    pub tags: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:CPublishedFile_Publish_Request.collection_type)
    pub collection_type: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPublishedFile_Publish_Request.game_type)
    pub game_type: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPublishedFile_Publish_Request.url)
    pub url: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CPublishedFile_Publish_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPublishedFile_Publish_Request {
    fn default() -> &'a CPublishedFile_Publish_Request {
        <CPublishedFile_Publish_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPublishedFile_Publish_Request {
    pub fn new() -> CPublishedFile_Publish_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint32 consumer_appid = 2;

    pub fn consumer_appid(&self) -> u32 {
        self.consumer_appid.unwrap_or(0)
    }

    pub fn clear_consumer_appid(&mut self) {
        self.consumer_appid = ::std::option::Option::None;
    }

    pub fn has_consumer_appid(&self) -> bool {
        self.consumer_appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_consumer_appid(&mut self, v: u32) {
        self.consumer_appid = ::std::option::Option::Some(v);
    }

    // optional string cloudfilename = 3;

    pub fn cloudfilename(&self) -> &str {
        match self.cloudfilename.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_cloudfilename(&mut self) {
        self.cloudfilename = ::std::option::Option::None;
    }

    pub fn has_cloudfilename(&self) -> bool {
        self.cloudfilename.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cloudfilename(&mut self, v: ::std::string::String) {
        self.cloudfilename = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cloudfilename(&mut self) -> &mut ::std::string::String {
        if self.cloudfilename.is_none() {
            self.cloudfilename = ::std::option::Option::Some(::std::string::String::new());
        }
        self.cloudfilename.as_mut().unwrap()
    }

    // Take field
    pub fn take_cloudfilename(&mut self) -> ::std::string::String {
        self.cloudfilename.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string preview_cloudfilename = 4;

    pub fn preview_cloudfilename(&self) -> &str {
        match self.preview_cloudfilename.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_preview_cloudfilename(&mut self) {
        self.preview_cloudfilename = ::std::option::Option::None;
    }

    pub fn has_preview_cloudfilename(&self) -> bool {
        self.preview_cloudfilename.is_some()
    }

    // Param is passed by value, moved
    pub fn set_preview_cloudfilename(&mut self, v: ::std::string::String) {
        self.preview_cloudfilename = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_preview_cloudfilename(&mut self) -> &mut ::std::string::String {
        if self.preview_cloudfilename.is_none() {
            self.preview_cloudfilename = ::std::option::Option::Some(::std::string::String::new());
        }
        self.preview_cloudfilename.as_mut().unwrap()
    }

    // Take field
    pub fn take_preview_cloudfilename(&mut self) -> ::std::string::String {
        self.preview_cloudfilename.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string title = 5;

    pub fn title(&self) -> &str {
        match self.title.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_title(&mut self) {
        self.title = ::std::option::Option::None;
    }

    pub fn has_title(&self) -> bool {
        self.title.is_some()
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        if self.title.is_none() {
            self.title = ::std::option::Option::Some(::std::string::String::new());
        }
        self.title.as_mut().unwrap()
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        self.title.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string file_description = 6;

    pub fn file_description(&self) -> &str {
        match self.file_description.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_file_description(&mut self) {
        self.file_description = ::std::option::Option::None;
    }

    pub fn has_file_description(&self) -> bool {
        self.file_description.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_description(&mut self, v: ::std::string::String) {
        self.file_description = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_description(&mut self) -> &mut ::std::string::String {
        if self.file_description.is_none() {
            self.file_description = ::std::option::Option::Some(::std::string::String::new());
        }
        self.file_description.as_mut().unwrap()
    }

    // Take field
    pub fn take_file_description(&mut self) -> ::std::string::String {
        self.file_description.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 file_type = 7;

    pub fn file_type(&self) -> u32 {
        self.file_type.unwrap_or(0)
    }

    pub fn clear_file_type(&mut self) {
        self.file_type = ::std::option::Option::None;
    }

    pub fn has_file_type(&self) -> bool {
        self.file_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_type(&mut self, v: u32) {
        self.file_type = ::std::option::Option::Some(v);
    }

    // optional string consumer_shortcut_name = 8;

    pub fn consumer_shortcut_name(&self) -> &str {
        match self.consumer_shortcut_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_consumer_shortcut_name(&mut self) {
        self.consumer_shortcut_name = ::std::option::Option::None;
    }

    pub fn has_consumer_shortcut_name(&self) -> bool {
        self.consumer_shortcut_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_consumer_shortcut_name(&mut self, v: ::std::string::String) {
        self.consumer_shortcut_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_consumer_shortcut_name(&mut self) -> &mut ::std::string::String {
        if self.consumer_shortcut_name.is_none() {
            self.consumer_shortcut_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.consumer_shortcut_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_consumer_shortcut_name(&mut self) -> ::std::string::String {
        self.consumer_shortcut_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string youtube_username = 9;

    pub fn youtube_username(&self) -> &str {
        match self.youtube_username.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_youtube_username(&mut self) {
        self.youtube_username = ::std::option::Option::None;
    }

    pub fn has_youtube_username(&self) -> bool {
        self.youtube_username.is_some()
    }

    // Param is passed by value, moved
    pub fn set_youtube_username(&mut self, v: ::std::string::String) {
        self.youtube_username = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_youtube_username(&mut self) -> &mut ::std::string::String {
        if self.youtube_username.is_none() {
            self.youtube_username = ::std::option::Option::Some(::std::string::String::new());
        }
        self.youtube_username.as_mut().unwrap()
    }

    // Take field
    pub fn take_youtube_username(&mut self) -> ::std::string::String {
        self.youtube_username.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string youtube_videoid = 10;

    pub fn youtube_videoid(&self) -> &str {
        match self.youtube_videoid.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_youtube_videoid(&mut self) {
        self.youtube_videoid = ::std::option::Option::None;
    }

    pub fn has_youtube_videoid(&self) -> bool {
        self.youtube_videoid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_youtube_videoid(&mut self, v: ::std::string::String) {
        self.youtube_videoid = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_youtube_videoid(&mut self) -> &mut ::std::string::String {
        if self.youtube_videoid.is_none() {
            self.youtube_videoid = ::std::option::Option::Some(::std::string::String::new());
        }
        self.youtube_videoid.as_mut().unwrap()
    }

    // Take field
    pub fn take_youtube_videoid(&mut self) -> ::std::string::String {
        self.youtube_videoid.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 visibility = 11;

    pub fn visibility(&self) -> u32 {
        self.visibility.unwrap_or(0)
    }

    pub fn clear_visibility(&mut self) {
        self.visibility = ::std::option::Option::None;
    }

    pub fn has_visibility(&self) -> bool {
        self.visibility.is_some()
    }

    // Param is passed by value, moved
    pub fn set_visibility(&mut self, v: u32) {
        self.visibility = ::std::option::Option::Some(v);
    }

    // optional string redirect_uri = 12;

    pub fn redirect_uri(&self) -> &str {
        match self.redirect_uri.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_redirect_uri(&mut self) {
        self.redirect_uri = ::std::option::Option::None;
    }

    pub fn has_redirect_uri(&self) -> bool {
        self.redirect_uri.is_some()
    }

    // Param is passed by value, moved
    pub fn set_redirect_uri(&mut self, v: ::std::string::String) {
        self.redirect_uri = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_redirect_uri(&mut self) -> &mut ::std::string::String {
        if self.redirect_uri.is_none() {
            self.redirect_uri = ::std::option::Option::Some(::std::string::String::new());
        }
        self.redirect_uri.as_mut().unwrap()
    }

    // Take field
    pub fn take_redirect_uri(&mut self) -> ::std::string::String {
        self.redirect_uri.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string collection_type = 14;

    pub fn collection_type(&self) -> &str {
        match self.collection_type.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_collection_type(&mut self) {
        self.collection_type = ::std::option::Option::None;
    }

    pub fn has_collection_type(&self) -> bool {
        self.collection_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_collection_type(&mut self, v: ::std::string::String) {
        self.collection_type = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_collection_type(&mut self) -> &mut ::std::string::String {
        if self.collection_type.is_none() {
            self.collection_type = ::std::option::Option::Some(::std::string::String::new());
        }
        self.collection_type.as_mut().unwrap()
    }

    // Take field
    pub fn take_collection_type(&mut self) -> ::std::string::String {
        self.collection_type.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string game_type = 15;

    pub fn game_type(&self) -> &str {
        match self.game_type.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_game_type(&mut self) {
        self.game_type = ::std::option::Option::None;
    }

    pub fn has_game_type(&self) -> bool {
        self.game_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_game_type(&mut self, v: ::std::string::String) {
        self.game_type = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_game_type(&mut self) -> &mut ::std::string::String {
        if self.game_type.is_none() {
            self.game_type = ::std::option::Option::Some(::std::string::String::new());
        }
        self.game_type.as_mut().unwrap()
    }

    // Take field
    pub fn take_game_type(&mut self) -> ::std::string::String {
        self.game_type.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string url = 16;

    pub fn url(&self) -> &str {
        match self.url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_url(&mut self) {
        self.url = ::std::option::Option::None;
    }

    pub fn has_url(&self) -> bool {
        self.url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_url(&mut self, v: ::std::string::String) {
        self.url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_url(&mut self) -> &mut ::std::string::String {
        if self.url.is_none() {
            self.url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.url.as_mut().unwrap()
    }

    // Take field
    pub fn take_url(&mut self) -> ::std::string::String {
        self.url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(16);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CPublishedFile_Publish_Request| { &m.appid },
            |m: &mut CPublishedFile_Publish_Request| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "consumer_appid",
            |m: &CPublishedFile_Publish_Request| { &m.consumer_appid },
            |m: &mut CPublishedFile_Publish_Request| { &mut m.consumer_appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "cloudfilename",
            |m: &CPublishedFile_Publish_Request| { &m.cloudfilename },
            |m: &mut CPublishedFile_Publish_Request| { &mut m.cloudfilename },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "preview_cloudfilename",
            |m: &CPublishedFile_Publish_Request| { &m.preview_cloudfilename },
            |m: &mut CPublishedFile_Publish_Request| { &mut m.preview_cloudfilename },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "title",
            |m: &CPublishedFile_Publish_Request| { &m.title },
            |m: &mut CPublishedFile_Publish_Request| { &mut m.title },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "file_description",
            |m: &CPublishedFile_Publish_Request| { &m.file_description },
            |m: &mut CPublishedFile_Publish_Request| { &mut m.file_description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "file_type",
            |m: &CPublishedFile_Publish_Request| { &m.file_type },
            |m: &mut CPublishedFile_Publish_Request| { &mut m.file_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "consumer_shortcut_name",
            |m: &CPublishedFile_Publish_Request| { &m.consumer_shortcut_name },
            |m: &mut CPublishedFile_Publish_Request| { &mut m.consumer_shortcut_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "youtube_username",
            |m: &CPublishedFile_Publish_Request| { &m.youtube_username },
            |m: &mut CPublishedFile_Publish_Request| { &mut m.youtube_username },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "youtube_videoid",
            |m: &CPublishedFile_Publish_Request| { &m.youtube_videoid },
            |m: &mut CPublishedFile_Publish_Request| { &mut m.youtube_videoid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "visibility",
            |m: &CPublishedFile_Publish_Request| { &m.visibility },
            |m: &mut CPublishedFile_Publish_Request| { &mut m.visibility },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "redirect_uri",
            |m: &CPublishedFile_Publish_Request| { &m.redirect_uri },
            |m: &mut CPublishedFile_Publish_Request| { &mut m.redirect_uri },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "tags",
            |m: &CPublishedFile_Publish_Request| { &m.tags },
            |m: &mut CPublishedFile_Publish_Request| { &mut m.tags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "collection_type",
            |m: &CPublishedFile_Publish_Request| { &m.collection_type },
            |m: &mut CPublishedFile_Publish_Request| { &mut m.collection_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "game_type",
            |m: &CPublishedFile_Publish_Request| { &m.game_type },
            |m: &mut CPublishedFile_Publish_Request| { &mut m.game_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "url",
            |m: &CPublishedFile_Publish_Request| { &m.url },
            |m: &mut CPublishedFile_Publish_Request| { &mut m.url },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPublishedFile_Publish_Request>(
            "CPublishedFile_Publish_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPublishedFile_Publish_Request {
    const NAME: &'static str = "CPublishedFile_Publish_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.consumer_appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.cloudfilename = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.preview_cloudfilename = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    self.title = ::std::option::Option::Some(is.read_string()?);
                },
                50 => {
                    self.file_description = ::std::option::Option::Some(is.read_string()?);
                },
                56 => {
                    self.file_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                66 => {
                    self.consumer_shortcut_name = ::std::option::Option::Some(is.read_string()?);
                },
                74 => {
                    self.youtube_username = ::std::option::Option::Some(is.read_string()?);
                },
                82 => {
                    self.youtube_videoid = ::std::option::Option::Some(is.read_string()?);
                },
                88 => {
                    self.visibility = ::std::option::Option::Some(is.read_uint32()?);
                },
                98 => {
                    self.redirect_uri = ::std::option::Option::Some(is.read_string()?);
                },
                106 => {
                    self.tags.push(is.read_string()?);
                },
                114 => {
                    self.collection_type = ::std::option::Option::Some(is.read_string()?);
                },
                122 => {
                    self.game_type = ::std::option::Option::Some(is.read_string()?);
                },
                130 => {
                    self.url = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.consumer_appid {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.cloudfilename.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.preview_cloudfilename.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.title.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.file_description.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(v) = self.file_type {
            my_size += ::protobuf::rt::uint32_size(7, v);
        }
        if let Some(v) = self.consumer_shortcut_name.as_ref() {
            my_size += ::protobuf::rt::string_size(8, &v);
        }
        if let Some(v) = self.youtube_username.as_ref() {
            my_size += ::protobuf::rt::string_size(9, &v);
        }
        if let Some(v) = self.youtube_videoid.as_ref() {
            my_size += ::protobuf::rt::string_size(10, &v);
        }
        if let Some(v) = self.visibility {
            my_size += ::protobuf::rt::uint32_size(11, v);
        }
        if let Some(v) = self.redirect_uri.as_ref() {
            my_size += ::protobuf::rt::string_size(12, &v);
        }
        for value in &self.tags {
            my_size += ::protobuf::rt::string_size(13, &value);
        };
        if let Some(v) = self.collection_type.as_ref() {
            my_size += ::protobuf::rt::string_size(14, &v);
        }
        if let Some(v) = self.game_type.as_ref() {
            my_size += ::protobuf::rt::string_size(15, &v);
        }
        if let Some(v) = self.url.as_ref() {
            my_size += ::protobuf::rt::string_size(16, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.consumer_appid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.cloudfilename.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.preview_cloudfilename.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.title.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.file_description.as_ref() {
            os.write_string(6, v)?;
        }
        if let Some(v) = self.file_type {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.consumer_shortcut_name.as_ref() {
            os.write_string(8, v)?;
        }
        if let Some(v) = self.youtube_username.as_ref() {
            os.write_string(9, v)?;
        }
        if let Some(v) = self.youtube_videoid.as_ref() {
            os.write_string(10, v)?;
        }
        if let Some(v) = self.visibility {
            os.write_uint32(11, v)?;
        }
        if let Some(v) = self.redirect_uri.as_ref() {
            os.write_string(12, v)?;
        }
        for v in &self.tags {
            os.write_string(13, &v)?;
        };
        if let Some(v) = self.collection_type.as_ref() {
            os.write_string(14, v)?;
        }
        if let Some(v) = self.game_type.as_ref() {
            os.write_string(15, v)?;
        }
        if let Some(v) = self.url.as_ref() {
            os.write_string(16, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPublishedFile_Publish_Request {
        CPublishedFile_Publish_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.consumer_appid = ::std::option::Option::None;
        self.cloudfilename = ::std::option::Option::None;
        self.preview_cloudfilename = ::std::option::Option::None;
        self.title = ::std::option::Option::None;
        self.file_description = ::std::option::Option::None;
        self.file_type = ::std::option::Option::None;
        self.consumer_shortcut_name = ::std::option::Option::None;
        self.youtube_username = ::std::option::Option::None;
        self.youtube_videoid = ::std::option::Option::None;
        self.visibility = ::std::option::Option::None;
        self.redirect_uri = ::std::option::Option::None;
        self.tags.clear();
        self.collection_type = ::std::option::Option::None;
        self.game_type = ::std::option::Option::None;
        self.url = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPublishedFile_Publish_Request {
        static instance: CPublishedFile_Publish_Request = CPublishedFile_Publish_Request {
            appid: ::std::option::Option::None,
            consumer_appid: ::std::option::Option::None,
            cloudfilename: ::std::option::Option::None,
            preview_cloudfilename: ::std::option::Option::None,
            title: ::std::option::Option::None,
            file_description: ::std::option::Option::None,
            file_type: ::std::option::Option::None,
            consumer_shortcut_name: ::std::option::Option::None,
            youtube_username: ::std::option::Option::None,
            youtube_videoid: ::std::option::Option::None,
            visibility: ::std::option::Option::None,
            redirect_uri: ::std::option::Option::None,
            tags: ::std::vec::Vec::new(),
            collection_type: ::std::option::Option::None,
            game_type: ::std::option::Option::None,
            url: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPublishedFile_Publish_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPublishedFile_Publish_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPublishedFile_Publish_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPublishedFile_Publish_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPublishedFile_Publish_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPublishedFile_Publish_Response {
    // message fields
    // @@protoc_insertion_point(field:CPublishedFile_Publish_Response.publishedfileid)
    pub publishedfileid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPublishedFile_Publish_Response.redirect_uri)
    pub redirect_uri: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CPublishedFile_Publish_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPublishedFile_Publish_Response {
    fn default() -> &'a CPublishedFile_Publish_Response {
        <CPublishedFile_Publish_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPublishedFile_Publish_Response {
    pub fn new() -> CPublishedFile_Publish_Response {
        ::std::default::Default::default()
    }

    // optional uint64 publishedfileid = 1;

    pub fn publishedfileid(&self) -> u64 {
        self.publishedfileid.unwrap_or(0)
    }

    pub fn clear_publishedfileid(&mut self) {
        self.publishedfileid = ::std::option::Option::None;
    }

    pub fn has_publishedfileid(&self) -> bool {
        self.publishedfileid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_publishedfileid(&mut self, v: u64) {
        self.publishedfileid = ::std::option::Option::Some(v);
    }

    // optional string redirect_uri = 2;

    pub fn redirect_uri(&self) -> &str {
        match self.redirect_uri.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_redirect_uri(&mut self) {
        self.redirect_uri = ::std::option::Option::None;
    }

    pub fn has_redirect_uri(&self) -> bool {
        self.redirect_uri.is_some()
    }

    // Param is passed by value, moved
    pub fn set_redirect_uri(&mut self, v: ::std::string::String) {
        self.redirect_uri = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_redirect_uri(&mut self) -> &mut ::std::string::String {
        if self.redirect_uri.is_none() {
            self.redirect_uri = ::std::option::Option::Some(::std::string::String::new());
        }
        self.redirect_uri.as_mut().unwrap()
    }

    // Take field
    pub fn take_redirect_uri(&mut self) -> ::std::string::String {
        self.redirect_uri.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "publishedfileid",
            |m: &CPublishedFile_Publish_Response| { &m.publishedfileid },
            |m: &mut CPublishedFile_Publish_Response| { &mut m.publishedfileid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "redirect_uri",
            |m: &CPublishedFile_Publish_Response| { &m.redirect_uri },
            |m: &mut CPublishedFile_Publish_Response| { &mut m.redirect_uri },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPublishedFile_Publish_Response>(
            "CPublishedFile_Publish_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPublishedFile_Publish_Response {
    const NAME: &'static str = "CPublishedFile_Publish_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.publishedfileid = ::std::option::Option::Some(is.read_uint64()?);
                },
                18 => {
                    self.redirect_uri = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.publishedfileid {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.redirect_uri.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.publishedfileid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.redirect_uri.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPublishedFile_Publish_Response {
        CPublishedFile_Publish_Response::new()
    }

    fn clear(&mut self) {
        self.publishedfileid = ::std::option::Option::None;
        self.redirect_uri = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPublishedFile_Publish_Response {
        static instance: CPublishedFile_Publish_Response = CPublishedFile_Publish_Response {
            publishedfileid: ::std::option::Option::None,
            redirect_uri: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPublishedFile_Publish_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPublishedFile_Publish_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPublishedFile_Publish_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPublishedFile_Publish_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPublishedFile_GetDetails_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPublishedFile_GetDetails_Request {
    // message fields
    // @@protoc_insertion_point(field:CPublishedFile_GetDetails_Request.publishedfileids)
    pub publishedfileids: ::std::vec::Vec<u64>,
    // @@protoc_insertion_point(field:CPublishedFile_GetDetails_Request.includetags)
    pub includetags: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CPublishedFile_GetDetails_Request.includeadditionalpreviews)
    pub includeadditionalpreviews: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CPublishedFile_GetDetails_Request.includechildren)
    pub includechildren: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CPublishedFile_GetDetails_Request.includekvtags)
    pub includekvtags: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CPublishedFile_GetDetails_Request.includevotes)
    pub includevotes: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CPublishedFile_GetDetails_Request.short_description)
    pub short_description: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CPublishedFile_GetDetails_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPublishedFile_GetDetails_Request {
    fn default() -> &'a CPublishedFile_GetDetails_Request {
        <CPublishedFile_GetDetails_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPublishedFile_GetDetails_Request {
    pub fn new() -> CPublishedFile_GetDetails_Request {
        ::std::default::Default::default()
    }

    // optional bool includetags = 2;

    pub fn includetags(&self) -> bool {
        self.includetags.unwrap_or(false)
    }

    pub fn clear_includetags(&mut self) {
        self.includetags = ::std::option::Option::None;
    }

    pub fn has_includetags(&self) -> bool {
        self.includetags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_includetags(&mut self, v: bool) {
        self.includetags = ::std::option::Option::Some(v);
    }

    // optional bool includeadditionalpreviews = 3;

    pub fn includeadditionalpreviews(&self) -> bool {
        self.includeadditionalpreviews.unwrap_or(false)
    }

    pub fn clear_includeadditionalpreviews(&mut self) {
        self.includeadditionalpreviews = ::std::option::Option::None;
    }

    pub fn has_includeadditionalpreviews(&self) -> bool {
        self.includeadditionalpreviews.is_some()
    }

    // Param is passed by value, moved
    pub fn set_includeadditionalpreviews(&mut self, v: bool) {
        self.includeadditionalpreviews = ::std::option::Option::Some(v);
    }

    // optional bool includechildren = 4;

    pub fn includechildren(&self) -> bool {
        self.includechildren.unwrap_or(false)
    }

    pub fn clear_includechildren(&mut self) {
        self.includechildren = ::std::option::Option::None;
    }

    pub fn has_includechildren(&self) -> bool {
        self.includechildren.is_some()
    }

    // Param is passed by value, moved
    pub fn set_includechildren(&mut self, v: bool) {
        self.includechildren = ::std::option::Option::Some(v);
    }

    // optional bool includekvtags = 5;

    pub fn includekvtags(&self) -> bool {
        self.includekvtags.unwrap_or(false)
    }

    pub fn clear_includekvtags(&mut self) {
        self.includekvtags = ::std::option::Option::None;
    }

    pub fn has_includekvtags(&self) -> bool {
        self.includekvtags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_includekvtags(&mut self, v: bool) {
        self.includekvtags = ::std::option::Option::Some(v);
    }

    // optional bool includevotes = 6;

    pub fn includevotes(&self) -> bool {
        self.includevotes.unwrap_or(false)
    }

    pub fn clear_includevotes(&mut self) {
        self.includevotes = ::std::option::Option::None;
    }

    pub fn has_includevotes(&self) -> bool {
        self.includevotes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_includevotes(&mut self, v: bool) {
        self.includevotes = ::std::option::Option::Some(v);
    }

    // optional bool short_description = 8;

    pub fn short_description(&self) -> bool {
        self.short_description.unwrap_or(false)
    }

    pub fn clear_short_description(&mut self) {
        self.short_description = ::std::option::Option::None;
    }

    pub fn has_short_description(&self) -> bool {
        self.short_description.is_some()
    }

    // Param is passed by value, moved
    pub fn set_short_description(&mut self, v: bool) {
        self.short_description = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "publishedfileids",
            |m: &CPublishedFile_GetDetails_Request| { &m.publishedfileids },
            |m: &mut CPublishedFile_GetDetails_Request| { &mut m.publishedfileids },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "includetags",
            |m: &CPublishedFile_GetDetails_Request| { &m.includetags },
            |m: &mut CPublishedFile_GetDetails_Request| { &mut m.includetags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "includeadditionalpreviews",
            |m: &CPublishedFile_GetDetails_Request| { &m.includeadditionalpreviews },
            |m: &mut CPublishedFile_GetDetails_Request| { &mut m.includeadditionalpreviews },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "includechildren",
            |m: &CPublishedFile_GetDetails_Request| { &m.includechildren },
            |m: &mut CPublishedFile_GetDetails_Request| { &mut m.includechildren },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "includekvtags",
            |m: &CPublishedFile_GetDetails_Request| { &m.includekvtags },
            |m: &mut CPublishedFile_GetDetails_Request| { &mut m.includekvtags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "includevotes",
            |m: &CPublishedFile_GetDetails_Request| { &m.includevotes },
            |m: &mut CPublishedFile_GetDetails_Request| { &mut m.includevotes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "short_description",
            |m: &CPublishedFile_GetDetails_Request| { &m.short_description },
            |m: &mut CPublishedFile_GetDetails_Request| { &mut m.short_description },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPublishedFile_GetDetails_Request>(
            "CPublishedFile_GetDetails_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPublishedFile_GetDetails_Request {
    const NAME: &'static str = "CPublishedFile_GetDetails_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_fixed64_into(&mut self.publishedfileids)?;
                },
                9 => {
                    self.publishedfileids.push(is.read_fixed64()?);
                },
                16 => {
                    self.includetags = ::std::option::Option::Some(is.read_bool()?);
                },
                24 => {
                    self.includeadditionalpreviews = ::std::option::Option::Some(is.read_bool()?);
                },
                32 => {
                    self.includechildren = ::std::option::Option::Some(is.read_bool()?);
                },
                40 => {
                    self.includekvtags = ::std::option::Option::Some(is.read_bool()?);
                },
                48 => {
                    self.includevotes = ::std::option::Option::Some(is.read_bool()?);
                },
                64 => {
                    self.short_description = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += 9 * self.publishedfileids.len() as u64;
        if let Some(v) = self.includetags {
            my_size += 1 + 1;
        }
        if let Some(v) = self.includeadditionalpreviews {
            my_size += 1 + 1;
        }
        if let Some(v) = self.includechildren {
            my_size += 1 + 1;
        }
        if let Some(v) = self.includekvtags {
            my_size += 1 + 1;
        }
        if let Some(v) = self.includevotes {
            my_size += 1 + 1;
        }
        if let Some(v) = self.short_description {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.publishedfileids {
            os.write_fixed64(1, *v)?;
        };
        if let Some(v) = self.includetags {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.includeadditionalpreviews {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.includechildren {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.includekvtags {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.includevotes {
            os.write_bool(6, v)?;
        }
        if let Some(v) = self.short_description {
            os.write_bool(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPublishedFile_GetDetails_Request {
        CPublishedFile_GetDetails_Request::new()
    }

    fn clear(&mut self) {
        self.publishedfileids.clear();
        self.includetags = ::std::option::Option::None;
        self.includeadditionalpreviews = ::std::option::Option::None;
        self.includechildren = ::std::option::Option::None;
        self.includekvtags = ::std::option::Option::None;
        self.includevotes = ::std::option::Option::None;
        self.short_description = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPublishedFile_GetDetails_Request {
        static instance: CPublishedFile_GetDetails_Request = CPublishedFile_GetDetails_Request {
            publishedfileids: ::std::vec::Vec::new(),
            includetags: ::std::option::Option::None,
            includeadditionalpreviews: ::std::option::Option::None,
            includechildren: ::std::option::Option::None,
            includekvtags: ::std::option::Option::None,
            includevotes: ::std::option::Option::None,
            short_description: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPublishedFile_GetDetails_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPublishedFile_GetDetails_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPublishedFile_GetDetails_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPublishedFile_GetDetails_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:PublishedFileDetails)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PublishedFileDetails {
    // message fields
    // @@protoc_insertion_point(field:PublishedFileDetails.result)
    pub result: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:PublishedFileDetails.publishedfileid)
    pub publishedfileid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:PublishedFileDetails.creator)
    pub creator: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:PublishedFileDetails.creator_appid)
    pub creator_appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:PublishedFileDetails.consumer_appid)
    pub consumer_appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:PublishedFileDetails.consumer_shortcutid)
    pub consumer_shortcutid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:PublishedFileDetails.filename)
    pub filename: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:PublishedFileDetails.file_size)
    pub file_size: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:PublishedFileDetails.preview_file_size)
    pub preview_file_size: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:PublishedFileDetails.file_url)
    pub file_url: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:PublishedFileDetails.preview_url)
    pub preview_url: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:PublishedFileDetails.youtubevideoid)
    pub youtubevideoid: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:PublishedFileDetails.url)
    pub url: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:PublishedFileDetails.hcontent_file)
    pub hcontent_file: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:PublishedFileDetails.hcontent_preview)
    pub hcontent_preview: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:PublishedFileDetails.title)
    pub title: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:PublishedFileDetails.file_description)
    pub file_description: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:PublishedFileDetails.short_description)
    pub short_description: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:PublishedFileDetails.time_created)
    pub time_created: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:PublishedFileDetails.time_updated)
    pub time_updated: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:PublishedFileDetails.visibility)
    pub visibility: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:PublishedFileDetails.flags)
    pub flags: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:PublishedFileDetails.workshop_file)
    pub workshop_file: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:PublishedFileDetails.workshop_accepted)
    pub workshop_accepted: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:PublishedFileDetails.show_subscribe_all)
    pub show_subscribe_all: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:PublishedFileDetails.num_comments_developer)
    pub num_comments_developer: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:PublishedFileDetails.num_comments_public)
    pub num_comments_public: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:PublishedFileDetails.banned)
    pub banned: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:PublishedFileDetails.ban_reason)
    pub ban_reason: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:PublishedFileDetails.banner)
    pub banner: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:PublishedFileDetails.can_be_deleted)
    pub can_be_deleted: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:PublishedFileDetails.incompatible)
    pub incompatible: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:PublishedFileDetails.app_name)
    pub app_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:PublishedFileDetails.file_type)
    pub file_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:PublishedFileDetails.can_subscribe)
    pub can_subscribe: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:PublishedFileDetails.subscriptions)
    pub subscriptions: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:PublishedFileDetails.favorited)
    pub favorited: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:PublishedFileDetails.followers)
    pub followers: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:PublishedFileDetails.lifetime_subscriptions)
    pub lifetime_subscriptions: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:PublishedFileDetails.lifetime_favorited)
    pub lifetime_favorited: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:PublishedFileDetails.lifetime_followers)
    pub lifetime_followers: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:PublishedFileDetails.views)
    pub views: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:PublishedFileDetails.image_width)
    pub image_width: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:PublishedFileDetails.image_height)
    pub image_height: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:PublishedFileDetails.image_url)
    pub image_url: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:PublishedFileDetails.spoiler_tag)
    pub spoiler_tag: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:PublishedFileDetails.shortcutid)
    pub shortcutid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:PublishedFileDetails.shortcutname)
    pub shortcutname: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:PublishedFileDetails.num_children)
    pub num_children: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:PublishedFileDetails.num_reports)
    pub num_reports: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:PublishedFileDetails.previews)
    pub previews: ::std::vec::Vec<published_file_details::Preview>,
    // @@protoc_insertion_point(field:PublishedFileDetails.tags)
    pub tags: ::std::vec::Vec<published_file_details::Tag>,
    // @@protoc_insertion_point(field:PublishedFileDetails.children)
    pub children: ::std::vec::Vec<published_file_details::Child>,
    // @@protoc_insertion_point(field:PublishedFileDetails.kvtags)
    pub kvtags: ::std::vec::Vec<published_file_details::KVTag>,
    // @@protoc_insertion_point(field:PublishedFileDetails.vote_data)
    pub vote_data: ::protobuf::MessageField<published_file_details::VoteData>,
    // @@protoc_insertion_point(field:PublishedFileDetails.time_subscribed)
    pub time_subscribed: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:PublishedFileDetails.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PublishedFileDetails {
    fn default() -> &'a PublishedFileDetails {
        <PublishedFileDetails as ::protobuf::Message>::default_instance()
    }
}

impl PublishedFileDetails {
    pub fn new() -> PublishedFileDetails {
        ::std::default::Default::default()
    }

    // optional uint32 result = 1;

    pub fn result(&self) -> u32 {
        self.result.unwrap_or(0)
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: u32) {
        self.result = ::std::option::Option::Some(v);
    }

    // optional uint64 publishedfileid = 2;

    pub fn publishedfileid(&self) -> u64 {
        self.publishedfileid.unwrap_or(0)
    }

    pub fn clear_publishedfileid(&mut self) {
        self.publishedfileid = ::std::option::Option::None;
    }

    pub fn has_publishedfileid(&self) -> bool {
        self.publishedfileid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_publishedfileid(&mut self, v: u64) {
        self.publishedfileid = ::std::option::Option::Some(v);
    }

    // optional fixed64 creator = 3;

    pub fn creator(&self) -> u64 {
        self.creator.unwrap_or(0)
    }

    pub fn clear_creator(&mut self) {
        self.creator = ::std::option::Option::None;
    }

    pub fn has_creator(&self) -> bool {
        self.creator.is_some()
    }

    // Param is passed by value, moved
    pub fn set_creator(&mut self, v: u64) {
        self.creator = ::std::option::Option::Some(v);
    }

    // optional uint32 creator_appid = 4;

    pub fn creator_appid(&self) -> u32 {
        self.creator_appid.unwrap_or(0)
    }

    pub fn clear_creator_appid(&mut self) {
        self.creator_appid = ::std::option::Option::None;
    }

    pub fn has_creator_appid(&self) -> bool {
        self.creator_appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_creator_appid(&mut self, v: u32) {
        self.creator_appid = ::std::option::Option::Some(v);
    }

    // optional uint32 consumer_appid = 5;

    pub fn consumer_appid(&self) -> u32 {
        self.consumer_appid.unwrap_or(0)
    }

    pub fn clear_consumer_appid(&mut self) {
        self.consumer_appid = ::std::option::Option::None;
    }

    pub fn has_consumer_appid(&self) -> bool {
        self.consumer_appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_consumer_appid(&mut self, v: u32) {
        self.consumer_appid = ::std::option::Option::Some(v);
    }

    // optional uint32 consumer_shortcutid = 6;

    pub fn consumer_shortcutid(&self) -> u32 {
        self.consumer_shortcutid.unwrap_or(0)
    }

    pub fn clear_consumer_shortcutid(&mut self) {
        self.consumer_shortcutid = ::std::option::Option::None;
    }

    pub fn has_consumer_shortcutid(&self) -> bool {
        self.consumer_shortcutid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_consumer_shortcutid(&mut self, v: u32) {
        self.consumer_shortcutid = ::std::option::Option::Some(v);
    }

    // optional string filename = 7;

    pub fn filename(&self) -> &str {
        match self.filename.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_filename(&mut self) {
        self.filename = ::std::option::Option::None;
    }

    pub fn has_filename(&self) -> bool {
        self.filename.is_some()
    }

    // Param is passed by value, moved
    pub fn set_filename(&mut self, v: ::std::string::String) {
        self.filename = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filename(&mut self) -> &mut ::std::string::String {
        if self.filename.is_none() {
            self.filename = ::std::option::Option::Some(::std::string::String::new());
        }
        self.filename.as_mut().unwrap()
    }

    // Take field
    pub fn take_filename(&mut self) -> ::std::string::String {
        self.filename.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 file_size = 8;

    pub fn file_size(&self) -> u64 {
        self.file_size.unwrap_or(0)
    }

    pub fn clear_file_size(&mut self) {
        self.file_size = ::std::option::Option::None;
    }

    pub fn has_file_size(&self) -> bool {
        self.file_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_size(&mut self, v: u64) {
        self.file_size = ::std::option::Option::Some(v);
    }

    // optional uint64 preview_file_size = 9;

    pub fn preview_file_size(&self) -> u64 {
        self.preview_file_size.unwrap_or(0)
    }

    pub fn clear_preview_file_size(&mut self) {
        self.preview_file_size = ::std::option::Option::None;
    }

    pub fn has_preview_file_size(&self) -> bool {
        self.preview_file_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_preview_file_size(&mut self, v: u64) {
        self.preview_file_size = ::std::option::Option::Some(v);
    }

    // optional string file_url = 10;

    pub fn file_url(&self) -> &str {
        match self.file_url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_file_url(&mut self) {
        self.file_url = ::std::option::Option::None;
    }

    pub fn has_file_url(&self) -> bool {
        self.file_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_url(&mut self, v: ::std::string::String) {
        self.file_url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_url(&mut self) -> &mut ::std::string::String {
        if self.file_url.is_none() {
            self.file_url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.file_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_file_url(&mut self) -> ::std::string::String {
        self.file_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string preview_url = 11;

    pub fn preview_url(&self) -> &str {
        match self.preview_url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_preview_url(&mut self) {
        self.preview_url = ::std::option::Option::None;
    }

    pub fn has_preview_url(&self) -> bool {
        self.preview_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_preview_url(&mut self, v: ::std::string::String) {
        self.preview_url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_preview_url(&mut self) -> &mut ::std::string::String {
        if self.preview_url.is_none() {
            self.preview_url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.preview_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_preview_url(&mut self) -> ::std::string::String {
        self.preview_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string youtubevideoid = 12;

    pub fn youtubevideoid(&self) -> &str {
        match self.youtubevideoid.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_youtubevideoid(&mut self) {
        self.youtubevideoid = ::std::option::Option::None;
    }

    pub fn has_youtubevideoid(&self) -> bool {
        self.youtubevideoid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_youtubevideoid(&mut self, v: ::std::string::String) {
        self.youtubevideoid = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_youtubevideoid(&mut self) -> &mut ::std::string::String {
        if self.youtubevideoid.is_none() {
            self.youtubevideoid = ::std::option::Option::Some(::std::string::String::new());
        }
        self.youtubevideoid.as_mut().unwrap()
    }

    // Take field
    pub fn take_youtubevideoid(&mut self) -> ::std::string::String {
        self.youtubevideoid.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string url = 13;

    pub fn url(&self) -> &str {
        match self.url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_url(&mut self) {
        self.url = ::std::option::Option::None;
    }

    pub fn has_url(&self) -> bool {
        self.url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_url(&mut self, v: ::std::string::String) {
        self.url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_url(&mut self) -> &mut ::std::string::String {
        if self.url.is_none() {
            self.url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.url.as_mut().unwrap()
    }

    // Take field
    pub fn take_url(&mut self) -> ::std::string::String {
        self.url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional fixed64 hcontent_file = 14;

    pub fn hcontent_file(&self) -> u64 {
        self.hcontent_file.unwrap_or(0)
    }

    pub fn clear_hcontent_file(&mut self) {
        self.hcontent_file = ::std::option::Option::None;
    }

    pub fn has_hcontent_file(&self) -> bool {
        self.hcontent_file.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hcontent_file(&mut self, v: u64) {
        self.hcontent_file = ::std::option::Option::Some(v);
    }

    // optional fixed64 hcontent_preview = 15;

    pub fn hcontent_preview(&self) -> u64 {
        self.hcontent_preview.unwrap_or(0)
    }

    pub fn clear_hcontent_preview(&mut self) {
        self.hcontent_preview = ::std::option::Option::None;
    }

    pub fn has_hcontent_preview(&self) -> bool {
        self.hcontent_preview.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hcontent_preview(&mut self, v: u64) {
        self.hcontent_preview = ::std::option::Option::Some(v);
    }

    // optional string title = 16;

    pub fn title(&self) -> &str {
        match self.title.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_title(&mut self) {
        self.title = ::std::option::Option::None;
    }

    pub fn has_title(&self) -> bool {
        self.title.is_some()
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        if self.title.is_none() {
            self.title = ::std::option::Option::Some(::std::string::String::new());
        }
        self.title.as_mut().unwrap()
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        self.title.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string file_description = 17;

    pub fn file_description(&self) -> &str {
        match self.file_description.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_file_description(&mut self) {
        self.file_description = ::std::option::Option::None;
    }

    pub fn has_file_description(&self) -> bool {
        self.file_description.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_description(&mut self, v: ::std::string::String) {
        self.file_description = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_description(&mut self) -> &mut ::std::string::String {
        if self.file_description.is_none() {
            self.file_description = ::std::option::Option::Some(::std::string::String::new());
        }
        self.file_description.as_mut().unwrap()
    }

    // Take field
    pub fn take_file_description(&mut self) -> ::std::string::String {
        self.file_description.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string short_description = 18;

    pub fn short_description(&self) -> &str {
        match self.short_description.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_short_description(&mut self) {
        self.short_description = ::std::option::Option::None;
    }

    pub fn has_short_description(&self) -> bool {
        self.short_description.is_some()
    }

    // Param is passed by value, moved
    pub fn set_short_description(&mut self, v: ::std::string::String) {
        self.short_description = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_short_description(&mut self) -> &mut ::std::string::String {
        if self.short_description.is_none() {
            self.short_description = ::std::option::Option::Some(::std::string::String::new());
        }
        self.short_description.as_mut().unwrap()
    }

    // Take field
    pub fn take_short_description(&mut self) -> ::std::string::String {
        self.short_description.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 time_created = 19;

    pub fn time_created(&self) -> u32 {
        self.time_created.unwrap_or(0)
    }

    pub fn clear_time_created(&mut self) {
        self.time_created = ::std::option::Option::None;
    }

    pub fn has_time_created(&self) -> bool {
        self.time_created.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_created(&mut self, v: u32) {
        self.time_created = ::std::option::Option::Some(v);
    }

    // optional uint32 time_updated = 20;

    pub fn time_updated(&self) -> u32 {
        self.time_updated.unwrap_or(0)
    }

    pub fn clear_time_updated(&mut self) {
        self.time_updated = ::std::option::Option::None;
    }

    pub fn has_time_updated(&self) -> bool {
        self.time_updated.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_updated(&mut self, v: u32) {
        self.time_updated = ::std::option::Option::Some(v);
    }

    // optional uint32 visibility = 21;

    pub fn visibility(&self) -> u32 {
        self.visibility.unwrap_or(0)
    }

    pub fn clear_visibility(&mut self) {
        self.visibility = ::std::option::Option::None;
    }

    pub fn has_visibility(&self) -> bool {
        self.visibility.is_some()
    }

    // Param is passed by value, moved
    pub fn set_visibility(&mut self, v: u32) {
        self.visibility = ::std::option::Option::Some(v);
    }

    // optional uint32 flags = 22;

    pub fn flags(&self) -> u32 {
        self.flags.unwrap_or(0)
    }

    pub fn clear_flags(&mut self) {
        self.flags = ::std::option::Option::None;
    }

    pub fn has_flags(&self) -> bool {
        self.flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_flags(&mut self, v: u32) {
        self.flags = ::std::option::Option::Some(v);
    }

    // optional bool workshop_file = 23;

    pub fn workshop_file(&self) -> bool {
        self.workshop_file.unwrap_or(false)
    }

    pub fn clear_workshop_file(&mut self) {
        self.workshop_file = ::std::option::Option::None;
    }

    pub fn has_workshop_file(&self) -> bool {
        self.workshop_file.is_some()
    }

    // Param is passed by value, moved
    pub fn set_workshop_file(&mut self, v: bool) {
        self.workshop_file = ::std::option::Option::Some(v);
    }

    // optional bool workshop_accepted = 24;

    pub fn workshop_accepted(&self) -> bool {
        self.workshop_accepted.unwrap_or(false)
    }

    pub fn clear_workshop_accepted(&mut self) {
        self.workshop_accepted = ::std::option::Option::None;
    }

    pub fn has_workshop_accepted(&self) -> bool {
        self.workshop_accepted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_workshop_accepted(&mut self, v: bool) {
        self.workshop_accepted = ::std::option::Option::Some(v);
    }

    // optional bool show_subscribe_all = 25;

    pub fn show_subscribe_all(&self) -> bool {
        self.show_subscribe_all.unwrap_or(false)
    }

    pub fn clear_show_subscribe_all(&mut self) {
        self.show_subscribe_all = ::std::option::Option::None;
    }

    pub fn has_show_subscribe_all(&self) -> bool {
        self.show_subscribe_all.is_some()
    }

    // Param is passed by value, moved
    pub fn set_show_subscribe_all(&mut self, v: bool) {
        self.show_subscribe_all = ::std::option::Option::Some(v);
    }

    // optional int32 num_comments_developer = 26;

    pub fn num_comments_developer(&self) -> i32 {
        self.num_comments_developer.unwrap_or(0)
    }

    pub fn clear_num_comments_developer(&mut self) {
        self.num_comments_developer = ::std::option::Option::None;
    }

    pub fn has_num_comments_developer(&self) -> bool {
        self.num_comments_developer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_comments_developer(&mut self, v: i32) {
        self.num_comments_developer = ::std::option::Option::Some(v);
    }

    // optional int32 num_comments_public = 27;

    pub fn num_comments_public(&self) -> i32 {
        self.num_comments_public.unwrap_or(0)
    }

    pub fn clear_num_comments_public(&mut self) {
        self.num_comments_public = ::std::option::Option::None;
    }

    pub fn has_num_comments_public(&self) -> bool {
        self.num_comments_public.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_comments_public(&mut self, v: i32) {
        self.num_comments_public = ::std::option::Option::Some(v);
    }

    // optional bool banned = 28;

    pub fn banned(&self) -> bool {
        self.banned.unwrap_or(false)
    }

    pub fn clear_banned(&mut self) {
        self.banned = ::std::option::Option::None;
    }

    pub fn has_banned(&self) -> bool {
        self.banned.is_some()
    }

    // Param is passed by value, moved
    pub fn set_banned(&mut self, v: bool) {
        self.banned = ::std::option::Option::Some(v);
    }

    // optional string ban_reason = 29;

    pub fn ban_reason(&self) -> &str {
        match self.ban_reason.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_ban_reason(&mut self) {
        self.ban_reason = ::std::option::Option::None;
    }

    pub fn has_ban_reason(&self) -> bool {
        self.ban_reason.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ban_reason(&mut self, v: ::std::string::String) {
        self.ban_reason = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ban_reason(&mut self) -> &mut ::std::string::String {
        if self.ban_reason.is_none() {
            self.ban_reason = ::std::option::Option::Some(::std::string::String::new());
        }
        self.ban_reason.as_mut().unwrap()
    }

    // Take field
    pub fn take_ban_reason(&mut self) -> ::std::string::String {
        self.ban_reason.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional fixed64 banner = 30;

    pub fn banner(&self) -> u64 {
        self.banner.unwrap_or(0)
    }

    pub fn clear_banner(&mut self) {
        self.banner = ::std::option::Option::None;
    }

    pub fn has_banner(&self) -> bool {
        self.banner.is_some()
    }

    // Param is passed by value, moved
    pub fn set_banner(&mut self, v: u64) {
        self.banner = ::std::option::Option::Some(v);
    }

    // optional bool can_be_deleted = 31;

    pub fn can_be_deleted(&self) -> bool {
        self.can_be_deleted.unwrap_or(false)
    }

    pub fn clear_can_be_deleted(&mut self) {
        self.can_be_deleted = ::std::option::Option::None;
    }

    pub fn has_can_be_deleted(&self) -> bool {
        self.can_be_deleted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_can_be_deleted(&mut self, v: bool) {
        self.can_be_deleted = ::std::option::Option::Some(v);
    }

    // optional bool incompatible = 32;

    pub fn incompatible(&self) -> bool {
        self.incompatible.unwrap_or(false)
    }

    pub fn clear_incompatible(&mut self) {
        self.incompatible = ::std::option::Option::None;
    }

    pub fn has_incompatible(&self) -> bool {
        self.incompatible.is_some()
    }

    // Param is passed by value, moved
    pub fn set_incompatible(&mut self, v: bool) {
        self.incompatible = ::std::option::Option::Some(v);
    }

    // optional string app_name = 33;

    pub fn app_name(&self) -> &str {
        match self.app_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_app_name(&mut self) {
        self.app_name = ::std::option::Option::None;
    }

    pub fn has_app_name(&self) -> bool {
        self.app_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_name(&mut self, v: ::std::string::String) {
        self.app_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app_name(&mut self) -> &mut ::std::string::String {
        if self.app_name.is_none() {
            self.app_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.app_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_app_name(&mut self) -> ::std::string::String {
        self.app_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 file_type = 34;

    pub fn file_type(&self) -> u32 {
        self.file_type.unwrap_or(0)
    }

    pub fn clear_file_type(&mut self) {
        self.file_type = ::std::option::Option::None;
    }

    pub fn has_file_type(&self) -> bool {
        self.file_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_type(&mut self, v: u32) {
        self.file_type = ::std::option::Option::Some(v);
    }

    // optional bool can_subscribe = 35;

    pub fn can_subscribe(&self) -> bool {
        self.can_subscribe.unwrap_or(false)
    }

    pub fn clear_can_subscribe(&mut self) {
        self.can_subscribe = ::std::option::Option::None;
    }

    pub fn has_can_subscribe(&self) -> bool {
        self.can_subscribe.is_some()
    }

    // Param is passed by value, moved
    pub fn set_can_subscribe(&mut self, v: bool) {
        self.can_subscribe = ::std::option::Option::Some(v);
    }

    // optional uint32 subscriptions = 36;

    pub fn subscriptions(&self) -> u32 {
        self.subscriptions.unwrap_or(0)
    }

    pub fn clear_subscriptions(&mut self) {
        self.subscriptions = ::std::option::Option::None;
    }

    pub fn has_subscriptions(&self) -> bool {
        self.subscriptions.is_some()
    }

    // Param is passed by value, moved
    pub fn set_subscriptions(&mut self, v: u32) {
        self.subscriptions = ::std::option::Option::Some(v);
    }

    // optional uint32 favorited = 37;

    pub fn favorited(&self) -> u32 {
        self.favorited.unwrap_or(0)
    }

    pub fn clear_favorited(&mut self) {
        self.favorited = ::std::option::Option::None;
    }

    pub fn has_favorited(&self) -> bool {
        self.favorited.is_some()
    }

    // Param is passed by value, moved
    pub fn set_favorited(&mut self, v: u32) {
        self.favorited = ::std::option::Option::Some(v);
    }

    // optional uint32 followers = 38;

    pub fn followers(&self) -> u32 {
        self.followers.unwrap_or(0)
    }

    pub fn clear_followers(&mut self) {
        self.followers = ::std::option::Option::None;
    }

    pub fn has_followers(&self) -> bool {
        self.followers.is_some()
    }

    // Param is passed by value, moved
    pub fn set_followers(&mut self, v: u32) {
        self.followers = ::std::option::Option::Some(v);
    }

    // optional uint32 lifetime_subscriptions = 39;

    pub fn lifetime_subscriptions(&self) -> u32 {
        self.lifetime_subscriptions.unwrap_or(0)
    }

    pub fn clear_lifetime_subscriptions(&mut self) {
        self.lifetime_subscriptions = ::std::option::Option::None;
    }

    pub fn has_lifetime_subscriptions(&self) -> bool {
        self.lifetime_subscriptions.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lifetime_subscriptions(&mut self, v: u32) {
        self.lifetime_subscriptions = ::std::option::Option::Some(v);
    }

    // optional uint32 lifetime_favorited = 40;

    pub fn lifetime_favorited(&self) -> u32 {
        self.lifetime_favorited.unwrap_or(0)
    }

    pub fn clear_lifetime_favorited(&mut self) {
        self.lifetime_favorited = ::std::option::Option::None;
    }

    pub fn has_lifetime_favorited(&self) -> bool {
        self.lifetime_favorited.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lifetime_favorited(&mut self, v: u32) {
        self.lifetime_favorited = ::std::option::Option::Some(v);
    }

    // optional uint32 lifetime_followers = 41;

    pub fn lifetime_followers(&self) -> u32 {
        self.lifetime_followers.unwrap_or(0)
    }

    pub fn clear_lifetime_followers(&mut self) {
        self.lifetime_followers = ::std::option::Option::None;
    }

    pub fn has_lifetime_followers(&self) -> bool {
        self.lifetime_followers.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lifetime_followers(&mut self, v: u32) {
        self.lifetime_followers = ::std::option::Option::Some(v);
    }

    // optional uint32 views = 42;

    pub fn views(&self) -> u32 {
        self.views.unwrap_or(0)
    }

    pub fn clear_views(&mut self) {
        self.views = ::std::option::Option::None;
    }

    pub fn has_views(&self) -> bool {
        self.views.is_some()
    }

    // Param is passed by value, moved
    pub fn set_views(&mut self, v: u32) {
        self.views = ::std::option::Option::Some(v);
    }

    // optional uint32 image_width = 43;

    pub fn image_width(&self) -> u32 {
        self.image_width.unwrap_or(0)
    }

    pub fn clear_image_width(&mut self) {
        self.image_width = ::std::option::Option::None;
    }

    pub fn has_image_width(&self) -> bool {
        self.image_width.is_some()
    }

    // Param is passed by value, moved
    pub fn set_image_width(&mut self, v: u32) {
        self.image_width = ::std::option::Option::Some(v);
    }

    // optional uint32 image_height = 44;

    pub fn image_height(&self) -> u32 {
        self.image_height.unwrap_or(0)
    }

    pub fn clear_image_height(&mut self) {
        self.image_height = ::std::option::Option::None;
    }

    pub fn has_image_height(&self) -> bool {
        self.image_height.is_some()
    }

    // Param is passed by value, moved
    pub fn set_image_height(&mut self, v: u32) {
        self.image_height = ::std::option::Option::Some(v);
    }

    // optional string image_url = 45;

    pub fn image_url(&self) -> &str {
        match self.image_url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_image_url(&mut self) {
        self.image_url = ::std::option::Option::None;
    }

    pub fn has_image_url(&self) -> bool {
        self.image_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_image_url(&mut self, v: ::std::string::String) {
        self.image_url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_image_url(&mut self) -> &mut ::std::string::String {
        if self.image_url.is_none() {
            self.image_url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.image_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_image_url(&mut self) -> ::std::string::String {
        self.image_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool spoiler_tag = 46;

    pub fn spoiler_tag(&self) -> bool {
        self.spoiler_tag.unwrap_or(false)
    }

    pub fn clear_spoiler_tag(&mut self) {
        self.spoiler_tag = ::std::option::Option::None;
    }

    pub fn has_spoiler_tag(&self) -> bool {
        self.spoiler_tag.is_some()
    }

    // Param is passed by value, moved
    pub fn set_spoiler_tag(&mut self, v: bool) {
        self.spoiler_tag = ::std::option::Option::Some(v);
    }

    // optional uint32 shortcutid = 47;

    pub fn shortcutid(&self) -> u32 {
        self.shortcutid.unwrap_or(0)
    }

    pub fn clear_shortcutid(&mut self) {
        self.shortcutid = ::std::option::Option::None;
    }

    pub fn has_shortcutid(&self) -> bool {
        self.shortcutid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_shortcutid(&mut self, v: u32) {
        self.shortcutid = ::std::option::Option::Some(v);
    }

    // optional string shortcutname = 48;

    pub fn shortcutname(&self) -> &str {
        match self.shortcutname.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_shortcutname(&mut self) {
        self.shortcutname = ::std::option::Option::None;
    }

    pub fn has_shortcutname(&self) -> bool {
        self.shortcutname.is_some()
    }

    // Param is passed by value, moved
    pub fn set_shortcutname(&mut self, v: ::std::string::String) {
        self.shortcutname = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_shortcutname(&mut self) -> &mut ::std::string::String {
        if self.shortcutname.is_none() {
            self.shortcutname = ::std::option::Option::Some(::std::string::String::new());
        }
        self.shortcutname.as_mut().unwrap()
    }

    // Take field
    pub fn take_shortcutname(&mut self) -> ::std::string::String {
        self.shortcutname.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 num_children = 49;

    pub fn num_children(&self) -> u32 {
        self.num_children.unwrap_or(0)
    }

    pub fn clear_num_children(&mut self) {
        self.num_children = ::std::option::Option::None;
    }

    pub fn has_num_children(&self) -> bool {
        self.num_children.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_children(&mut self, v: u32) {
        self.num_children = ::std::option::Option::Some(v);
    }

    // optional uint32 num_reports = 50;

    pub fn num_reports(&self) -> u32 {
        self.num_reports.unwrap_or(0)
    }

    pub fn clear_num_reports(&mut self) {
        self.num_reports = ::std::option::Option::None;
    }

    pub fn has_num_reports(&self) -> bool {
        self.num_reports.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_reports(&mut self, v: u32) {
        self.num_reports = ::std::option::Option::Some(v);
    }

    // optional uint32 time_subscribed = 56;

    pub fn time_subscribed(&self) -> u32 {
        self.time_subscribed.unwrap_or(0)
    }

    pub fn clear_time_subscribed(&mut self) {
        self.time_subscribed = ::std::option::Option::None;
    }

    pub fn has_time_subscribed(&self) -> bool {
        self.time_subscribed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_subscribed(&mut self, v: u32) {
        self.time_subscribed = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(56);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "result",
            |m: &PublishedFileDetails| { &m.result },
            |m: &mut PublishedFileDetails| { &mut m.result },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "publishedfileid",
            |m: &PublishedFileDetails| { &m.publishedfileid },
            |m: &mut PublishedFileDetails| { &mut m.publishedfileid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "creator",
            |m: &PublishedFileDetails| { &m.creator },
            |m: &mut PublishedFileDetails| { &mut m.creator },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "creator_appid",
            |m: &PublishedFileDetails| { &m.creator_appid },
            |m: &mut PublishedFileDetails| { &mut m.creator_appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "consumer_appid",
            |m: &PublishedFileDetails| { &m.consumer_appid },
            |m: &mut PublishedFileDetails| { &mut m.consumer_appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "consumer_shortcutid",
            |m: &PublishedFileDetails| { &m.consumer_shortcutid },
            |m: &mut PublishedFileDetails| { &mut m.consumer_shortcutid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "filename",
            |m: &PublishedFileDetails| { &m.filename },
            |m: &mut PublishedFileDetails| { &mut m.filename },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "file_size",
            |m: &PublishedFileDetails| { &m.file_size },
            |m: &mut PublishedFileDetails| { &mut m.file_size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "preview_file_size",
            |m: &PublishedFileDetails| { &m.preview_file_size },
            |m: &mut PublishedFileDetails| { &mut m.preview_file_size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "file_url",
            |m: &PublishedFileDetails| { &m.file_url },
            |m: &mut PublishedFileDetails| { &mut m.file_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "preview_url",
            |m: &PublishedFileDetails| { &m.preview_url },
            |m: &mut PublishedFileDetails| { &mut m.preview_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "youtubevideoid",
            |m: &PublishedFileDetails| { &m.youtubevideoid },
            |m: &mut PublishedFileDetails| { &mut m.youtubevideoid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "url",
            |m: &PublishedFileDetails| { &m.url },
            |m: &mut PublishedFileDetails| { &mut m.url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "hcontent_file",
            |m: &PublishedFileDetails| { &m.hcontent_file },
            |m: &mut PublishedFileDetails| { &mut m.hcontent_file },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "hcontent_preview",
            |m: &PublishedFileDetails| { &m.hcontent_preview },
            |m: &mut PublishedFileDetails| { &mut m.hcontent_preview },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "title",
            |m: &PublishedFileDetails| { &m.title },
            |m: &mut PublishedFileDetails| { &mut m.title },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "file_description",
            |m: &PublishedFileDetails| { &m.file_description },
            |m: &mut PublishedFileDetails| { &mut m.file_description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "short_description",
            |m: &PublishedFileDetails| { &m.short_description },
            |m: &mut PublishedFileDetails| { &mut m.short_description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_created",
            |m: &PublishedFileDetails| { &m.time_created },
            |m: &mut PublishedFileDetails| { &mut m.time_created },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_updated",
            |m: &PublishedFileDetails| { &m.time_updated },
            |m: &mut PublishedFileDetails| { &mut m.time_updated },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "visibility",
            |m: &PublishedFileDetails| { &m.visibility },
            |m: &mut PublishedFileDetails| { &mut m.visibility },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "flags",
            |m: &PublishedFileDetails| { &m.flags },
            |m: &mut PublishedFileDetails| { &mut m.flags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "workshop_file",
            |m: &PublishedFileDetails| { &m.workshop_file },
            |m: &mut PublishedFileDetails| { &mut m.workshop_file },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "workshop_accepted",
            |m: &PublishedFileDetails| { &m.workshop_accepted },
            |m: &mut PublishedFileDetails| { &mut m.workshop_accepted },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "show_subscribe_all",
            |m: &PublishedFileDetails| { &m.show_subscribe_all },
            |m: &mut PublishedFileDetails| { &mut m.show_subscribe_all },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "num_comments_developer",
            |m: &PublishedFileDetails| { &m.num_comments_developer },
            |m: &mut PublishedFileDetails| { &mut m.num_comments_developer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "num_comments_public",
            |m: &PublishedFileDetails| { &m.num_comments_public },
            |m: &mut PublishedFileDetails| { &mut m.num_comments_public },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "banned",
            |m: &PublishedFileDetails| { &m.banned },
            |m: &mut PublishedFileDetails| { &mut m.banned },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ban_reason",
            |m: &PublishedFileDetails| { &m.ban_reason },
            |m: &mut PublishedFileDetails| { &mut m.ban_reason },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "banner",
            |m: &PublishedFileDetails| { &m.banner },
            |m: &mut PublishedFileDetails| { &mut m.banner },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "can_be_deleted",
            |m: &PublishedFileDetails| { &m.can_be_deleted },
            |m: &mut PublishedFileDetails| { &mut m.can_be_deleted },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "incompatible",
            |m: &PublishedFileDetails| { &m.incompatible },
            |m: &mut PublishedFileDetails| { &mut m.incompatible },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "app_name",
            |m: &PublishedFileDetails| { &m.app_name },
            |m: &mut PublishedFileDetails| { &mut m.app_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "file_type",
            |m: &PublishedFileDetails| { &m.file_type },
            |m: &mut PublishedFileDetails| { &mut m.file_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "can_subscribe",
            |m: &PublishedFileDetails| { &m.can_subscribe },
            |m: &mut PublishedFileDetails| { &mut m.can_subscribe },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "subscriptions",
            |m: &PublishedFileDetails| { &m.subscriptions },
            |m: &mut PublishedFileDetails| { &mut m.subscriptions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "favorited",
            |m: &PublishedFileDetails| { &m.favorited },
            |m: &mut PublishedFileDetails| { &mut m.favorited },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "followers",
            |m: &PublishedFileDetails| { &m.followers },
            |m: &mut PublishedFileDetails| { &mut m.followers },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lifetime_subscriptions",
            |m: &PublishedFileDetails| { &m.lifetime_subscriptions },
            |m: &mut PublishedFileDetails| { &mut m.lifetime_subscriptions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lifetime_favorited",
            |m: &PublishedFileDetails| { &m.lifetime_favorited },
            |m: &mut PublishedFileDetails| { &mut m.lifetime_favorited },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lifetime_followers",
            |m: &PublishedFileDetails| { &m.lifetime_followers },
            |m: &mut PublishedFileDetails| { &mut m.lifetime_followers },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "views",
            |m: &PublishedFileDetails| { &m.views },
            |m: &mut PublishedFileDetails| { &mut m.views },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "image_width",
            |m: &PublishedFileDetails| { &m.image_width },
            |m: &mut PublishedFileDetails| { &mut m.image_width },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "image_height",
            |m: &PublishedFileDetails| { &m.image_height },
            |m: &mut PublishedFileDetails| { &mut m.image_height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "image_url",
            |m: &PublishedFileDetails| { &m.image_url },
            |m: &mut PublishedFileDetails| { &mut m.image_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "spoiler_tag",
            |m: &PublishedFileDetails| { &m.spoiler_tag },
            |m: &mut PublishedFileDetails| { &mut m.spoiler_tag },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "shortcutid",
            |m: &PublishedFileDetails| { &m.shortcutid },
            |m: &mut PublishedFileDetails| { &mut m.shortcutid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "shortcutname",
            |m: &PublishedFileDetails| { &m.shortcutname },
            |m: &mut PublishedFileDetails| { &mut m.shortcutname },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "num_children",
            |m: &PublishedFileDetails| { &m.num_children },
            |m: &mut PublishedFileDetails| { &mut m.num_children },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "num_reports",
            |m: &PublishedFileDetails| { &m.num_reports },
            |m: &mut PublishedFileDetails| { &mut m.num_reports },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "previews",
            |m: &PublishedFileDetails| { &m.previews },
            |m: &mut PublishedFileDetails| { &mut m.previews },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "tags",
            |m: &PublishedFileDetails| { &m.tags },
            |m: &mut PublishedFileDetails| { &mut m.tags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "children",
            |m: &PublishedFileDetails| { &m.children },
            |m: &mut PublishedFileDetails| { &mut m.children },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "kvtags",
            |m: &PublishedFileDetails| { &m.kvtags },
            |m: &mut PublishedFileDetails| { &mut m.kvtags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, published_file_details::VoteData>(
            "vote_data",
            |m: &PublishedFileDetails| { &m.vote_data },
            |m: &mut PublishedFileDetails| { &mut m.vote_data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_subscribed",
            |m: &PublishedFileDetails| { &m.time_subscribed },
            |m: &mut PublishedFileDetails| { &mut m.time_subscribed },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PublishedFileDetails>(
            "PublishedFileDetails",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PublishedFileDetails {
    const NAME: &'static str = "PublishedFileDetails";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.publishedfileid = ::std::option::Option::Some(is.read_uint64()?);
                },
                25 => {
                    self.creator = ::std::option::Option::Some(is.read_fixed64()?);
                },
                32 => {
                    self.creator_appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.consumer_appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.consumer_shortcutid = ::std::option::Option::Some(is.read_uint32()?);
                },
                58 => {
                    self.filename = ::std::option::Option::Some(is.read_string()?);
                },
                64 => {
                    self.file_size = ::std::option::Option::Some(is.read_uint64()?);
                },
                72 => {
                    self.preview_file_size = ::std::option::Option::Some(is.read_uint64()?);
                },
                82 => {
                    self.file_url = ::std::option::Option::Some(is.read_string()?);
                },
                90 => {
                    self.preview_url = ::std::option::Option::Some(is.read_string()?);
                },
                98 => {
                    self.youtubevideoid = ::std::option::Option::Some(is.read_string()?);
                },
                106 => {
                    self.url = ::std::option::Option::Some(is.read_string()?);
                },
                113 => {
                    self.hcontent_file = ::std::option::Option::Some(is.read_fixed64()?);
                },
                121 => {
                    self.hcontent_preview = ::std::option::Option::Some(is.read_fixed64()?);
                },
                130 => {
                    self.title = ::std::option::Option::Some(is.read_string()?);
                },
                138 => {
                    self.file_description = ::std::option::Option::Some(is.read_string()?);
                },
                146 => {
                    self.short_description = ::std::option::Option::Some(is.read_string()?);
                },
                152 => {
                    self.time_created = ::std::option::Option::Some(is.read_uint32()?);
                },
                160 => {
                    self.time_updated = ::std::option::Option::Some(is.read_uint32()?);
                },
                168 => {
                    self.visibility = ::std::option::Option::Some(is.read_uint32()?);
                },
                176 => {
                    self.flags = ::std::option::Option::Some(is.read_uint32()?);
                },
                184 => {
                    self.workshop_file = ::std::option::Option::Some(is.read_bool()?);
                },
                192 => {
                    self.workshop_accepted = ::std::option::Option::Some(is.read_bool()?);
                },
                200 => {
                    self.show_subscribe_all = ::std::option::Option::Some(is.read_bool()?);
                },
                208 => {
                    self.num_comments_developer = ::std::option::Option::Some(is.read_int32()?);
                },
                216 => {
                    self.num_comments_public = ::std::option::Option::Some(is.read_int32()?);
                },
                224 => {
                    self.banned = ::std::option::Option::Some(is.read_bool()?);
                },
                234 => {
                    self.ban_reason = ::std::option::Option::Some(is.read_string()?);
                },
                241 => {
                    self.banner = ::std::option::Option::Some(is.read_fixed64()?);
                },
                248 => {
                    self.can_be_deleted = ::std::option::Option::Some(is.read_bool()?);
                },
                256 => {
                    self.incompatible = ::std::option::Option::Some(is.read_bool()?);
                },
                266 => {
                    self.app_name = ::std::option::Option::Some(is.read_string()?);
                },
                272 => {
                    self.file_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                280 => {
                    self.can_subscribe = ::std::option::Option::Some(is.read_bool()?);
                },
                288 => {
                    self.subscriptions = ::std::option::Option::Some(is.read_uint32()?);
                },
                296 => {
                    self.favorited = ::std::option::Option::Some(is.read_uint32()?);
                },
                304 => {
                    self.followers = ::std::option::Option::Some(is.read_uint32()?);
                },
                312 => {
                    self.lifetime_subscriptions = ::std::option::Option::Some(is.read_uint32()?);
                },
                320 => {
                    self.lifetime_favorited = ::std::option::Option::Some(is.read_uint32()?);
                },
                328 => {
                    self.lifetime_followers = ::std::option::Option::Some(is.read_uint32()?);
                },
                336 => {
                    self.views = ::std::option::Option::Some(is.read_uint32()?);
                },
                344 => {
                    self.image_width = ::std::option::Option::Some(is.read_uint32()?);
                },
                352 => {
                    self.image_height = ::std::option::Option::Some(is.read_uint32()?);
                },
                362 => {
                    self.image_url = ::std::option::Option::Some(is.read_string()?);
                },
                368 => {
                    self.spoiler_tag = ::std::option::Option::Some(is.read_bool()?);
                },
                376 => {
                    self.shortcutid = ::std::option::Option::Some(is.read_uint32()?);
                },
                386 => {
                    self.shortcutname = ::std::option::Option::Some(is.read_string()?);
                },
                392 => {
                    self.num_children = ::std::option::Option::Some(is.read_uint32()?);
                },
                400 => {
                    self.num_reports = ::std::option::Option::Some(is.read_uint32()?);
                },
                410 => {
                    self.previews.push(is.read_message()?);
                },
                418 => {
                    self.tags.push(is.read_message()?);
                },
                426 => {
                    self.children.push(is.read_message()?);
                },
                434 => {
                    self.kvtags.push(is.read_message()?);
                },
                442 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.vote_data)?;
                },
                448 => {
                    self.time_subscribed = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.publishedfileid {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.creator {
            my_size += 1 + 8;
        }
        if let Some(v) = self.creator_appid {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.consumer_appid {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.consumer_shortcutid {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.filename.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.file_size {
            my_size += ::protobuf::rt::uint64_size(8, v);
        }
        if let Some(v) = self.preview_file_size {
            my_size += ::protobuf::rt::uint64_size(9, v);
        }
        if let Some(v) = self.file_url.as_ref() {
            my_size += ::protobuf::rt::string_size(10, &v);
        }
        if let Some(v) = self.preview_url.as_ref() {
            my_size += ::protobuf::rt::string_size(11, &v);
        }
        if let Some(v) = self.youtubevideoid.as_ref() {
            my_size += ::protobuf::rt::string_size(12, &v);
        }
        if let Some(v) = self.url.as_ref() {
            my_size += ::protobuf::rt::string_size(13, &v);
        }
        if let Some(v) = self.hcontent_file {
            my_size += 1 + 8;
        }
        if let Some(v) = self.hcontent_preview {
            my_size += 1 + 8;
        }
        if let Some(v) = self.title.as_ref() {
            my_size += ::protobuf::rt::string_size(16, &v);
        }
        if let Some(v) = self.file_description.as_ref() {
            my_size += ::protobuf::rt::string_size(17, &v);
        }
        if let Some(v) = self.short_description.as_ref() {
            my_size += ::protobuf::rt::string_size(18, &v);
        }
        if let Some(v) = self.time_created {
            my_size += ::protobuf::rt::uint32_size(19, v);
        }
        if let Some(v) = self.time_updated {
            my_size += ::protobuf::rt::uint32_size(20, v);
        }
        if let Some(v) = self.visibility {
            my_size += ::protobuf::rt::uint32_size(21, v);
        }
        if let Some(v) = self.flags {
            my_size += ::protobuf::rt::uint32_size(22, v);
        }
        if let Some(v) = self.workshop_file {
            my_size += 2 + 1;
        }
        if let Some(v) = self.workshop_accepted {
            my_size += 2 + 1;
        }
        if let Some(v) = self.show_subscribe_all {
            my_size += 2 + 1;
        }
        if let Some(v) = self.num_comments_developer {
            my_size += ::protobuf::rt::int32_size(26, v);
        }
        if let Some(v) = self.num_comments_public {
            my_size += ::protobuf::rt::int32_size(27, v);
        }
        if let Some(v) = self.banned {
            my_size += 2 + 1;
        }
        if let Some(v) = self.ban_reason.as_ref() {
            my_size += ::protobuf::rt::string_size(29, &v);
        }
        if let Some(v) = self.banner {
            my_size += 2 + 8;
        }
        if let Some(v) = self.can_be_deleted {
            my_size += 2 + 1;
        }
        if let Some(v) = self.incompatible {
            my_size += 2 + 1;
        }
        if let Some(v) = self.app_name.as_ref() {
            my_size += ::protobuf::rt::string_size(33, &v);
        }
        if let Some(v) = self.file_type {
            my_size += ::protobuf::rt::uint32_size(34, v);
        }
        if let Some(v) = self.can_subscribe {
            my_size += 2 + 1;
        }
        if let Some(v) = self.subscriptions {
            my_size += ::protobuf::rt::uint32_size(36, v);
        }
        if let Some(v) = self.favorited {
            my_size += ::protobuf::rt::uint32_size(37, v);
        }
        if let Some(v) = self.followers {
            my_size += ::protobuf::rt::uint32_size(38, v);
        }
        if let Some(v) = self.lifetime_subscriptions {
            my_size += ::protobuf::rt::uint32_size(39, v);
        }
        if let Some(v) = self.lifetime_favorited {
            my_size += ::protobuf::rt::uint32_size(40, v);
        }
        if let Some(v) = self.lifetime_followers {
            my_size += ::protobuf::rt::uint32_size(41, v);
        }
        if let Some(v) = self.views {
            my_size += ::protobuf::rt::uint32_size(42, v);
        }
        if let Some(v) = self.image_width {
            my_size += ::protobuf::rt::uint32_size(43, v);
        }
        if let Some(v) = self.image_height {
            my_size += ::protobuf::rt::uint32_size(44, v);
        }
        if let Some(v) = self.image_url.as_ref() {
            my_size += ::protobuf::rt::string_size(45, &v);
        }
        if let Some(v) = self.spoiler_tag {
            my_size += 2 + 1;
        }
        if let Some(v) = self.shortcutid {
            my_size += ::protobuf::rt::uint32_size(47, v);
        }
        if let Some(v) = self.shortcutname.as_ref() {
            my_size += ::protobuf::rt::string_size(48, &v);
        }
        if let Some(v) = self.num_children {
            my_size += ::protobuf::rt::uint32_size(49, v);
        }
        if let Some(v) = self.num_reports {
            my_size += ::protobuf::rt::uint32_size(50, v);
        }
        for value in &self.previews {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.tags {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.children {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.kvtags {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.vote_data.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.time_subscribed {
            my_size += ::protobuf::rt::uint32_size(56, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.publishedfileid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.creator {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.creator_appid {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.consumer_appid {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.consumer_shortcutid {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.filename.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.file_size {
            os.write_uint64(8, v)?;
        }
        if let Some(v) = self.preview_file_size {
            os.write_uint64(9, v)?;
        }
        if let Some(v) = self.file_url.as_ref() {
            os.write_string(10, v)?;
        }
        if let Some(v) = self.preview_url.as_ref() {
            os.write_string(11, v)?;
        }
        if let Some(v) = self.youtubevideoid.as_ref() {
            os.write_string(12, v)?;
        }
        if let Some(v) = self.url.as_ref() {
            os.write_string(13, v)?;
        }
        if let Some(v) = self.hcontent_file {
            os.write_fixed64(14, v)?;
        }
        if let Some(v) = self.hcontent_preview {
            os.write_fixed64(15, v)?;
        }
        if let Some(v) = self.title.as_ref() {
            os.write_string(16, v)?;
        }
        if let Some(v) = self.file_description.as_ref() {
            os.write_string(17, v)?;
        }
        if let Some(v) = self.short_description.as_ref() {
            os.write_string(18, v)?;
        }
        if let Some(v) = self.time_created {
            os.write_uint32(19, v)?;
        }
        if let Some(v) = self.time_updated {
            os.write_uint32(20, v)?;
        }
        if let Some(v) = self.visibility {
            os.write_uint32(21, v)?;
        }
        if let Some(v) = self.flags {
            os.write_uint32(22, v)?;
        }
        if let Some(v) = self.workshop_file {
            os.write_bool(23, v)?;
        }
        if let Some(v) = self.workshop_accepted {
            os.write_bool(24, v)?;
        }
        if let Some(v) = self.show_subscribe_all {
            os.write_bool(25, v)?;
        }
        if let Some(v) = self.num_comments_developer {
            os.write_int32(26, v)?;
        }
        if let Some(v) = self.num_comments_public {
            os.write_int32(27, v)?;
        }
        if let Some(v) = self.banned {
            os.write_bool(28, v)?;
        }
        if let Some(v) = self.ban_reason.as_ref() {
            os.write_string(29, v)?;
        }
        if let Some(v) = self.banner {
            os.write_fixed64(30, v)?;
        }
        if let Some(v) = self.can_be_deleted {
            os.write_bool(31, v)?;
        }
        if let Some(v) = self.incompatible {
            os.write_bool(32, v)?;
        }
        if let Some(v) = self.app_name.as_ref() {
            os.write_string(33, v)?;
        }
        if let Some(v) = self.file_type {
            os.write_uint32(34, v)?;
        }
        if let Some(v) = self.can_subscribe {
            os.write_bool(35, v)?;
        }
        if let Some(v) = self.subscriptions {
            os.write_uint32(36, v)?;
        }
        if let Some(v) = self.favorited {
            os.write_uint32(37, v)?;
        }
        if let Some(v) = self.followers {
            os.write_uint32(38, v)?;
        }
        if let Some(v) = self.lifetime_subscriptions {
            os.write_uint32(39, v)?;
        }
        if let Some(v) = self.lifetime_favorited {
            os.write_uint32(40, v)?;
        }
        if let Some(v) = self.lifetime_followers {
            os.write_uint32(41, v)?;
        }
        if let Some(v) = self.views {
            os.write_uint32(42, v)?;
        }
        if let Some(v) = self.image_width {
            os.write_uint32(43, v)?;
        }
        if let Some(v) = self.image_height {
            os.write_uint32(44, v)?;
        }
        if let Some(v) = self.image_url.as_ref() {
            os.write_string(45, v)?;
        }
        if let Some(v) = self.spoiler_tag {
            os.write_bool(46, v)?;
        }
        if let Some(v) = self.shortcutid {
            os.write_uint32(47, v)?;
        }
        if let Some(v) = self.shortcutname.as_ref() {
            os.write_string(48, v)?;
        }
        if let Some(v) = self.num_children {
            os.write_uint32(49, v)?;
        }
        if let Some(v) = self.num_reports {
            os.write_uint32(50, v)?;
        }
        for v in &self.previews {
            ::protobuf::rt::write_message_field_with_cached_size(51, v, os)?;
        };
        for v in &self.tags {
            ::protobuf::rt::write_message_field_with_cached_size(52, v, os)?;
        };
        for v in &self.children {
            ::protobuf::rt::write_message_field_with_cached_size(53, v, os)?;
        };
        for v in &self.kvtags {
            ::protobuf::rt::write_message_field_with_cached_size(54, v, os)?;
        };
        if let Some(v) = self.vote_data.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(55, v, os)?;
        }
        if let Some(v) = self.time_subscribed {
            os.write_uint32(56, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PublishedFileDetails {
        PublishedFileDetails::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.publishedfileid = ::std::option::Option::None;
        self.creator = ::std::option::Option::None;
        self.creator_appid = ::std::option::Option::None;
        self.consumer_appid = ::std::option::Option::None;
        self.consumer_shortcutid = ::std::option::Option::None;
        self.filename = ::std::option::Option::None;
        self.file_size = ::std::option::Option::None;
        self.preview_file_size = ::std::option::Option::None;
        self.file_url = ::std::option::Option::None;
        self.preview_url = ::std::option::Option::None;
        self.youtubevideoid = ::std::option::Option::None;
        self.url = ::std::option::Option::None;
        self.hcontent_file = ::std::option::Option::None;
        self.hcontent_preview = ::std::option::Option::None;
        self.title = ::std::option::Option::None;
        self.file_description = ::std::option::Option::None;
        self.short_description = ::std::option::Option::None;
        self.time_created = ::std::option::Option::None;
        self.time_updated = ::std::option::Option::None;
        self.visibility = ::std::option::Option::None;
        self.flags = ::std::option::Option::None;
        self.workshop_file = ::std::option::Option::None;
        self.workshop_accepted = ::std::option::Option::None;
        self.show_subscribe_all = ::std::option::Option::None;
        self.num_comments_developer = ::std::option::Option::None;
        self.num_comments_public = ::std::option::Option::None;
        self.banned = ::std::option::Option::None;
        self.ban_reason = ::std::option::Option::None;
        self.banner = ::std::option::Option::None;
        self.can_be_deleted = ::std::option::Option::None;
        self.incompatible = ::std::option::Option::None;
        self.app_name = ::std::option::Option::None;
        self.file_type = ::std::option::Option::None;
        self.can_subscribe = ::std::option::Option::None;
        self.subscriptions = ::std::option::Option::None;
        self.favorited = ::std::option::Option::None;
        self.followers = ::std::option::Option::None;
        self.lifetime_subscriptions = ::std::option::Option::None;
        self.lifetime_favorited = ::std::option::Option::None;
        self.lifetime_followers = ::std::option::Option::None;
        self.views = ::std::option::Option::None;
        self.image_width = ::std::option::Option::None;
        self.image_height = ::std::option::Option::None;
        self.image_url = ::std::option::Option::None;
        self.spoiler_tag = ::std::option::Option::None;
        self.shortcutid = ::std::option::Option::None;
        self.shortcutname = ::std::option::Option::None;
        self.num_children = ::std::option::Option::None;
        self.num_reports = ::std::option::Option::None;
        self.previews.clear();
        self.tags.clear();
        self.children.clear();
        self.kvtags.clear();
        self.vote_data.clear();
        self.time_subscribed = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PublishedFileDetails {
        static instance: PublishedFileDetails = PublishedFileDetails {
            result: ::std::option::Option::None,
            publishedfileid: ::std::option::Option::None,
            creator: ::std::option::Option::None,
            creator_appid: ::std::option::Option::None,
            consumer_appid: ::std::option::Option::None,
            consumer_shortcutid: ::std::option::Option::None,
            filename: ::std::option::Option::None,
            file_size: ::std::option::Option::None,
            preview_file_size: ::std::option::Option::None,
            file_url: ::std::option::Option::None,
            preview_url: ::std::option::Option::None,
            youtubevideoid: ::std::option::Option::None,
            url: ::std::option::Option::None,
            hcontent_file: ::std::option::Option::None,
            hcontent_preview: ::std::option::Option::None,
            title: ::std::option::Option::None,
            file_description: ::std::option::Option::None,
            short_description: ::std::option::Option::None,
            time_created: ::std::option::Option::None,
            time_updated: ::std::option::Option::None,
            visibility: ::std::option::Option::None,
            flags: ::std::option::Option::None,
            workshop_file: ::std::option::Option::None,
            workshop_accepted: ::std::option::Option::None,
            show_subscribe_all: ::std::option::Option::None,
            num_comments_developer: ::std::option::Option::None,
            num_comments_public: ::std::option::Option::None,
            banned: ::std::option::Option::None,
            ban_reason: ::std::option::Option::None,
            banner: ::std::option::Option::None,
            can_be_deleted: ::std::option::Option::None,
            incompatible: ::std::option::Option::None,
            app_name: ::std::option::Option::None,
            file_type: ::std::option::Option::None,
            can_subscribe: ::std::option::Option::None,
            subscriptions: ::std::option::Option::None,
            favorited: ::std::option::Option::None,
            followers: ::std::option::Option::None,
            lifetime_subscriptions: ::std::option::Option::None,
            lifetime_favorited: ::std::option::Option::None,
            lifetime_followers: ::std::option::Option::None,
            views: ::std::option::Option::None,
            image_width: ::std::option::Option::None,
            image_height: ::std::option::Option::None,
            image_url: ::std::option::Option::None,
            spoiler_tag: ::std::option::Option::None,
            shortcutid: ::std::option::Option::None,
            shortcutname: ::std::option::Option::None,
            num_children: ::std::option::Option::None,
            num_reports: ::std::option::Option::None,
            previews: ::std::vec::Vec::new(),
            tags: ::std::vec::Vec::new(),
            children: ::std::vec::Vec::new(),
            kvtags: ::std::vec::Vec::new(),
            vote_data: ::protobuf::MessageField::none(),
            time_subscribed: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PublishedFileDetails {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PublishedFileDetails").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PublishedFileDetails {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PublishedFileDetails {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `PublishedFileDetails`
pub mod published_file_details {
    // @@protoc_insertion_point(message:PublishedFileDetails.Tag)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Tag {
        // message fields
        // @@protoc_insertion_point(field:PublishedFileDetails.Tag.tag)
        pub tag: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:PublishedFileDetails.Tag.adminonly)
        pub adminonly: ::std::option::Option<bool>,
        // special fields
        // @@protoc_insertion_point(special_field:PublishedFileDetails.Tag.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Tag {
        fn default() -> &'a Tag {
            <Tag as ::protobuf::Message>::default_instance()
        }
    }

    impl Tag {
        pub fn new() -> Tag {
            ::std::default::Default::default()
        }

        // optional string tag = 1;

        pub fn tag(&self) -> &str {
            match self.tag.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_tag(&mut self) {
            self.tag = ::std::option::Option::None;
        }

        pub fn has_tag(&self) -> bool {
            self.tag.is_some()
        }

        // Param is passed by value, moved
        pub fn set_tag(&mut self, v: ::std::string::String) {
            self.tag = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_tag(&mut self) -> &mut ::std::string::String {
            if self.tag.is_none() {
                self.tag = ::std::option::Option::Some(::std::string::String::new());
            }
            self.tag.as_mut().unwrap()
        }

        // Take field
        pub fn take_tag(&mut self) -> ::std::string::String {
            self.tag.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional bool adminonly = 2;

        pub fn adminonly(&self) -> bool {
            self.adminonly.unwrap_or(false)
        }

        pub fn clear_adminonly(&mut self) {
            self.adminonly = ::std::option::Option::None;
        }

        pub fn has_adminonly(&self) -> bool {
            self.adminonly.is_some()
        }

        // Param is passed by value, moved
        pub fn set_adminonly(&mut self, v: bool) {
            self.adminonly = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "tag",
                |m: &Tag| { &m.tag },
                |m: &mut Tag| { &mut m.tag },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "adminonly",
                |m: &Tag| { &m.adminonly },
                |m: &mut Tag| { &mut m.adminonly },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Tag>(
                "PublishedFileDetails.Tag",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Tag {
        const NAME: &'static str = "Tag";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.tag = ::std::option::Option::Some(is.read_string()?);
                    },
                    16 => {
                        self.adminonly = ::std::option::Option::Some(is.read_bool()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.tag.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.adminonly {
                my_size += 1 + 1;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.tag.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.adminonly {
                os.write_bool(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Tag {
            Tag::new()
        }

        fn clear(&mut self) {
            self.tag = ::std::option::Option::None;
            self.adminonly = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Tag {
            static instance: Tag = Tag {
                tag: ::std::option::Option::None,
                adminonly: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Tag {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("PublishedFileDetails.Tag").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Tag {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Tag {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:PublishedFileDetails.Preview)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Preview {
        // message fields
        // @@protoc_insertion_point(field:PublishedFileDetails.Preview.previewid)
        pub previewid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:PublishedFileDetails.Preview.sortorder)
        pub sortorder: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:PublishedFileDetails.Preview.url)
        pub url: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:PublishedFileDetails.Preview.size)
        pub size: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:PublishedFileDetails.Preview.filename)
        pub filename: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:PublishedFileDetails.Preview.youtubevideoid)
        pub youtubevideoid: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:PublishedFileDetails.Preview.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Preview {
        fn default() -> &'a Preview {
            <Preview as ::protobuf::Message>::default_instance()
        }
    }

    impl Preview {
        pub fn new() -> Preview {
            ::std::default::Default::default()
        }

        // optional uint64 previewid = 1;

        pub fn previewid(&self) -> u64 {
            self.previewid.unwrap_or(0)
        }

        pub fn clear_previewid(&mut self) {
            self.previewid = ::std::option::Option::None;
        }

        pub fn has_previewid(&self) -> bool {
            self.previewid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_previewid(&mut self, v: u64) {
            self.previewid = ::std::option::Option::Some(v);
        }

        // optional uint32 sortorder = 2;

        pub fn sortorder(&self) -> u32 {
            self.sortorder.unwrap_or(0)
        }

        pub fn clear_sortorder(&mut self) {
            self.sortorder = ::std::option::Option::None;
        }

        pub fn has_sortorder(&self) -> bool {
            self.sortorder.is_some()
        }

        // Param is passed by value, moved
        pub fn set_sortorder(&mut self, v: u32) {
            self.sortorder = ::std::option::Option::Some(v);
        }

        // optional string url = 3;

        pub fn url(&self) -> &str {
            match self.url.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_url(&mut self) {
            self.url = ::std::option::Option::None;
        }

        pub fn has_url(&self) -> bool {
            self.url.is_some()
        }

        // Param is passed by value, moved
        pub fn set_url(&mut self, v: ::std::string::String) {
            self.url = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_url(&mut self) -> &mut ::std::string::String {
            if self.url.is_none() {
                self.url = ::std::option::Option::Some(::std::string::String::new());
            }
            self.url.as_mut().unwrap()
        }

        // Take field
        pub fn take_url(&mut self) -> ::std::string::String {
            self.url.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional uint32 size = 4;

        pub fn size(&self) -> u32 {
            self.size.unwrap_or(0)
        }

        pub fn clear_size(&mut self) {
            self.size = ::std::option::Option::None;
        }

        pub fn has_size(&self) -> bool {
            self.size.is_some()
        }

        // Param is passed by value, moved
        pub fn set_size(&mut self, v: u32) {
            self.size = ::std::option::Option::Some(v);
        }

        // optional string filename = 5;

        pub fn filename(&self) -> &str {
            match self.filename.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_filename(&mut self) {
            self.filename = ::std::option::Option::None;
        }

        pub fn has_filename(&self) -> bool {
            self.filename.is_some()
        }

        // Param is passed by value, moved
        pub fn set_filename(&mut self, v: ::std::string::String) {
            self.filename = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_filename(&mut self) -> &mut ::std::string::String {
            if self.filename.is_none() {
                self.filename = ::std::option::Option::Some(::std::string::String::new());
            }
            self.filename.as_mut().unwrap()
        }

        // Take field
        pub fn take_filename(&mut self) -> ::std::string::String {
            self.filename.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string youtubevideoid = 6;

        pub fn youtubevideoid(&self) -> &str {
            match self.youtubevideoid.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_youtubevideoid(&mut self) {
            self.youtubevideoid = ::std::option::Option::None;
        }

        pub fn has_youtubevideoid(&self) -> bool {
            self.youtubevideoid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_youtubevideoid(&mut self, v: ::std::string::String) {
            self.youtubevideoid = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_youtubevideoid(&mut self) -> &mut ::std::string::String {
            if self.youtubevideoid.is_none() {
                self.youtubevideoid = ::std::option::Option::Some(::std::string::String::new());
            }
            self.youtubevideoid.as_mut().unwrap()
        }

        // Take field
        pub fn take_youtubevideoid(&mut self) -> ::std::string::String {
            self.youtubevideoid.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(6);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "previewid",
                |m: &Preview| { &m.previewid },
                |m: &mut Preview| { &mut m.previewid },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "sortorder",
                |m: &Preview| { &m.sortorder },
                |m: &mut Preview| { &mut m.sortorder },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "url",
                |m: &Preview| { &m.url },
                |m: &mut Preview| { &mut m.url },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "size",
                |m: &Preview| { &m.size },
                |m: &mut Preview| { &mut m.size },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "filename",
                |m: &Preview| { &m.filename },
                |m: &mut Preview| { &mut m.filename },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "youtubevideoid",
                |m: &Preview| { &m.youtubevideoid },
                |m: &mut Preview| { &mut m.youtubevideoid },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Preview>(
                "PublishedFileDetails.Preview",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Preview {
        const NAME: &'static str = "Preview";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.previewid = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    16 => {
                        self.sortorder = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    26 => {
                        self.url = ::std::option::Option::Some(is.read_string()?);
                    },
                    32 => {
                        self.size = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    42 => {
                        self.filename = ::std::option::Option::Some(is.read_string()?);
                    },
                    50 => {
                        self.youtubevideoid = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.previewid {
                my_size += ::protobuf::rt::uint64_size(1, v);
            }
            if let Some(v) = self.sortorder {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.url.as_ref() {
                my_size += ::protobuf::rt::string_size(3, &v);
            }
            if let Some(v) = self.size {
                my_size += ::protobuf::rt::uint32_size(4, v);
            }
            if let Some(v) = self.filename.as_ref() {
                my_size += ::protobuf::rt::string_size(5, &v);
            }
            if let Some(v) = self.youtubevideoid.as_ref() {
                my_size += ::protobuf::rt::string_size(6, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.previewid {
                os.write_uint64(1, v)?;
            }
            if let Some(v) = self.sortorder {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.url.as_ref() {
                os.write_string(3, v)?;
            }
            if let Some(v) = self.size {
                os.write_uint32(4, v)?;
            }
            if let Some(v) = self.filename.as_ref() {
                os.write_string(5, v)?;
            }
            if let Some(v) = self.youtubevideoid.as_ref() {
                os.write_string(6, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Preview {
            Preview::new()
        }

        fn clear(&mut self) {
            self.previewid = ::std::option::Option::None;
            self.sortorder = ::std::option::Option::None;
            self.url = ::std::option::Option::None;
            self.size = ::std::option::Option::None;
            self.filename = ::std::option::Option::None;
            self.youtubevideoid = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Preview {
            static instance: Preview = Preview {
                previewid: ::std::option::Option::None,
                sortorder: ::std::option::Option::None,
                url: ::std::option::Option::None,
                size: ::std::option::Option::None,
                filename: ::std::option::Option::None,
                youtubevideoid: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Preview {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("PublishedFileDetails.Preview").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Preview {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Preview {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:PublishedFileDetails.Child)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Child {
        // message fields
        // @@protoc_insertion_point(field:PublishedFileDetails.Child.publishedfileid)
        pub publishedfileid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:PublishedFileDetails.Child.sortorder)
        pub sortorder: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:PublishedFileDetails.Child.file_type)
        pub file_type: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:PublishedFileDetails.Child.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Child {
        fn default() -> &'a Child {
            <Child as ::protobuf::Message>::default_instance()
        }
    }

    impl Child {
        pub fn new() -> Child {
            ::std::default::Default::default()
        }

        // optional uint64 publishedfileid = 1;

        pub fn publishedfileid(&self) -> u64 {
            self.publishedfileid.unwrap_or(0)
        }

        pub fn clear_publishedfileid(&mut self) {
            self.publishedfileid = ::std::option::Option::None;
        }

        pub fn has_publishedfileid(&self) -> bool {
            self.publishedfileid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_publishedfileid(&mut self, v: u64) {
            self.publishedfileid = ::std::option::Option::Some(v);
        }

        // optional uint32 sortorder = 2;

        pub fn sortorder(&self) -> u32 {
            self.sortorder.unwrap_or(0)
        }

        pub fn clear_sortorder(&mut self) {
            self.sortorder = ::std::option::Option::None;
        }

        pub fn has_sortorder(&self) -> bool {
            self.sortorder.is_some()
        }

        // Param is passed by value, moved
        pub fn set_sortorder(&mut self, v: u32) {
            self.sortorder = ::std::option::Option::Some(v);
        }

        // optional uint32 file_type = 3;

        pub fn file_type(&self) -> u32 {
            self.file_type.unwrap_or(0)
        }

        pub fn clear_file_type(&mut self) {
            self.file_type = ::std::option::Option::None;
        }

        pub fn has_file_type(&self) -> bool {
            self.file_type.is_some()
        }

        // Param is passed by value, moved
        pub fn set_file_type(&mut self, v: u32) {
            self.file_type = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "publishedfileid",
                |m: &Child| { &m.publishedfileid },
                |m: &mut Child| { &mut m.publishedfileid },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "sortorder",
                |m: &Child| { &m.sortorder },
                |m: &mut Child| { &mut m.sortorder },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "file_type",
                |m: &Child| { &m.file_type },
                |m: &mut Child| { &mut m.file_type },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Child>(
                "PublishedFileDetails.Child",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Child {
        const NAME: &'static str = "Child";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.publishedfileid = ::std::option::Option::Some(is.read_uint64()?);
                    },
                    16 => {
                        self.sortorder = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.file_type = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.publishedfileid {
                my_size += ::protobuf::rt::uint64_size(1, v);
            }
            if let Some(v) = self.sortorder {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.file_type {
                my_size += ::protobuf::rt::uint32_size(3, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.publishedfileid {
                os.write_uint64(1, v)?;
            }
            if let Some(v) = self.sortorder {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.file_type {
                os.write_uint32(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Child {
            Child::new()
        }

        fn clear(&mut self) {
            self.publishedfileid = ::std::option::Option::None;
            self.sortorder = ::std::option::Option::None;
            self.file_type = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Child {
            static instance: Child = Child {
                publishedfileid: ::std::option::Option::None,
                sortorder: ::std::option::Option::None,
                file_type: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Child {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("PublishedFileDetails.Child").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Child {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Child {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:PublishedFileDetails.KVTag)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct KVTag {
        // message fields
        // @@protoc_insertion_point(field:PublishedFileDetails.KVTag.key)
        pub key: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:PublishedFileDetails.KVTag.value)
        pub value: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:PublishedFileDetails.KVTag.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a KVTag {
        fn default() -> &'a KVTag {
            <KVTag as ::protobuf::Message>::default_instance()
        }
    }

    impl KVTag {
        pub fn new() -> KVTag {
            ::std::default::Default::default()
        }

        // optional string key = 1;

        pub fn key(&self) -> &str {
            match self.key.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_key(&mut self) {
            self.key = ::std::option::Option::None;
        }

        pub fn has_key(&self) -> bool {
            self.key.is_some()
        }

        // Param is passed by value, moved
        pub fn set_key(&mut self, v: ::std::string::String) {
            self.key = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_key(&mut self) -> &mut ::std::string::String {
            if self.key.is_none() {
                self.key = ::std::option::Option::Some(::std::string::String::new());
            }
            self.key.as_mut().unwrap()
        }

        // Take field
        pub fn take_key(&mut self) -> ::std::string::String {
            self.key.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional string value = 2;

        pub fn value(&self) -> &str {
            match self.value.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_value(&mut self) {
            self.value = ::std::option::Option::None;
        }

        pub fn has_value(&self) -> bool {
            self.value.is_some()
        }

        // Param is passed by value, moved
        pub fn set_value(&mut self, v: ::std::string::String) {
            self.value = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_value(&mut self) -> &mut ::std::string::String {
            if self.value.is_none() {
                self.value = ::std::option::Option::Some(::std::string::String::new());
            }
            self.value.as_mut().unwrap()
        }

        // Take field
        pub fn take_value(&mut self) -> ::std::string::String {
            self.value.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "key",
                |m: &KVTag| { &m.key },
                |m: &mut KVTag| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "value",
                |m: &KVTag| { &m.value },
                |m: &mut KVTag| { &mut m.value },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KVTag>(
                "PublishedFileDetails.KVTag",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for KVTag {
        const NAME: &'static str = "KVTag";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.key = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        self.value = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.key.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.value.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.key.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.value.as_ref() {
                os.write_string(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> KVTag {
            KVTag::new()
        }

        fn clear(&mut self) {
            self.key = ::std::option::Option::None;
            self.value = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static KVTag {
            static instance: KVTag = KVTag {
                key: ::std::option::Option::None,
                value: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for KVTag {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("PublishedFileDetails.KVTag").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for KVTag {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for KVTag {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:PublishedFileDetails.VoteData)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct VoteData {
        // message fields
        // @@protoc_insertion_point(field:PublishedFileDetails.VoteData.score)
        pub score: ::std::option::Option<f32>,
        // @@protoc_insertion_point(field:PublishedFileDetails.VoteData.votes_up)
        pub votes_up: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:PublishedFileDetails.VoteData.votes_down)
        pub votes_down: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:PublishedFileDetails.VoteData.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a VoteData {
        fn default() -> &'a VoteData {
            <VoteData as ::protobuf::Message>::default_instance()
        }
    }

    impl VoteData {
        pub fn new() -> VoteData {
            ::std::default::Default::default()
        }

        // optional float score = 1;

        pub fn score(&self) -> f32 {
            self.score.unwrap_or(0.)
        }

        pub fn clear_score(&mut self) {
            self.score = ::std::option::Option::None;
        }

        pub fn has_score(&self) -> bool {
            self.score.is_some()
        }

        // Param is passed by value, moved
        pub fn set_score(&mut self, v: f32) {
            self.score = ::std::option::Option::Some(v);
        }

        // optional uint32 votes_up = 2;

        pub fn votes_up(&self) -> u32 {
            self.votes_up.unwrap_or(0)
        }

        pub fn clear_votes_up(&mut self) {
            self.votes_up = ::std::option::Option::None;
        }

        pub fn has_votes_up(&self) -> bool {
            self.votes_up.is_some()
        }

        // Param is passed by value, moved
        pub fn set_votes_up(&mut self, v: u32) {
            self.votes_up = ::std::option::Option::Some(v);
        }

        // optional uint32 votes_down = 3;

        pub fn votes_down(&self) -> u32 {
            self.votes_down.unwrap_or(0)
        }

        pub fn clear_votes_down(&mut self) {
            self.votes_down = ::std::option::Option::None;
        }

        pub fn has_votes_down(&self) -> bool {
            self.votes_down.is_some()
        }

        // Param is passed by value, moved
        pub fn set_votes_down(&mut self, v: u32) {
            self.votes_down = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "score",
                |m: &VoteData| { &m.score },
                |m: &mut VoteData| { &mut m.score },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "votes_up",
                |m: &VoteData| { &m.votes_up },
                |m: &mut VoteData| { &mut m.votes_up },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "votes_down",
                |m: &VoteData| { &m.votes_down },
                |m: &mut VoteData| { &mut m.votes_down },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<VoteData>(
                "PublishedFileDetails.VoteData",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for VoteData {
        const NAME: &'static str = "VoteData";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    13 => {
                        self.score = ::std::option::Option::Some(is.read_float()?);
                    },
                    16 => {
                        self.votes_up = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.votes_down = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.score {
                my_size += 1 + 4;
            }
            if let Some(v) = self.votes_up {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.votes_down {
                my_size += ::protobuf::rt::uint32_size(3, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.score {
                os.write_float(1, v)?;
            }
            if let Some(v) = self.votes_up {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.votes_down {
                os.write_uint32(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> VoteData {
            VoteData::new()
        }

        fn clear(&mut self) {
            self.score = ::std::option::Option::None;
            self.votes_up = ::std::option::Option::None;
            self.votes_down = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static VoteData {
            static instance: VoteData = VoteData {
                score: ::std::option::Option::None,
                votes_up: ::std::option::Option::None,
                votes_down: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for VoteData {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("PublishedFileDetails.VoteData").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for VoteData {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for VoteData {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CPublishedFile_GetDetails_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPublishedFile_GetDetails_Response {
    // message fields
    // @@protoc_insertion_point(field:CPublishedFile_GetDetails_Response.publishedfiledetails)
    pub publishedfiledetails: ::std::vec::Vec<PublishedFileDetails>,
    // special fields
    // @@protoc_insertion_point(special_field:CPublishedFile_GetDetails_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPublishedFile_GetDetails_Response {
    fn default() -> &'a CPublishedFile_GetDetails_Response {
        <CPublishedFile_GetDetails_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPublishedFile_GetDetails_Response {
    pub fn new() -> CPublishedFile_GetDetails_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "publishedfiledetails",
            |m: &CPublishedFile_GetDetails_Response| { &m.publishedfiledetails },
            |m: &mut CPublishedFile_GetDetails_Response| { &mut m.publishedfiledetails },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPublishedFile_GetDetails_Response>(
            "CPublishedFile_GetDetails_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPublishedFile_GetDetails_Response {
    const NAME: &'static str = "CPublishedFile_GetDetails_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.publishedfiledetails.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.publishedfiledetails {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.publishedfiledetails {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPublishedFile_GetDetails_Response {
        CPublishedFile_GetDetails_Response::new()
    }

    fn clear(&mut self) {
        self.publishedfiledetails.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPublishedFile_GetDetails_Response {
        static instance: CPublishedFile_GetDetails_Response = CPublishedFile_GetDetails_Response {
            publishedfiledetails: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPublishedFile_GetDetails_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPublishedFile_GetDetails_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPublishedFile_GetDetails_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPublishedFile_GetDetails_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPublishedFile_GetUserFiles_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPublishedFile_GetUserFiles_Request {
    // message fields
    // @@protoc_insertion_point(field:CPublishedFile_GetUserFiles_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPublishedFile_GetUserFiles_Request.page)
    pub page: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPublishedFile_GetUserFiles_Request.numperpage)
    pub numperpage: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPublishedFile_GetUserFiles_Request.sortmethod)
    pub sortmethod: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPublishedFile_GetUserFiles_Request.totalonly)
    pub totalonly: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CPublishedFile_GetUserFiles_Request.privacy)
    pub privacy: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPublishedFile_GetUserFiles_Request.ids_only)
    pub ids_only: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CPublishedFile_GetUserFiles_Request.requiredtags)
    pub requiredtags: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:CPublishedFile_GetUserFiles_Request.excludedtags)
    pub excludedtags: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CPublishedFile_GetUserFiles_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPublishedFile_GetUserFiles_Request {
    fn default() -> &'a CPublishedFile_GetUserFiles_Request {
        <CPublishedFile_GetUserFiles_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPublishedFile_GetUserFiles_Request {
    pub fn new() -> CPublishedFile_GetUserFiles_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint32 page = 3;

    pub fn page(&self) -> u32 {
        self.page.unwrap_or(1u32)
    }

    pub fn clear_page(&mut self) {
        self.page = ::std::option::Option::None;
    }

    pub fn has_page(&self) -> bool {
        self.page.is_some()
    }

    // Param is passed by value, moved
    pub fn set_page(&mut self, v: u32) {
        self.page = ::std::option::Option::Some(v);
    }

    // optional uint32 numperpage = 4;

    pub fn numperpage(&self) -> u32 {
        self.numperpage.unwrap_or(1u32)
    }

    pub fn clear_numperpage(&mut self) {
        self.numperpage = ::std::option::Option::None;
    }

    pub fn has_numperpage(&self) -> bool {
        self.numperpage.is_some()
    }

    // Param is passed by value, moved
    pub fn set_numperpage(&mut self, v: u32) {
        self.numperpage = ::std::option::Option::Some(v);
    }

    // optional string sortmethod = 6;

    pub fn sortmethod(&self) -> &str {
        match self.sortmethod.as_ref() {
            Some(v) => v,
            None => "lastupdated",
        }
    }

    pub fn clear_sortmethod(&mut self) {
        self.sortmethod = ::std::option::Option::None;
    }

    pub fn has_sortmethod(&self) -> bool {
        self.sortmethod.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sortmethod(&mut self, v: ::std::string::String) {
        self.sortmethod = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sortmethod(&mut self) -> &mut ::std::string::String {
        if self.sortmethod.is_none() {
            self.sortmethod = ::std::option::Option::Some(::std::string::String::new());
        }
        self.sortmethod.as_mut().unwrap()
    }

    // Take field
    pub fn take_sortmethod(&mut self) -> ::std::string::String {
        self.sortmethod.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool totalonly = 7;

    pub fn totalonly(&self) -> bool {
        self.totalonly.unwrap_or(false)
    }

    pub fn clear_totalonly(&mut self) {
        self.totalonly = ::std::option::Option::None;
    }

    pub fn has_totalonly(&self) -> bool {
        self.totalonly.is_some()
    }

    // Param is passed by value, moved
    pub fn set_totalonly(&mut self, v: bool) {
        self.totalonly = ::std::option::Option::Some(v);
    }

    // optional uint32 privacy = 9;

    pub fn privacy(&self) -> u32 {
        self.privacy.unwrap_or(0)
    }

    pub fn clear_privacy(&mut self) {
        self.privacy = ::std::option::Option::None;
    }

    pub fn has_privacy(&self) -> bool {
        self.privacy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_privacy(&mut self, v: u32) {
        self.privacy = ::std::option::Option::Some(v);
    }

    // optional bool ids_only = 10;

    pub fn ids_only(&self) -> bool {
        self.ids_only.unwrap_or(false)
    }

    pub fn clear_ids_only(&mut self) {
        self.ids_only = ::std::option::Option::None;
    }

    pub fn has_ids_only(&self) -> bool {
        self.ids_only.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ids_only(&mut self, v: bool) {
        self.ids_only = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CPublishedFile_GetUserFiles_Request| { &m.appid },
            |m: &mut CPublishedFile_GetUserFiles_Request| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "page",
            |m: &CPublishedFile_GetUserFiles_Request| { &m.page },
            |m: &mut CPublishedFile_GetUserFiles_Request| { &mut m.page },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "numperpage",
            |m: &CPublishedFile_GetUserFiles_Request| { &m.numperpage },
            |m: &mut CPublishedFile_GetUserFiles_Request| { &mut m.numperpage },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "sortmethod",
            |m: &CPublishedFile_GetUserFiles_Request| { &m.sortmethod },
            |m: &mut CPublishedFile_GetUserFiles_Request| { &mut m.sortmethod },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "totalonly",
            |m: &CPublishedFile_GetUserFiles_Request| { &m.totalonly },
            |m: &mut CPublishedFile_GetUserFiles_Request| { &mut m.totalonly },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "privacy",
            |m: &CPublishedFile_GetUserFiles_Request| { &m.privacy },
            |m: &mut CPublishedFile_GetUserFiles_Request| { &mut m.privacy },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ids_only",
            |m: &CPublishedFile_GetUserFiles_Request| { &m.ids_only },
            |m: &mut CPublishedFile_GetUserFiles_Request| { &mut m.ids_only },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "requiredtags",
            |m: &CPublishedFile_GetUserFiles_Request| { &m.requiredtags },
            |m: &mut CPublishedFile_GetUserFiles_Request| { &mut m.requiredtags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "excludedtags",
            |m: &CPublishedFile_GetUserFiles_Request| { &m.excludedtags },
            |m: &mut CPublishedFile_GetUserFiles_Request| { &mut m.excludedtags },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPublishedFile_GetUserFiles_Request>(
            "CPublishedFile_GetUserFiles_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPublishedFile_GetUserFiles_Request {
    const NAME: &'static str = "CPublishedFile_GetUserFiles_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.page = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.numperpage = ::std::option::Option::Some(is.read_uint32()?);
                },
                50 => {
                    self.sortmethod = ::std::option::Option::Some(is.read_string()?);
                },
                56 => {
                    self.totalonly = ::std::option::Option::Some(is.read_bool()?);
                },
                72 => {
                    self.privacy = ::std::option::Option::Some(is.read_uint32()?);
                },
                80 => {
                    self.ids_only = ::std::option::Option::Some(is.read_bool()?);
                },
                90 => {
                    self.requiredtags.push(is.read_string()?);
                },
                98 => {
                    self.excludedtags.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.page {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.numperpage {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.sortmethod.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(v) = self.totalonly {
            my_size += 1 + 1;
        }
        if let Some(v) = self.privacy {
            my_size += ::protobuf::rt::uint32_size(9, v);
        }
        if let Some(v) = self.ids_only {
            my_size += 1 + 1;
        }
        for value in &self.requiredtags {
            my_size += ::protobuf::rt::string_size(11, &value);
        };
        for value in &self.excludedtags {
            my_size += ::protobuf::rt::string_size(12, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.page {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.numperpage {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.sortmethod.as_ref() {
            os.write_string(6, v)?;
        }
        if let Some(v) = self.totalonly {
            os.write_bool(7, v)?;
        }
        if let Some(v) = self.privacy {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.ids_only {
            os.write_bool(10, v)?;
        }
        for v in &self.requiredtags {
            os.write_string(11, &v)?;
        };
        for v in &self.excludedtags {
            os.write_string(12, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPublishedFile_GetUserFiles_Request {
        CPublishedFile_GetUserFiles_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.page = ::std::option::Option::None;
        self.numperpage = ::std::option::Option::None;
        self.sortmethod = ::std::option::Option::None;
        self.totalonly = ::std::option::Option::None;
        self.privacy = ::std::option::Option::None;
        self.ids_only = ::std::option::Option::None;
        self.requiredtags.clear();
        self.excludedtags.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPublishedFile_GetUserFiles_Request {
        static instance: CPublishedFile_GetUserFiles_Request = CPublishedFile_GetUserFiles_Request {
            appid: ::std::option::Option::None,
            page: ::std::option::Option::None,
            numperpage: ::std::option::Option::None,
            sortmethod: ::std::option::Option::None,
            totalonly: ::std::option::Option::None,
            privacy: ::std::option::Option::None,
            ids_only: ::std::option::Option::None,
            requiredtags: ::std::vec::Vec::new(),
            excludedtags: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPublishedFile_GetUserFiles_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPublishedFile_GetUserFiles_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPublishedFile_GetUserFiles_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPublishedFile_GetUserFiles_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPublishedFile_GetUserFiles_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPublishedFile_GetUserFiles_Response {
    // message fields
    // @@protoc_insertion_point(field:CPublishedFile_GetUserFiles_Response.total)
    pub total: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPublishedFile_GetUserFiles_Response.startindex)
    pub startindex: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPublishedFile_GetUserFiles_Response.publishedfiledetails)
    pub publishedfiledetails: ::std::vec::Vec<PublishedFileDetails>,
    // @@protoc_insertion_point(field:CPublishedFile_GetUserFiles_Response.apps)
    pub apps: ::std::vec::Vec<cpublished_file_get_user_files_response::App>,
    // special fields
    // @@protoc_insertion_point(special_field:CPublishedFile_GetUserFiles_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPublishedFile_GetUserFiles_Response {
    fn default() -> &'a CPublishedFile_GetUserFiles_Response {
        <CPublishedFile_GetUserFiles_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPublishedFile_GetUserFiles_Response {
    pub fn new() -> CPublishedFile_GetUserFiles_Response {
        ::std::default::Default::default()
    }

    // optional uint32 total = 1;

    pub fn total(&self) -> u32 {
        self.total.unwrap_or(0)
    }

    pub fn clear_total(&mut self) {
        self.total = ::std::option::Option::None;
    }

    pub fn has_total(&self) -> bool {
        self.total.is_some()
    }

    // Param is passed by value, moved
    pub fn set_total(&mut self, v: u32) {
        self.total = ::std::option::Option::Some(v);
    }

    // optional uint32 startindex = 2;

    pub fn startindex(&self) -> u32 {
        self.startindex.unwrap_or(0)
    }

    pub fn clear_startindex(&mut self) {
        self.startindex = ::std::option::Option::None;
    }

    pub fn has_startindex(&self) -> bool {
        self.startindex.is_some()
    }

    // Param is passed by value, moved
    pub fn set_startindex(&mut self, v: u32) {
        self.startindex = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "total",
            |m: &CPublishedFile_GetUserFiles_Response| { &m.total },
            |m: &mut CPublishedFile_GetUserFiles_Response| { &mut m.total },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "startindex",
            |m: &CPublishedFile_GetUserFiles_Response| { &m.startindex },
            |m: &mut CPublishedFile_GetUserFiles_Response| { &mut m.startindex },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "publishedfiledetails",
            |m: &CPublishedFile_GetUserFiles_Response| { &m.publishedfiledetails },
            |m: &mut CPublishedFile_GetUserFiles_Response| { &mut m.publishedfiledetails },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "apps",
            |m: &CPublishedFile_GetUserFiles_Response| { &m.apps },
            |m: &mut CPublishedFile_GetUserFiles_Response| { &mut m.apps },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPublishedFile_GetUserFiles_Response>(
            "CPublishedFile_GetUserFiles_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPublishedFile_GetUserFiles_Response {
    const NAME: &'static str = "CPublishedFile_GetUserFiles_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.total = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.startindex = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.publishedfiledetails.push(is.read_message()?);
                },
                34 => {
                    self.apps.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.total {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.startindex {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        for value in &self.publishedfiledetails {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.apps {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.total {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.startindex {
            os.write_uint32(2, v)?;
        }
        for v in &self.publishedfiledetails {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        for v in &self.apps {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPublishedFile_GetUserFiles_Response {
        CPublishedFile_GetUserFiles_Response::new()
    }

    fn clear(&mut self) {
        self.total = ::std::option::Option::None;
        self.startindex = ::std::option::Option::None;
        self.publishedfiledetails.clear();
        self.apps.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPublishedFile_GetUserFiles_Response {
        static instance: CPublishedFile_GetUserFiles_Response = CPublishedFile_GetUserFiles_Response {
            total: ::std::option::Option::None,
            startindex: ::std::option::Option::None,
            publishedfiledetails: ::std::vec::Vec::new(),
            apps: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPublishedFile_GetUserFiles_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPublishedFile_GetUserFiles_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPublishedFile_GetUserFiles_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPublishedFile_GetUserFiles_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CPublishedFile_GetUserFiles_Response`
pub mod cpublished_file_get_user_files_response {
    // @@protoc_insertion_point(message:CPublishedFile_GetUserFiles_Response.App)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct App {
        // message fields
        // @@protoc_insertion_point(field:CPublishedFile_GetUserFiles_Response.App.appid)
        pub appid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CPublishedFile_GetUserFiles_Response.App.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:CPublishedFile_GetUserFiles_Response.App.shortcutid)
        pub shortcutid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CPublishedFile_GetUserFiles_Response.App.private)
        pub private: ::std::option::Option<bool>,
        // special fields
        // @@protoc_insertion_point(special_field:CPublishedFile_GetUserFiles_Response.App.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a App {
        fn default() -> &'a App {
            <App as ::protobuf::Message>::default_instance()
        }
    }

    impl App {
        pub fn new() -> App {
            ::std::default::Default::default()
        }

        // optional uint32 appid = 1;

        pub fn appid(&self) -> u32 {
            self.appid.unwrap_or(0)
        }

        pub fn clear_appid(&mut self) {
            self.appid = ::std::option::Option::None;
        }

        pub fn has_appid(&self) -> bool {
            self.appid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_appid(&mut self, v: u32) {
            self.appid = ::std::option::Option::Some(v);
        }

        // optional string name = 2;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional uint32 shortcutid = 3;

        pub fn shortcutid(&self) -> u32 {
            self.shortcutid.unwrap_or(0)
        }

        pub fn clear_shortcutid(&mut self) {
            self.shortcutid = ::std::option::Option::None;
        }

        pub fn has_shortcutid(&self) -> bool {
            self.shortcutid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_shortcutid(&mut self, v: u32) {
            self.shortcutid = ::std::option::Option::Some(v);
        }

        // optional bool private = 4;

        pub fn private(&self) -> bool {
            self.private.unwrap_or(false)
        }

        pub fn clear_private(&mut self) {
            self.private = ::std::option::Option::None;
        }

        pub fn has_private(&self) -> bool {
            self.private.is_some()
        }

        // Param is passed by value, moved
        pub fn set_private(&mut self, v: bool) {
            self.private = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(4);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "appid",
                |m: &App| { &m.appid },
                |m: &mut App| { &mut m.appid },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "name",
                |m: &App| { &m.name },
                |m: &mut App| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "shortcutid",
                |m: &App| { &m.shortcutid },
                |m: &mut App| { &mut m.shortcutid },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "private",
                |m: &App| { &m.private },
                |m: &mut App| { &mut m.private },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<App>(
                "CPublishedFile_GetUserFiles_Response.App",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for App {
        const NAME: &'static str = "App";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.appid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    24 => {
                        self.shortcutid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.private = ::std::option::Option::Some(is.read_bool()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.appid {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.name.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            if let Some(v) = self.shortcutid {
                my_size += ::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.private {
                my_size += 1 + 1;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.appid {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.name.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.shortcutid {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.private {
                os.write_bool(4, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> App {
            App::new()
        }

        fn clear(&mut self) {
            self.appid = ::std::option::Option::None;
            self.name = ::std::option::Option::None;
            self.shortcutid = ::std::option::Option::None;
            self.private = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static App {
            static instance: App = App {
                appid: ::std::option::Option::None,
                name: ::std::option::Option::None,
                shortcutid: ::std::option::Option::None,
                private: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for App {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CPublishedFile_GetUserFiles_Response.App").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for App {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for App {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CPublishedFile_Update_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPublishedFile_Update_Request {
    // message fields
    // @@protoc_insertion_point(field:CPublishedFile_Update_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPublishedFile_Update_Request.publishedfileid)
    pub publishedfileid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPublishedFile_Update_Request.title)
    pub title: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPublishedFile_Update_Request.file_description)
    pub file_description: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPublishedFile_Update_Request.visibility)
    pub visibility: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPublishedFile_Update_Request.tags)
    pub tags: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:CPublishedFile_Update_Request.filename)
    pub filename: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPublishedFile_Update_Request.preview_filename)
    pub preview_filename: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CPublishedFile_Update_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPublishedFile_Update_Request {
    fn default() -> &'a CPublishedFile_Update_Request {
        <CPublishedFile_Update_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPublishedFile_Update_Request {
    pub fn new() -> CPublishedFile_Update_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional fixed64 publishedfileid = 2;

    pub fn publishedfileid(&self) -> u64 {
        self.publishedfileid.unwrap_or(0)
    }

    pub fn clear_publishedfileid(&mut self) {
        self.publishedfileid = ::std::option::Option::None;
    }

    pub fn has_publishedfileid(&self) -> bool {
        self.publishedfileid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_publishedfileid(&mut self, v: u64) {
        self.publishedfileid = ::std::option::Option::Some(v);
    }

    // optional string title = 3;

    pub fn title(&self) -> &str {
        match self.title.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_title(&mut self) {
        self.title = ::std::option::Option::None;
    }

    pub fn has_title(&self) -> bool {
        self.title.is_some()
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        if self.title.is_none() {
            self.title = ::std::option::Option::Some(::std::string::String::new());
        }
        self.title.as_mut().unwrap()
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        self.title.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string file_description = 4;

    pub fn file_description(&self) -> &str {
        match self.file_description.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_file_description(&mut self) {
        self.file_description = ::std::option::Option::None;
    }

    pub fn has_file_description(&self) -> bool {
        self.file_description.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_description(&mut self, v: ::std::string::String) {
        self.file_description = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_description(&mut self) -> &mut ::std::string::String {
        if self.file_description.is_none() {
            self.file_description = ::std::option::Option::Some(::std::string::String::new());
        }
        self.file_description.as_mut().unwrap()
    }

    // Take field
    pub fn take_file_description(&mut self) -> ::std::string::String {
        self.file_description.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 visibility = 5;

    pub fn visibility(&self) -> u32 {
        self.visibility.unwrap_or(0)
    }

    pub fn clear_visibility(&mut self) {
        self.visibility = ::std::option::Option::None;
    }

    pub fn has_visibility(&self) -> bool {
        self.visibility.is_some()
    }

    // Param is passed by value, moved
    pub fn set_visibility(&mut self, v: u32) {
        self.visibility = ::std::option::Option::Some(v);
    }

    // optional string filename = 7;

    pub fn filename(&self) -> &str {
        match self.filename.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_filename(&mut self) {
        self.filename = ::std::option::Option::None;
    }

    pub fn has_filename(&self) -> bool {
        self.filename.is_some()
    }

    // Param is passed by value, moved
    pub fn set_filename(&mut self, v: ::std::string::String) {
        self.filename = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filename(&mut self) -> &mut ::std::string::String {
        if self.filename.is_none() {
            self.filename = ::std::option::Option::Some(::std::string::String::new());
        }
        self.filename.as_mut().unwrap()
    }

    // Take field
    pub fn take_filename(&mut self) -> ::std::string::String {
        self.filename.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string preview_filename = 8;

    pub fn preview_filename(&self) -> &str {
        match self.preview_filename.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_preview_filename(&mut self) {
        self.preview_filename = ::std::option::Option::None;
    }

    pub fn has_preview_filename(&self) -> bool {
        self.preview_filename.is_some()
    }

    // Param is passed by value, moved
    pub fn set_preview_filename(&mut self, v: ::std::string::String) {
        self.preview_filename = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_preview_filename(&mut self) -> &mut ::std::string::String {
        if self.preview_filename.is_none() {
            self.preview_filename = ::std::option::Option::Some(::std::string::String::new());
        }
        self.preview_filename.as_mut().unwrap()
    }

    // Take field
    pub fn take_preview_filename(&mut self) -> ::std::string::String {
        self.preview_filename.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CPublishedFile_Update_Request| { &m.appid },
            |m: &mut CPublishedFile_Update_Request| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "publishedfileid",
            |m: &CPublishedFile_Update_Request| { &m.publishedfileid },
            |m: &mut CPublishedFile_Update_Request| { &mut m.publishedfileid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "title",
            |m: &CPublishedFile_Update_Request| { &m.title },
            |m: &mut CPublishedFile_Update_Request| { &mut m.title },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "file_description",
            |m: &CPublishedFile_Update_Request| { &m.file_description },
            |m: &mut CPublishedFile_Update_Request| { &mut m.file_description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "visibility",
            |m: &CPublishedFile_Update_Request| { &m.visibility },
            |m: &mut CPublishedFile_Update_Request| { &mut m.visibility },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "tags",
            |m: &CPublishedFile_Update_Request| { &m.tags },
            |m: &mut CPublishedFile_Update_Request| { &mut m.tags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "filename",
            |m: &CPublishedFile_Update_Request| { &m.filename },
            |m: &mut CPublishedFile_Update_Request| { &mut m.filename },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "preview_filename",
            |m: &CPublishedFile_Update_Request| { &m.preview_filename },
            |m: &mut CPublishedFile_Update_Request| { &mut m.preview_filename },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPublishedFile_Update_Request>(
            "CPublishedFile_Update_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPublishedFile_Update_Request {
    const NAME: &'static str = "CPublishedFile_Update_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                17 => {
                    self.publishedfileid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                26 => {
                    self.title = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.file_description = ::std::option::Option::Some(is.read_string()?);
                },
                40 => {
                    self.visibility = ::std::option::Option::Some(is.read_uint32()?);
                },
                50 => {
                    self.tags.push(is.read_string()?);
                },
                58 => {
                    self.filename = ::std::option::Option::Some(is.read_string()?);
                },
                66 => {
                    self.preview_filename = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.publishedfileid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.title.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.file_description.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.visibility {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        for value in &self.tags {
            my_size += ::protobuf::rt::string_size(6, &value);
        };
        if let Some(v) = self.filename.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.preview_filename.as_ref() {
            my_size += ::protobuf::rt::string_size(8, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.publishedfileid {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.title.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.file_description.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.visibility {
            os.write_uint32(5, v)?;
        }
        for v in &self.tags {
            os.write_string(6, &v)?;
        };
        if let Some(v) = self.filename.as_ref() {
            os.write_string(7, v)?;
        }
        if let Some(v) = self.preview_filename.as_ref() {
            os.write_string(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPublishedFile_Update_Request {
        CPublishedFile_Update_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.publishedfileid = ::std::option::Option::None;
        self.title = ::std::option::Option::None;
        self.file_description = ::std::option::Option::None;
        self.visibility = ::std::option::Option::None;
        self.tags.clear();
        self.filename = ::std::option::Option::None;
        self.preview_filename = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPublishedFile_Update_Request {
        static instance: CPublishedFile_Update_Request = CPublishedFile_Update_Request {
            appid: ::std::option::Option::None,
            publishedfileid: ::std::option::Option::None,
            title: ::std::option::Option::None,
            file_description: ::std::option::Option::None,
            visibility: ::std::option::Option::None,
            tags: ::std::vec::Vec::new(),
            filename: ::std::option::Option::None,
            preview_filename: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPublishedFile_Update_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPublishedFile_Update_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPublishedFile_Update_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPublishedFile_Update_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPublishedFile_Update_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPublishedFile_Update_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CPublishedFile_Update_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPublishedFile_Update_Response {
    fn default() -> &'a CPublishedFile_Update_Response {
        <CPublishedFile_Update_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPublishedFile_Update_Response {
    pub fn new() -> CPublishedFile_Update_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPublishedFile_Update_Response>(
            "CPublishedFile_Update_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPublishedFile_Update_Response {
    const NAME: &'static str = "CPublishedFile_Update_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPublishedFile_Update_Response {
        CPublishedFile_Update_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPublishedFile_Update_Response {
        static instance: CPublishedFile_Update_Response = CPublishedFile_Update_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPublishedFile_Update_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPublishedFile_Update_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPublishedFile_Update_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPublishedFile_Update_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPublishedFile_RefreshVotingQueue_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPublishedFile_RefreshVotingQueue_Request {
    // message fields
    // @@protoc_insertion_point(field:CPublishedFile_RefreshVotingQueue_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPublishedFile_RefreshVotingQueue_Request.matching_file_type)
    pub matching_file_type: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPublishedFile_RefreshVotingQueue_Request.tags)
    pub tags: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:CPublishedFile_RefreshVotingQueue_Request.match_all_tags)
    pub match_all_tags: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
    pub excluded_tags: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:CPublishedFile_RefreshVotingQueue_Request.desired_queue_size)
    pub desired_queue_size: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPublishedFile_RefreshVotingQueue_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPublishedFile_RefreshVotingQueue_Request {
    fn default() -> &'a CPublishedFile_RefreshVotingQueue_Request {
        <CPublishedFile_RefreshVotingQueue_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPublishedFile_RefreshVotingQueue_Request {
    pub fn new() -> CPublishedFile_RefreshVotingQueue_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint32 matching_file_type = 2;

    pub fn matching_file_type(&self) -> u32 {
        self.matching_file_type.unwrap_or(0)
    }

    pub fn clear_matching_file_type(&mut self) {
        self.matching_file_type = ::std::option::Option::None;
    }

    pub fn has_matching_file_type(&self) -> bool {
        self.matching_file_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_matching_file_type(&mut self, v: u32) {
        self.matching_file_type = ::std::option::Option::Some(v);
    }

    // optional bool match_all_tags = 4;

    pub fn match_all_tags(&self) -> bool {
        self.match_all_tags.unwrap_or(true)
    }

    pub fn clear_match_all_tags(&mut self) {
        self.match_all_tags = ::std::option::Option::None;
    }

    pub fn has_match_all_tags(&self) -> bool {
        self.match_all_tags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_match_all_tags(&mut self, v: bool) {
        self.match_all_tags = ::std::option::Option::Some(v);
    }

    // optional uint32 desired_queue_size = 6;

    pub fn desired_queue_size(&self) -> u32 {
        self.desired_queue_size.unwrap_or(0)
    }

    pub fn clear_desired_queue_size(&mut self) {
        self.desired_queue_size = ::std::option::Option::None;
    }

    pub fn has_desired_queue_size(&self) -> bool {
        self.desired_queue_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_desired_queue_size(&mut self, v: u32) {
        self.desired_queue_size = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CPublishedFile_RefreshVotingQueue_Request| { &m.appid },
            |m: &mut CPublishedFile_RefreshVotingQueue_Request| { &mut m.appid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "matching_file_type",
            |m: &CPublishedFile_RefreshVotingQueue_Request| { &m.matching_file_type },
            |m: &mut CPublishedFile_RefreshVotingQueue_Request| { &mut m.matching_file_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "tags",
            |m: &CPublishedFile_RefreshVotingQueue_Request| { &m.tags },
            |m: &mut CPublishedFile_RefreshVotingQueue_Request| { &mut m.tags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "match_all_tags",
            |m: &CPublishedFile_RefreshVotingQueue_Request| { &m.match_all_tags },
            |m: &mut CPublishedFile_RefreshVotingQueue_Request| { &mut m.match_all_tags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "excluded_tags",
            |m: &CPublishedFile_RefreshVotingQueue_Request| { &m.excluded_tags },
            |m: &mut CPublishedFile_RefreshVotingQueue_Request| { &mut m.excluded_tags },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "desired_queue_size",
            |m: &CPublishedFile_RefreshVotingQueue_Request| { &m.desired_queue_size },
            |m: &mut CPublishedFile_RefreshVotingQueue_Request| { &mut m.desired_queue_size },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPublishedFile_RefreshVotingQueue_Request>(
            "CPublishedFile_RefreshVotingQueue_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPublishedFile_RefreshVotingQueue_Request {
    const NAME: &'static str = "CPublishedFile_RefreshVotingQueue_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.matching_file_type = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.tags.push(is.read_string()?);
                },
                32 => {
                    self.match_all_tags = ::std::option::Option::Some(is.read_bool()?);
                },
                42 => {
                    self.excluded_tags.push(is.read_string()?);
                },
                48 => {
                    self.desired_queue_size = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.matching_file_type {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        for value in &self.tags {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        if let Some(v) = self.match_all_tags {
            my_size += 1 + 1;
        }
        for value in &self.excluded_tags {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        if let Some(v) = self.desired_queue_size {
            my_size += ::protobuf::rt::uint32_size(6, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.matching_file_type {
            os.write_uint32(2, v)?;
        }
        for v in &self.tags {
            os.write_string(3, &v)?;
        };
        if let Some(v) = self.match_all_tags {
            os.write_bool(4, v)?;
        }
        for v in &self.excluded_tags {
            os.write_string(5, &v)?;
        };
        if let Some(v) = self.desired_queue_size {
            os.write_uint32(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPublishedFile_RefreshVotingQueue_Request {
        CPublishedFile_RefreshVotingQueue_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.matching_file_type = ::std::option::Option::None;
        self.tags.clear();
        self.match_all_tags = ::std::option::Option::None;
        self.excluded_tags.clear();
        self.desired_queue_size = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPublishedFile_RefreshVotingQueue_Request {
        static instance: CPublishedFile_RefreshVotingQueue_Request = CPublishedFile_RefreshVotingQueue_Request {
            appid: ::std::option::Option::None,
            matching_file_type: ::std::option::Option::None,
            tags: ::std::vec::Vec::new(),
            match_all_tags: ::std::option::Option::None,
            excluded_tags: ::std::vec::Vec::new(),
            desired_queue_size: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPublishedFile_RefreshVotingQueue_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPublishedFile_RefreshVotingQueue_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPublishedFile_RefreshVotingQueue_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPublishedFile_RefreshVotingQueue_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPublishedFile_RefreshVotingQueue_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPublishedFile_RefreshVotingQueue_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CPublishedFile_RefreshVotingQueue_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPublishedFile_RefreshVotingQueue_Response {
    fn default() -> &'a CPublishedFile_RefreshVotingQueue_Response {
        <CPublishedFile_RefreshVotingQueue_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPublishedFile_RefreshVotingQueue_Response {
    pub fn new() -> CPublishedFile_RefreshVotingQueue_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPublishedFile_RefreshVotingQueue_Response>(
            "CPublishedFile_RefreshVotingQueue_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPublishedFile_RefreshVotingQueue_Response {
    const NAME: &'static str = "CPublishedFile_RefreshVotingQueue_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPublishedFile_RefreshVotingQueue_Response {
        CPublishedFile_RefreshVotingQueue_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPublishedFile_RefreshVotingQueue_Response {
        static instance: CPublishedFile_RefreshVotingQueue_Response = CPublishedFile_RefreshVotingQueue_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPublishedFile_RefreshVotingQueue_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPublishedFile_RefreshVotingQueue_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPublishedFile_RefreshVotingQueue_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPublishedFile_RefreshVotingQueue_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n/steammessages_publishedfile.steamworkssdk.proto\x1a.steammessages_uni\
    fied_base.steamworkssdk.proto\"\xa4\x01\n\x20CPublishedFile_Subscribe_Re\
    quest\x12(\n\x0fpublishedfileid\x18\x01\x20\x01(\x04R\x0fpublishedfileid\
    \x12\x1b\n\tlist_type\x18\x02\x20\x01(\rR\x08listType\x12\x14\n\x05appid\
    \x18\x03\x20\x01(\x05R\x05appid\x12#\n\rnotify_client\x18\x04\x20\x01(\
    \x08R\x0cnotifyClient\"#\n!CPublishedFile_Subscribe_Response\"\xa6\x01\n\
    \"CPublishedFile_Unsubscribe_Request\x12(\n\x0fpublishedfileid\x18\x01\
    \x20\x01(\x04R\x0fpublishedfileid\x12\x1b\n\tlist_type\x18\x02\x20\x01(\
    \rR\x08listType\x12\x14\n\x05appid\x18\x03\x20\x01(\x05R\x05appid\x12#\n\
    \rnotify_client\x18\x04\x20\x01(\x08R\x0cnotifyClient\"%\n#CPublishedFil\
    e_Unsubscribe_Response\"\x9e\x0c\n\x1eCPublishedFile_Publish_Request\x12\
    C\n\x05appid\x18\x01\x20\x01(\rR\x05appidB-\x82\xb5\x18)App\x20Id\x20thi\
    s\x20file\x20is\x20being\x20published\x20FROM.\x12R\n\x0econsumer_appid\
    \x18\x02\x20\x01(\rR\rconsumerAppidB+\x82\xb5\x18'App\x20Id\x20this\x20f\
    ile\x20is\x20being\x20published\x20TO.\x12Z\n\rcloudfilename\x18\x03\x20\
    \x01(\tR\rcloudfilenameB4\x82\xb5\x180Name\x20of\x20the\x20file\x20to\
    \x20publish\x20in\x20the\x20user's\x20cloud.\x12q\n\x15preview_cloudfile\
    name\x18\x04\x20\x01(\tR\x14previewCloudfilenameB<\x82\xb5\x188Name\x20o\
    f\x20the\x20file\x20to\x20use\x20as\x20the\x20published\x20file's\x20pre\
    view.\x12<\n\x05title\x18\x05\x20\x01(\tR\x05titleB&\x82\xb5\x18\"Text\
    \x20title\x20for\x20the\x20published\x20file.\x12W\n\x10file_description\
    \x18\x06\x20\x01(\tR\x0ffileDescriptionB,\x82\xb5\x18(Text\x20descriptio\
    n\x20for\x20the\x20published\x20file.\x12V\n\tfile_type\x18\x07\x20\x01(\
    \rR\x08fileTypeB9\x82\xb5\x185(EWorkshopFileType)\x20Type\x20of\x20Works\
    hop\x20file\x20to\x20publish.\x12_\n\x16consumer_shortcut_name\x18\x08\
    \x20\x01(\tR\x14consumerShortcutNameB)\x82\xb5\x18%Shortcut\x20name\x20f\
    or\x20the\x20published\x20file.\x12Z\n\x10youtube_username\x18\t\x20\x01\
    (\tR\x0fyoutubeUsernameB/\x82\xb5\x18+(Optional)\x20User's\x20YouTube\
    \x20account\x20username.\x12l\n\x0fyoutube_videoid\x18\n\x20\x01(\tR\x0e\
    youtubeVideoidBC\x82\xb5\x18?(Optional)\x20Video\x20Id\x20of\x20a\x20You\
    Tube\x20video\x20for\x20this\x20published\x20file.\x12\x8d\x01\n\nvisibi\
    lity\x18\x0b\x20\x01(\rR\nvisibilityBm\x82\xb5\x18i(ERemoteStoragePublis\
    hedFileVisibility)\x20Visibility\x20of\x20the\x20published\x20file\x20(p\
    rivate,\x20friends,\x20public,\x20etc.)\x12x\n\x0credirect_uri\x18\x0c\
    \x20\x01(\tR\x0bredirectUriBU\x82\xb5\x18Q(Optional)\x20If\x20supplied,\
    \x20the\x20resulting\x20published\x20file's\x20Id\x20is\x20appended\x20t\
    o\x20the\x20URI.\x12J\n\x04tags\x18\r\x20\x03(\tR\x04tagsB6\x82\xb5\x182\
    Array\x20of\x20text\x20tags\x20to\x20apply\x20to\x20the\x20published\x20\
    file.\x12i\n\x0fcollection_type\x18\x0e\x20\x01(\tR\x0ecollectionTypeB@\
    \x82\xb5\x18<(Optional)\x20Type\x20of\x20collection\x20the\x20published\
    \x20file\x20represents.\x12W\n\tgame_type\x18\x0f\x20\x01(\tR\x08gameTyp\
    eB:\x82\xb5\x186(Optional)\x20Type\x20of\x20game\x20the\x20published\x20\
    file\x20represents.\x12`\n\x03url\x18\x10\x20\x01(\tR\x03urlBN\x82\xb5\
    \x18J(Optional)\x20If\x20this\x20represents\x20a\x20game,\x20this\x20is\
    \x20the\x20URL\x20to\x20that\x20game's\x20page.\"n\n\x1fCPublishedFile_P\
    ublish_Response\x12(\n\x0fpublishedfileid\x18\x01\x20\x01(\x04R\x0fpubli\
    shedfileid\x12!\n\x0credirect_uri\x18\x02\x20\x01(\tR\x0bredirectUri\"\
    \xfe\x05\n!CPublishedFile_GetDetails_Request\x12b\n\x10publishedfileids\
    \x18\x01\x20\x03(\x06R\x10publishedfileidsB6\x82\xb5\x182Set\x20of\x20pu\
    blished\x20file\x20Ids\x20to\x20retrieve\x20details\x20for.\x12^\n\x0bin\
    cludetags\x18\x02\x20\x01(\x08R\x0bincludetagsB<\x82\xb5\x188If\x20true,\
    \x20return\x20tag\x20information\x20in\x20the\x20returned\x20details.\
    \x12~\n\x19includeadditionalpreviews\x18\x03\x20\x01(\x08R\x19includeadd\
    itionalpreviewsB@\x82\xb5\x18<If\x20true,\x20return\x20preview\x20inform\
    ation\x20in\x20the\x20returned\x20details.\x12_\n\x0fincludechildren\x18\
    \x04\x20\x01(\x08R\x0fincludechildrenB5\x82\xb5\x181If\x20true,\x20retur\
    n\x20children\x20in\x20the\x20returned\x20details.\x12a\n\rincludekvtags\
    \x18\x05\x20\x01(\x08R\rincludekvtagsB;\x82\xb5\x187If\x20true,\x20retur\
    n\x20key\x20value\x20tags\x20in\x20the\x20returned\x20details.\x12Z\n\
    \x0cincludevotes\x18\x06\x20\x01(\x08R\x0cincludevotesB6\x82\xb5\x182If\
    \x20true,\x20return\x20vote\x20data\x20in\x20the\x20returned\x20details.\
    \x12u\n\x11short_description\x18\x08\x20\x01(\x08R\x10shortDescriptionBH\
    \x82\xb5\x18DIf\x20true,\x20return\x20a\x20short\x20description\x20inste\
    ad\x20of\x20the\x20full\x20description.\"\xf5\x14\n\x14PublishedFileDeta\
    ils\x12\x16\n\x06result\x18\x01\x20\x01(\rR\x06result\x12(\n\x0fpublishe\
    dfileid\x18\x02\x20\x01(\x04R\x0fpublishedfileid\x12\x18\n\x07creator\
    \x18\x03\x20\x01(\x06R\x07creator\x12#\n\rcreator_appid\x18\x04\x20\x01(\
    \rR\x0ccreatorAppid\x12%\n\x0econsumer_appid\x18\x05\x20\x01(\rR\rconsum\
    erAppid\x12/\n\x13consumer_shortcutid\x18\x06\x20\x01(\rR\x12consumerSho\
    rtcutid\x12\x1a\n\x08filename\x18\x07\x20\x01(\tR\x08filename\x12\x1b\n\
    \tfile_size\x18\x08\x20\x01(\x04R\x08fileSize\x12*\n\x11preview_file_siz\
    e\x18\t\x20\x01(\x04R\x0fpreviewFileSize\x12\x19\n\x08file_url\x18\n\x20\
    \x01(\tR\x07fileUrl\x12\x1f\n\x0bpreview_url\x18\x0b\x20\x01(\tR\nprevie\
    wUrl\x12&\n\x0eyoutubevideoid\x18\x0c\x20\x01(\tR\x0eyoutubevideoid\x12\
    \x10\n\x03url\x18\r\x20\x01(\tR\x03url\x12#\n\rhcontent_file\x18\x0e\x20\
    \x01(\x06R\x0chcontentFile\x12)\n\x10hcontent_preview\x18\x0f\x20\x01(\
    \x06R\x0fhcontentPreview\x12\x14\n\x05title\x18\x10\x20\x01(\tR\x05title\
    \x12)\n\x10file_description\x18\x11\x20\x01(\tR\x0ffileDescription\x12+\
    \n\x11short_description\x18\x12\x20\x01(\tR\x10shortDescription\x12!\n\
    \x0ctime_created\x18\x13\x20\x01(\rR\x0btimeCreated\x12!\n\x0ctime_updat\
    ed\x18\x14\x20\x01(\rR\x0btimeUpdated\x12\x1e\n\nvisibility\x18\x15\x20\
    \x01(\rR\nvisibility\x12\x14\n\x05flags\x18\x16\x20\x01(\rR\x05flags\x12\
    #\n\rworkshop_file\x18\x17\x20\x01(\x08R\x0cworkshopFile\x12+\n\x11works\
    hop_accepted\x18\x18\x20\x01(\x08R\x10workshopAccepted\x12,\n\x12show_su\
    bscribe_all\x18\x19\x20\x01(\x08R\x10showSubscribeAll\x124\n\x16num_comm\
    ents_developer\x18\x1a\x20\x01(\x05R\x14numCommentsDeveloper\x12.\n\x13n\
    um_comments_public\x18\x1b\x20\x01(\x05R\x11numCommentsPublic\x12\x16\n\
    \x06banned\x18\x1c\x20\x01(\x08R\x06banned\x12\x1d\n\nban_reason\x18\x1d\
    \x20\x01(\tR\tbanReason\x12\x16\n\x06banner\x18\x1e\x20\x01(\x06R\x06ban\
    ner\x12$\n\x0ecan_be_deleted\x18\x1f\x20\x01(\x08R\x0ccanBeDeleted\x12\"\
    \n\x0cincompatible\x18\x20\x20\x01(\x08R\x0cincompatible\x12\x19\n\x08ap\
    p_name\x18!\x20\x01(\tR\x07appName\x12\x1b\n\tfile_type\x18\"\x20\x01(\r\
    R\x08fileType\x12#\n\rcan_subscribe\x18#\x20\x01(\x08R\x0ccanSubscribe\
    \x12$\n\rsubscriptions\x18$\x20\x01(\rR\rsubscriptions\x12\x1c\n\tfavori\
    ted\x18%\x20\x01(\rR\tfavorited\x12\x1c\n\tfollowers\x18&\x20\x01(\rR\tf\
    ollowers\x125\n\x16lifetime_subscriptions\x18'\x20\x01(\rR\x15lifetimeSu\
    bscriptions\x12-\n\x12lifetime_favorited\x18(\x20\x01(\rR\x11lifetimeFav\
    orited\x12-\n\x12lifetime_followers\x18)\x20\x01(\rR\x11lifetimeFollower\
    s\x12\x14\n\x05views\x18*\x20\x01(\rR\x05views\x12\x1f\n\x0bimage_width\
    \x18+\x20\x01(\rR\nimageWidth\x12!\n\x0cimage_height\x18,\x20\x01(\rR\
    \x0bimageHeight\x12\x1b\n\timage_url\x18-\x20\x01(\tR\x08imageUrl\x12\
    \x1f\n\x0bspoiler_tag\x18.\x20\x01(\x08R\nspoilerTag\x12\x1e\n\nshortcut\
    id\x18/\x20\x01(\rR\nshortcutid\x12\"\n\x0cshortcutname\x180\x20\x01(\tR\
    \x0cshortcutname\x12!\n\x0cnum_children\x181\x20\x01(\rR\x0bnumChildren\
    \x12\x1f\n\x0bnum_reports\x182\x20\x01(\rR\nnumReports\x129\n\x08preview\
    s\x183\x20\x03(\x0b2\x1d.PublishedFileDetails.PreviewR\x08previews\x12-\
    \n\x04tags\x184\x20\x03(\x0b2\x19.PublishedFileDetails.TagR\x04tags\x127\
    \n\x08children\x185\x20\x03(\x0b2\x1b.PublishedFileDetails.ChildR\x08chi\
    ldren\x123\n\x06kvtags\x186\x20\x03(\x0b2\x1b.PublishedFileDetails.KVTag\
    R\x06kvtags\x12;\n\tvote_data\x187\x20\x01(\x0b2\x1e.PublishedFileDetail\
    s.VoteDataR\x08voteData\x12\x82\x01\n\x0ftime_subscribed\x188\x20\x01(\r\
    R\x0etimeSubscribedBY\x82\xb5\x18UOnly\x20valid\x20in\x20PublishedFile.G\
    etUserFiles\x20and\x20not\x20normal\x20PublishedFile.GetDetail\x20calls\
    \x1a5\n\x03Tag\x12\x10\n\x03tag\x18\x01\x20\x01(\tR\x03tag\x12\x1c\n\tad\
    minonly\x18\x02\x20\x01(\x08R\tadminonly\x1a\xaf\x01\n\x07Preview\x12\
    \x1c\n\tpreviewid\x18\x01\x20\x01(\x04R\tpreviewid\x12\x1c\n\tsortorder\
    \x18\x02\x20\x01(\rR\tsortorder\x12\x10\n\x03url\x18\x03\x20\x01(\tR\x03\
    url\x12\x12\n\x04size\x18\x04\x20\x01(\rR\x04size\x12\x1a\n\x08filename\
    \x18\x05\x20\x01(\tR\x08filename\x12&\n\x0eyoutubevideoid\x18\x06\x20\
    \x01(\tR\x0eyoutubevideoid\x1al\n\x05Child\x12(\n\x0fpublishedfileid\x18\
    \x01\x20\x01(\x04R\x0fpublishedfileid\x12\x1c\n\tsortorder\x18\x02\x20\
    \x01(\rR\tsortorder\x12\x1b\n\tfile_type\x18\x03\x20\x01(\rR\x08fileType\
    \x1a/\n\x05KVTag\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\
    \x05value\x18\x02\x20\x01(\tR\x05value\x1aZ\n\x08VoteData\x12\x14\n\x05s\
    core\x18\x01\x20\x01(\x02R\x05score\x12\x19\n\x08votes_up\x18\x02\x20\
    \x01(\rR\x07votesUp\x12\x1d\n\nvotes_down\x18\x03\x20\x01(\rR\tvotesDown\
    \"o\n\"CPublishedFile_GetDetails_Response\x12I\n\x14publishedfiledetails\
    \x18\x01\x20\x03(\x0b2\x15.PublishedFileDetailsR\x14publishedfiledetails\
    \"\x99\x07\n#CPublishedFile_GetUserFiles_Request\x12B\n\x05appid\x18\x01\
    \x20\x01(\rR\x05appidB,\x82\xb5\x18(App\x20Id\x20to\x20retrieve\x20publi\
    shed\x20files\x20from.\x12@\n\x04page\x18\x03\x20\x01(\r:\x011R\x04pageB\
    )\x82\xb5\x18%(Optional)\x20Starting\x20page\x20for\x20results.\x12\\\n\
    \nnumperpage\x18\x04\x20\x01(\r:\x011R\nnumperpageB9\x82\xb5\x185(Option\
    al)\x20The\x20number\x20of\x20results,\x20per\x20page\x20to\x20return.\
    \x12e\n\nsortmethod\x18\x06\x20\x01(\t:\x0blastupdatedR\nsortmethodB8\
    \x82\xb5\x184(Optional)\x20Sorting\x20method\x20to\x20use\x20on\x20retur\
    ned\x20values.\x12t\n\ttotalonly\x18\x07\x20\x01(\x08R\ttotalonlyBV\x82\
    \xb5\x18R(Optional)\x20If\x20true,\x20only\x20return\x20the\x20total\x20\
    number\x20of\x20files\x20that\x20satisfy\x20this\x20query.\x12D\n\x07pri\
    vacy\x18\t\x20\x01(\rR\x07privacyB*\x82\xb5\x18&(optional)\x20Filter\x20\
    by\x20privacy\x20settings.\x12w\n\x08ids_only\x18\n\x20\x01(\x08R\x07ids\
    OnlyB\\\x82\xb5\x18X(Optional)\x20If\x20true,\x20only\x20return\x20the\
    \x20published\x20file\x20ids\x20of\x20files\x20that\x20satisfy\x20this\
    \x20query.\x12v\n\x0crequiredtags\x18\x0b\x20\x03(\tR\x0crequiredtagsBR\
    \x82\xb5\x18N(Optional)\x20Tags\x20that\x20must\x20be\x20present\x20on\
    \x20a\x20published\x20file\x20to\x20satisfy\x20the\x20query.\x12z\n\x0ce\
    xcludedtags\x18\x0c\x20\x03(\tR\x0cexcludedtagsBV\x82\xb5\x18R(Optional)\
    \x20Tags\x20that\x20must\x20NOT\x20be\x20present\x20on\x20a\x20published\
    \x20file\x20to\x20satisfy\x20the\x20query.\"\xd1\x02\n$CPublishedFile_Ge\
    tUserFiles_Response\x12\x14\n\x05total\x18\x01\x20\x01(\rR\x05total\x12\
    \x1e\n\nstartindex\x18\x02\x20\x01(\rR\nstartindex\x12I\n\x14publishedfi\
    ledetails\x18\x03\x20\x03(\x0b2\x15.PublishedFileDetailsR\x14publishedfi\
    ledetails\x12=\n\x04apps\x18\x04\x20\x03(\x0b2).CPublishedFile_GetUserFi\
    les_Response.AppR\x04apps\x1ai\n\x03App\x12\x14\n\x05appid\x18\x01\x20\
    \x01(\rR\x05appid\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x12\x1e\
    \n\nshortcutid\x18\x03\x20\x01(\rR\nshortcutid\x12\x18\n\x07private\x18\
    \x04\x20\x01(\x08R\x07private\"\xac\x05\n\x1dCPublishedFile_Update_Reque\
    st\x12@\n\x05appid\x18\x01\x20\x01(\rR\x05appidB*\x82\xb5\x18&App\x20Id\
    \x20this\x20published\x20file\x20belongs\x20to.\x12]\n\x0fpublishedfilei\
    d\x18\x02\x20\x01(\x06R\x0fpublishedfileidB3\x82\xb5\x18/Published\x20fi\
    le\x20id\x20of\x20the\x20file\x20we'd\x20like\x20update.\x12A\n\x05title\
    \x18\x03\x20\x01(\tR\x05titleB+\x82\xb5\x18'(Optional)\x20Title\x20of\
    \x20the\x20published\x20file.\x12\\\n\x10file_description\x18\x04\x20\
    \x01(\tR\x0ffileDescriptionB1\x82\xb5\x18-(Optional)\x20Description\x20o\
    f\x20the\x20published\x20file.\x12P\n\nvisibility\x18\x05\x20\x01(\rR\nv\
    isibilityB0\x82\xb5\x18,(Optional)\x20Visibility\x20of\x20the\x20publish\
    ed\x20file.\x12F\n\x04tags\x18\x06\x20\x03(\tR\x04tagsB2\x82\xb5\x18.(Op\
    tional)\x20Set\x20of\x20tags\x20for\x20the\x20published\x20file.\x12K\n\
    \x08filename\x18\x07\x20\x01(\tR\x08filenameB/\x82\xb5\x18+(Optional)\
    \x20Filename\x20for\x20the\x20published\x20file.\x12b\n\x10preview_filen\
    ame\x18\x08\x20\x01(\tR\x0fpreviewFilenameB7\x82\xb5\x183(Optional)\x20P\
    review\x20filename\x20for\x20the\x20published\x20file.\"\x20\n\x1eCPubli\
    shedFile_Update_Response\"\x88\x05\n)CPublishedFile_RefreshVotingQueue_R\
    equest\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12T\n\x12matchin\
    g_file_type\x18\x02\x20\x01(\rR\x10matchingFileTypeB&\x82\xb5\x18\"EPubl\
    ishedFileInfoMatchingFileType\x12r\n\x04tags\x18\x03\x20\x03(\tR\x04tags\
    B^\x82\xb5\x18ZInclude\x20files\x20that\x20have\x20all\x20the\x20tags\
    \x20or\x20any\x20of\x20the\x20tags\x20if\x20match_all_tags\x20is\x20set\
    \x20to\x20false.\x12\xa3\x01\n\x0ematch_all_tags\x18\x04\x20\x01(\x08:\
    \x04trueR\x0cmatchAllTagsBw\x82\xb5\x18sIf\x20true,\x20then\x20files\x20\
    must\x20have\x20all\x20the\x20tags\x20specified.\x20\x20If\x20false,\x20\
    then\x20must\x20have\x20at\x20least\x20one\x20of\x20the\x20tags\x20speci\
    fied.\x12W\n\rexcluded_tags\x18\x05\x20\x03(\tR\x0cexcludedTagsB2\x82\
    \xb5\x18.Exclude\x20any\x20files\x20that\x20have\x20any\x20of\x20these\
    \x20tags.\x12|\n\x12desired_queue_size\x18\x06\x20\x01(\rR\x10desiredQue\
    ueSizeBN\x82\xb5\x18JDesired\x20number\x20of\x20items\x20in\x20the\x20vo\
    ting\x20queue.\x20\x20May\x20be\x20clamped\x20by\x20the\x20server\",\n*C\
    PublishedFile_RefreshVotingQueue_Response2\x83\x08\n\rPublishedFile\x12\
    \x81\x01\n\tSubscribe\x12!.CPublishedFile_Subscribe_Request\x1a\".CPubli\
    shedFile_Subscribe_Response\"-\x82\xb5\x18)Subscribes\x20the\x20user\x20\
    to\x20the\x20published\x20file\x12\x8b\x01\n\x0bUnsubscribe\x12#.CPublis\
    hedFile_Unsubscribe_Request\x1a$.CPublishedFile_Unsubscribe_Response\"1\
    \x82\xb5\x18-Unsubscribes\x20the\x20user\x20from\x20the\x20published\x20\
    file\x12\x80\x01\n\x07Publish\x12\x1f.CPublishedFile_Publish_Request\x1a\
    \x20.CPublishedFile_Publish_Response\"2\x82\xb5\x18.Publishes\x20a\x20cl\
    ouded\x20user\x20file\x20to\x20the\x20Workshop.\x12\x90\x01\n\nGetDetail\
    s\x12\".CPublishedFile_GetDetails_Request\x1a#.CPublishedFile_GetDetails\
    _Response\"9\x82\xb5\x185Retrieves\x20information\x20about\x20a\x20set\
    \x20of\x20published\x20files.\x12\x85\x01\n\x0cGetUserFiles\x12$.CPublis\
    hedFile_GetUserFiles_Request\x1a%.CPublishedFile_GetUserFiles_Response\"\
    (\x82\xb5\x18$Retrieves\x20files\x20published\x20by\x20a\x20user.\x12z\n\
    \x06Update\x12\x1e.CPublishedFile_Update_Request\x1a\x1f.CPublishedFile_\
    Update_Response\"/\x82\xb5\x18+Updates\x20information\x20about\x20a\x20p\
    ublished\x20file.\x12\x98\x01\n\x12RefreshVotingQueue\x12*.CPublishedFil\
    e_RefreshVotingQueue_Request\x1a+.CPublishedFile_RefreshVotingQueue_Resp\
    onse\")\x82\xb5\x18%Refresh\x20the\x20voting\x20queue\x20for\x20the\x20u\
    ser\x1a+\x82\xb5\x18'A\x20service\x20to\x20access\x20published\x20file\
    \x20data\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::steammessages_unified_base_steamworkssdk::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(21);
            messages.push(CPublishedFile_Subscribe_Request::generated_message_descriptor_data());
            messages.push(CPublishedFile_Subscribe_Response::generated_message_descriptor_data());
            messages.push(CPublishedFile_Unsubscribe_Request::generated_message_descriptor_data());
            messages.push(CPublishedFile_Unsubscribe_Response::generated_message_descriptor_data());
            messages.push(CPublishedFile_Publish_Request::generated_message_descriptor_data());
            messages.push(CPublishedFile_Publish_Response::generated_message_descriptor_data());
            messages.push(CPublishedFile_GetDetails_Request::generated_message_descriptor_data());
            messages.push(PublishedFileDetails::generated_message_descriptor_data());
            messages.push(CPublishedFile_GetDetails_Response::generated_message_descriptor_data());
            messages.push(CPublishedFile_GetUserFiles_Request::generated_message_descriptor_data());
            messages.push(CPublishedFile_GetUserFiles_Response::generated_message_descriptor_data());
            messages.push(CPublishedFile_Update_Request::generated_message_descriptor_data());
            messages.push(CPublishedFile_Update_Response::generated_message_descriptor_data());
            messages.push(CPublishedFile_RefreshVotingQueue_Request::generated_message_descriptor_data());
            messages.push(CPublishedFile_RefreshVotingQueue_Response::generated_message_descriptor_data());
            messages.push(published_file_details::Tag::generated_message_descriptor_data());
            messages.push(published_file_details::Preview::generated_message_descriptor_data());
            messages.push(published_file_details::Child::generated_message_descriptor_data());
            messages.push(published_file_details::KVTag::generated_message_descriptor_data());
            messages.push(published_file_details::VoteData::generated_message_descriptor_data());
            messages.push(cpublished_file_get_user_files_response::App::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
