// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `cs_usercmd.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:CSGOInterpolationInfoPB)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSGOInterpolationInfoPB {
    // message fields
    // @@protoc_insertion_point(field:CSGOInterpolationInfoPB.src_tick)
    pub src_tick: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CSGOInterpolationInfoPB.dst_tick)
    pub dst_tick: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CSGOInterpolationInfoPB.frac)
    pub frac: ::std::option::Option<f32>,
    // special fields
    // @@protoc_insertion_point(special_field:CSGOInterpolationInfoPB.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSGOInterpolationInfoPB {
    fn default() -> &'a CSGOInterpolationInfoPB {
        <CSGOInterpolationInfoPB as ::protobuf::Message>::default_instance()
    }
}

impl CSGOInterpolationInfoPB {
    pub fn new() -> CSGOInterpolationInfoPB {
        ::std::default::Default::default()
    }

    // optional int32 src_tick = 1;

    pub fn src_tick(&self) -> i32 {
        self.src_tick.unwrap_or(-1i32)
    }

    pub fn clear_src_tick(&mut self) {
        self.src_tick = ::std::option::Option::None;
    }

    pub fn has_src_tick(&self) -> bool {
        self.src_tick.is_some()
    }

    // Param is passed by value, moved
    pub fn set_src_tick(&mut self, v: i32) {
        self.src_tick = ::std::option::Option::Some(v);
    }

    // optional int32 dst_tick = 2;

    pub fn dst_tick(&self) -> i32 {
        self.dst_tick.unwrap_or(-1i32)
    }

    pub fn clear_dst_tick(&mut self) {
        self.dst_tick = ::std::option::Option::None;
    }

    pub fn has_dst_tick(&self) -> bool {
        self.dst_tick.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dst_tick(&mut self, v: i32) {
        self.dst_tick = ::std::option::Option::Some(v);
    }

    // optional float frac = 3;

    pub fn frac(&self) -> f32 {
        self.frac.unwrap_or(0.0f32)
    }

    pub fn clear_frac(&mut self) {
        self.frac = ::std::option::Option::None;
    }

    pub fn has_frac(&self) -> bool {
        self.frac.is_some()
    }

    // Param is passed by value, moved
    pub fn set_frac(&mut self, v: f32) {
        self.frac = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "src_tick",
            |m: &CSGOInterpolationInfoPB| { &m.src_tick },
            |m: &mut CSGOInterpolationInfoPB| { &mut m.src_tick },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "dst_tick",
            |m: &CSGOInterpolationInfoPB| { &m.dst_tick },
            |m: &mut CSGOInterpolationInfoPB| { &mut m.dst_tick },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "frac",
            |m: &CSGOInterpolationInfoPB| { &m.frac },
            |m: &mut CSGOInterpolationInfoPB| { &mut m.frac },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CSGOInterpolationInfoPB>(
            "CSGOInterpolationInfoPB",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CSGOInterpolationInfoPB {
    const NAME: &'static str = "CSGOInterpolationInfoPB";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.src_tick = ::std::option::Option::Some(is.read_int32()?);
                },
                16 => {
                    self.dst_tick = ::std::option::Option::Some(is.read_int32()?);
                },
                29 => {
                    self.frac = ::std::option::Option::Some(is.read_float()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.src_tick {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.dst_tick {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        if let Some(v) = self.frac {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.src_tick {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.dst_tick {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.frac {
            os.write_float(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSGOInterpolationInfoPB {
        CSGOInterpolationInfoPB::new()
    }

    fn clear(&mut self) {
        self.src_tick = ::std::option::Option::None;
        self.dst_tick = ::std::option::Option::None;
        self.frac = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSGOInterpolationInfoPB {
        static instance: CSGOInterpolationInfoPB = CSGOInterpolationInfoPB {
            src_tick: ::std::option::Option::None,
            dst_tick: ::std::option::Option::None,
            frac: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CSGOInterpolationInfoPB {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSGOInterpolationInfoPB").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSGOInterpolationInfoPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSGOInterpolationInfoPB {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSGOInputHistoryEntryPB)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSGOInputHistoryEntryPB {
    // message fields
    // @@protoc_insertion_point(field:CSGOInputHistoryEntryPB.view_angles)
    pub view_angles: ::protobuf::MessageField<super::networkbasetypes::CMsgQAngle>,
    // @@protoc_insertion_point(field:CSGOInputHistoryEntryPB.render_tick_count)
    pub render_tick_count: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CSGOInputHistoryEntryPB.render_tick_fraction)
    pub render_tick_fraction: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:CSGOInputHistoryEntryPB.player_tick_count)
    pub player_tick_count: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CSGOInputHistoryEntryPB.player_tick_fraction)
    pub player_tick_fraction: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:CSGOInputHistoryEntryPB.cl_interp)
    pub cl_interp: ::protobuf::MessageField<CSGOInterpolationInfoPB>,
    // @@protoc_insertion_point(field:CSGOInputHistoryEntryPB.sv_interp0)
    pub sv_interp0: ::protobuf::MessageField<CSGOInterpolationInfoPB>,
    // @@protoc_insertion_point(field:CSGOInputHistoryEntryPB.sv_interp1)
    pub sv_interp1: ::protobuf::MessageField<CSGOInterpolationInfoPB>,
    // @@protoc_insertion_point(field:CSGOInputHistoryEntryPB.player_interp)
    pub player_interp: ::protobuf::MessageField<CSGOInterpolationInfoPB>,
    // @@protoc_insertion_point(field:CSGOInputHistoryEntryPB.frame_number)
    pub frame_number: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CSGOInputHistoryEntryPB.target_ent_index)
    pub target_ent_index: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CSGOInputHistoryEntryPB.shoot_position)
    pub shoot_position: ::protobuf::MessageField<super::networkbasetypes::CMsgVector>,
    // @@protoc_insertion_point(field:CSGOInputHistoryEntryPB.target_head_pos_check)
    pub target_head_pos_check: ::protobuf::MessageField<super::networkbasetypes::CMsgVector>,
    // @@protoc_insertion_point(field:CSGOInputHistoryEntryPB.target_abs_pos_check)
    pub target_abs_pos_check: ::protobuf::MessageField<super::networkbasetypes::CMsgVector>,
    // @@protoc_insertion_point(field:CSGOInputHistoryEntryPB.target_abs_ang_check)
    pub target_abs_ang_check: ::protobuf::MessageField<super::networkbasetypes::CMsgQAngle>,
    // special fields
    // @@protoc_insertion_point(special_field:CSGOInputHistoryEntryPB.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSGOInputHistoryEntryPB {
    fn default() -> &'a CSGOInputHistoryEntryPB {
        <CSGOInputHistoryEntryPB as ::protobuf::Message>::default_instance()
    }
}

impl CSGOInputHistoryEntryPB {
    pub fn new() -> CSGOInputHistoryEntryPB {
        ::std::default::Default::default()
    }

    // optional int32 render_tick_count = 4;

    pub fn render_tick_count(&self) -> i32 {
        self.render_tick_count.unwrap_or(0)
    }

    pub fn clear_render_tick_count(&mut self) {
        self.render_tick_count = ::std::option::Option::None;
    }

    pub fn has_render_tick_count(&self) -> bool {
        self.render_tick_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_render_tick_count(&mut self, v: i32) {
        self.render_tick_count = ::std::option::Option::Some(v);
    }

    // optional float render_tick_fraction = 5;

    pub fn render_tick_fraction(&self) -> f32 {
        self.render_tick_fraction.unwrap_or(0.)
    }

    pub fn clear_render_tick_fraction(&mut self) {
        self.render_tick_fraction = ::std::option::Option::None;
    }

    pub fn has_render_tick_fraction(&self) -> bool {
        self.render_tick_fraction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_render_tick_fraction(&mut self, v: f32) {
        self.render_tick_fraction = ::std::option::Option::Some(v);
    }

    // optional int32 player_tick_count = 6;

    pub fn player_tick_count(&self) -> i32 {
        self.player_tick_count.unwrap_or(0)
    }

    pub fn clear_player_tick_count(&mut self) {
        self.player_tick_count = ::std::option::Option::None;
    }

    pub fn has_player_tick_count(&self) -> bool {
        self.player_tick_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_player_tick_count(&mut self, v: i32) {
        self.player_tick_count = ::std::option::Option::Some(v);
    }

    // optional float player_tick_fraction = 7;

    pub fn player_tick_fraction(&self) -> f32 {
        self.player_tick_fraction.unwrap_or(0.)
    }

    pub fn clear_player_tick_fraction(&mut self) {
        self.player_tick_fraction = ::std::option::Option::None;
    }

    pub fn has_player_tick_fraction(&self) -> bool {
        self.player_tick_fraction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_player_tick_fraction(&mut self, v: f32) {
        self.player_tick_fraction = ::std::option::Option::Some(v);
    }

    // optional int32 frame_number = 20;

    pub fn frame_number(&self) -> i32 {
        self.frame_number.unwrap_or(0)
    }

    pub fn clear_frame_number(&mut self) {
        self.frame_number = ::std::option::Option::None;
    }

    pub fn has_frame_number(&self) -> bool {
        self.frame_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_frame_number(&mut self, v: i32) {
        self.frame_number = ::std::option::Option::Some(v);
    }

    // optional int32 target_ent_index = 8;

    pub fn target_ent_index(&self) -> i32 {
        self.target_ent_index.unwrap_or(-1i32)
    }

    pub fn clear_target_ent_index(&mut self) {
        self.target_ent_index = ::std::option::Option::None;
    }

    pub fn has_target_ent_index(&self) -> bool {
        self.target_ent_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_target_ent_index(&mut self, v: i32) {
        self.target_ent_index = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(15);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::networkbasetypes::CMsgQAngle>(
            "view_angles",
            |m: &CSGOInputHistoryEntryPB| { &m.view_angles },
            |m: &mut CSGOInputHistoryEntryPB| { &mut m.view_angles },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "render_tick_count",
            |m: &CSGOInputHistoryEntryPB| { &m.render_tick_count },
            |m: &mut CSGOInputHistoryEntryPB| { &mut m.render_tick_count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "render_tick_fraction",
            |m: &CSGOInputHistoryEntryPB| { &m.render_tick_fraction },
            |m: &mut CSGOInputHistoryEntryPB| { &mut m.render_tick_fraction },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "player_tick_count",
            |m: &CSGOInputHistoryEntryPB| { &m.player_tick_count },
            |m: &mut CSGOInputHistoryEntryPB| { &mut m.player_tick_count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "player_tick_fraction",
            |m: &CSGOInputHistoryEntryPB| { &m.player_tick_fraction },
            |m: &mut CSGOInputHistoryEntryPB| { &mut m.player_tick_fraction },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CSGOInterpolationInfoPB>(
            "cl_interp",
            |m: &CSGOInputHistoryEntryPB| { &m.cl_interp },
            |m: &mut CSGOInputHistoryEntryPB| { &mut m.cl_interp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CSGOInterpolationInfoPB>(
            "sv_interp0",
            |m: &CSGOInputHistoryEntryPB| { &m.sv_interp0 },
            |m: &mut CSGOInputHistoryEntryPB| { &mut m.sv_interp0 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CSGOInterpolationInfoPB>(
            "sv_interp1",
            |m: &CSGOInputHistoryEntryPB| { &m.sv_interp1 },
            |m: &mut CSGOInputHistoryEntryPB| { &mut m.sv_interp1 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CSGOInterpolationInfoPB>(
            "player_interp",
            |m: &CSGOInputHistoryEntryPB| { &m.player_interp },
            |m: &mut CSGOInputHistoryEntryPB| { &mut m.player_interp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "frame_number",
            |m: &CSGOInputHistoryEntryPB| { &m.frame_number },
            |m: &mut CSGOInputHistoryEntryPB| { &mut m.frame_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "target_ent_index",
            |m: &CSGOInputHistoryEntryPB| { &m.target_ent_index },
            |m: &mut CSGOInputHistoryEntryPB| { &mut m.target_ent_index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::networkbasetypes::CMsgVector>(
            "shoot_position",
            |m: &CSGOInputHistoryEntryPB| { &m.shoot_position },
            |m: &mut CSGOInputHistoryEntryPB| { &mut m.shoot_position },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::networkbasetypes::CMsgVector>(
            "target_head_pos_check",
            |m: &CSGOInputHistoryEntryPB| { &m.target_head_pos_check },
            |m: &mut CSGOInputHistoryEntryPB| { &mut m.target_head_pos_check },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::networkbasetypes::CMsgVector>(
            "target_abs_pos_check",
            |m: &CSGOInputHistoryEntryPB| { &m.target_abs_pos_check },
            |m: &mut CSGOInputHistoryEntryPB| { &mut m.target_abs_pos_check },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::networkbasetypes::CMsgQAngle>(
            "target_abs_ang_check",
            |m: &CSGOInputHistoryEntryPB| { &m.target_abs_ang_check },
            |m: &mut CSGOInputHistoryEntryPB| { &mut m.target_abs_ang_check },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CSGOInputHistoryEntryPB>(
            "CSGOInputHistoryEntryPB",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CSGOInputHistoryEntryPB {
    const NAME: &'static str = "CSGOInputHistoryEntryPB";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.view_angles)?;
                },
                32 => {
                    self.render_tick_count = ::std::option::Option::Some(is.read_int32()?);
                },
                45 => {
                    self.render_tick_fraction = ::std::option::Option::Some(is.read_float()?);
                },
                48 => {
                    self.player_tick_count = ::std::option::Option::Some(is.read_int32()?);
                },
                61 => {
                    self.player_tick_fraction = ::std::option::Option::Some(is.read_float()?);
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.cl_interp)?;
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sv_interp0)?;
                },
                114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sv_interp1)?;
                },
                122 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.player_interp)?;
                },
                160 => {
                    self.frame_number = ::std::option::Option::Some(is.read_int32()?);
                },
                64 => {
                    self.target_ent_index = ::std::option::Option::Some(is.read_int32()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.shoot_position)?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.target_head_pos_check)?;
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.target_abs_pos_check)?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.target_abs_ang_check)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.view_angles.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.render_tick_count {
            my_size += ::protobuf::rt::int32_size(4, v);
        }
        if let Some(v) = self.render_tick_fraction {
            my_size += 1 + 4;
        }
        if let Some(v) = self.player_tick_count {
            my_size += ::protobuf::rt::int32_size(6, v);
        }
        if let Some(v) = self.player_tick_fraction {
            my_size += 1 + 4;
        }
        if let Some(v) = self.cl_interp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.sv_interp0.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.sv_interp1.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.player_interp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.frame_number {
            my_size += ::protobuf::rt::int32_size(20, v);
        }
        if let Some(v) = self.target_ent_index {
            my_size += ::protobuf::rt::int32_size(8, v);
        }
        if let Some(v) = self.shoot_position.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.target_head_pos_check.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.target_abs_pos_check.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.target_abs_ang_check.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.view_angles.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.render_tick_count {
            os.write_int32(4, v)?;
        }
        if let Some(v) = self.render_tick_fraction {
            os.write_float(5, v)?;
        }
        if let Some(v) = self.player_tick_count {
            os.write_int32(6, v)?;
        }
        if let Some(v) = self.player_tick_fraction {
            os.write_float(7, v)?;
        }
        if let Some(v) = self.cl_interp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        if let Some(v) = self.sv_interp0.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        if let Some(v) = self.sv_interp1.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        }
        if let Some(v) = self.player_interp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        }
        if let Some(v) = self.frame_number {
            os.write_int32(20, v)?;
        }
        if let Some(v) = self.target_ent_index {
            os.write_int32(8, v)?;
        }
        if let Some(v) = self.shoot_position.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.target_head_pos_check.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if let Some(v) = self.target_abs_pos_check.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if let Some(v) = self.target_abs_ang_check.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSGOInputHistoryEntryPB {
        CSGOInputHistoryEntryPB::new()
    }

    fn clear(&mut self) {
        self.view_angles.clear();
        self.render_tick_count = ::std::option::Option::None;
        self.render_tick_fraction = ::std::option::Option::None;
        self.player_tick_count = ::std::option::Option::None;
        self.player_tick_fraction = ::std::option::Option::None;
        self.cl_interp.clear();
        self.sv_interp0.clear();
        self.sv_interp1.clear();
        self.player_interp.clear();
        self.frame_number = ::std::option::Option::None;
        self.target_ent_index = ::std::option::Option::None;
        self.shoot_position.clear();
        self.target_head_pos_check.clear();
        self.target_abs_pos_check.clear();
        self.target_abs_ang_check.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSGOInputHistoryEntryPB {
        static instance: CSGOInputHistoryEntryPB = CSGOInputHistoryEntryPB {
            view_angles: ::protobuf::MessageField::none(),
            render_tick_count: ::std::option::Option::None,
            render_tick_fraction: ::std::option::Option::None,
            player_tick_count: ::std::option::Option::None,
            player_tick_fraction: ::std::option::Option::None,
            cl_interp: ::protobuf::MessageField::none(),
            sv_interp0: ::protobuf::MessageField::none(),
            sv_interp1: ::protobuf::MessageField::none(),
            player_interp: ::protobuf::MessageField::none(),
            frame_number: ::std::option::Option::None,
            target_ent_index: ::std::option::Option::None,
            shoot_position: ::protobuf::MessageField::none(),
            target_head_pos_check: ::protobuf::MessageField::none(),
            target_abs_pos_check: ::protobuf::MessageField::none(),
            target_abs_ang_check: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CSGOInputHistoryEntryPB {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSGOInputHistoryEntryPB").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSGOInputHistoryEntryPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSGOInputHistoryEntryPB {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSGOUserCmdPB)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSGOUserCmdPB {
    // message fields
    // @@protoc_insertion_point(field:CSGOUserCmdPB.base)
    pub base: ::protobuf::MessageField<super::usercmd::CBaseUserCmdPB>,
    // @@protoc_insertion_point(field:CSGOUserCmdPB.input_history)
    pub input_history: ::std::vec::Vec<CSGOInputHistoryEntryPB>,
    // @@protoc_insertion_point(field:CSGOUserCmdPB.attack1_start_history_index)
    pub attack1_start_history_index: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CSGOUserCmdPB.attack2_start_history_index)
    pub attack2_start_history_index: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CSGOUserCmdPB.attack3_start_history_index)
    pub attack3_start_history_index: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CSGOUserCmdPB.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSGOUserCmdPB {
    fn default() -> &'a CSGOUserCmdPB {
        <CSGOUserCmdPB as ::protobuf::Message>::default_instance()
    }
}

impl CSGOUserCmdPB {
    pub fn new() -> CSGOUserCmdPB {
        ::std::default::Default::default()
    }

    // optional int32 attack1_start_history_index = 6;

    pub fn attack1_start_history_index(&self) -> i32 {
        self.attack1_start_history_index.unwrap_or(-1i32)
    }

    pub fn clear_attack1_start_history_index(&mut self) {
        self.attack1_start_history_index = ::std::option::Option::None;
    }

    pub fn has_attack1_start_history_index(&self) -> bool {
        self.attack1_start_history_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attack1_start_history_index(&mut self, v: i32) {
        self.attack1_start_history_index = ::std::option::Option::Some(v);
    }

    // optional int32 attack2_start_history_index = 7;

    pub fn attack2_start_history_index(&self) -> i32 {
        self.attack2_start_history_index.unwrap_or(-1i32)
    }

    pub fn clear_attack2_start_history_index(&mut self) {
        self.attack2_start_history_index = ::std::option::Option::None;
    }

    pub fn has_attack2_start_history_index(&self) -> bool {
        self.attack2_start_history_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attack2_start_history_index(&mut self, v: i32) {
        self.attack2_start_history_index = ::std::option::Option::Some(v);
    }

    // optional int32 attack3_start_history_index = 8;

    pub fn attack3_start_history_index(&self) -> i32 {
        self.attack3_start_history_index.unwrap_or(-1i32)
    }

    pub fn clear_attack3_start_history_index(&mut self) {
        self.attack3_start_history_index = ::std::option::Option::None;
    }

    pub fn has_attack3_start_history_index(&self) -> bool {
        self.attack3_start_history_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attack3_start_history_index(&mut self, v: i32) {
        self.attack3_start_history_index = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::usercmd::CBaseUserCmdPB>(
            "base",
            |m: &CSGOUserCmdPB| { &m.base },
            |m: &mut CSGOUserCmdPB| { &mut m.base },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "input_history",
            |m: &CSGOUserCmdPB| { &m.input_history },
            |m: &mut CSGOUserCmdPB| { &mut m.input_history },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "attack1_start_history_index",
            |m: &CSGOUserCmdPB| { &m.attack1_start_history_index },
            |m: &mut CSGOUserCmdPB| { &mut m.attack1_start_history_index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "attack2_start_history_index",
            |m: &CSGOUserCmdPB| { &m.attack2_start_history_index },
            |m: &mut CSGOUserCmdPB| { &mut m.attack2_start_history_index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "attack3_start_history_index",
            |m: &CSGOUserCmdPB| { &m.attack3_start_history_index },
            |m: &mut CSGOUserCmdPB| { &mut m.attack3_start_history_index },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CSGOUserCmdPB>(
            "CSGOUserCmdPB",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CSGOUserCmdPB {
    const NAME: &'static str = "CSGOUserCmdPB";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.base)?;
                },
                18 => {
                    self.input_history.push(is.read_message()?);
                },
                48 => {
                    self.attack1_start_history_index = ::std::option::Option::Some(is.read_int32()?);
                },
                56 => {
                    self.attack2_start_history_index = ::std::option::Option::Some(is.read_int32()?);
                },
                64 => {
                    self.attack3_start_history_index = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.base.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.input_history {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.attack1_start_history_index {
            my_size += ::protobuf::rt::int32_size(6, v);
        }
        if let Some(v) = self.attack2_start_history_index {
            my_size += ::protobuf::rt::int32_size(7, v);
        }
        if let Some(v) = self.attack3_start_history_index {
            my_size += ::protobuf::rt::int32_size(8, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.base.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.input_history {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.attack1_start_history_index {
            os.write_int32(6, v)?;
        }
        if let Some(v) = self.attack2_start_history_index {
            os.write_int32(7, v)?;
        }
        if let Some(v) = self.attack3_start_history_index {
            os.write_int32(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSGOUserCmdPB {
        CSGOUserCmdPB::new()
    }

    fn clear(&mut self) {
        self.base.clear();
        self.input_history.clear();
        self.attack1_start_history_index = ::std::option::Option::None;
        self.attack2_start_history_index = ::std::option::Option::None;
        self.attack3_start_history_index = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSGOUserCmdPB {
        static instance: CSGOUserCmdPB = CSGOUserCmdPB {
            base: ::protobuf::MessageField::none(),
            input_history: ::std::vec::Vec::new(),
            attack1_start_history_index: ::std::option::Option::None,
            attack2_start_history_index: ::std::option::Option::None,
            attack3_start_history_index: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CSGOUserCmdPB {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSGOUserCmdPB").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSGOUserCmdPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSGOUserCmdPB {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10cs_usercmd.proto\x1a\x16networkbasetypes.proto\x1a\rusercmd.proto\
    \"n\n\x17CSGOInterpolationInfoPB\x12\x1d\n\x08src_tick\x18\x01\x20\x01(\
    \x05:\x02-1R\x07srcTick\x12\x1d\n\x08dst_tick\x18\x02\x20\x01(\x05:\x02-\
    1R\x07dstTick\x12\x15\n\x04frac\x18\x03\x20\x01(\x02:\x010R\x04frac\"\
    \xac\x06\n\x17CSGOInputHistoryEntryPB\x12,\n\x0bview_angles\x18\x02\x20\
    \x01(\x0b2\x0b.CMsgQAngleR\nviewAngles\x12*\n\x11render_tick_count\x18\
    \x04\x20\x01(\x05R\x0frenderTickCount\x120\n\x14render_tick_fraction\x18\
    \x05\x20\x01(\x02R\x12renderTickFraction\x12*\n\x11player_tick_count\x18\
    \x06\x20\x01(\x05R\x0fplayerTickCount\x120\n\x14player_tick_fraction\x18\
    \x07\x20\x01(\x02R\x12playerTickFraction\x125\n\tcl_interp\x18\x0c\x20\
    \x01(\x0b2\x18.CSGOInterpolationInfoPBR\x08clInterp\x127\n\nsv_interp0\
    \x18\r\x20\x01(\x0b2\x18.CSGOInterpolationInfoPBR\tsvInterp0\x127\n\nsv_\
    interp1\x18\x0e\x20\x01(\x0b2\x18.CSGOInterpolationInfoPBR\tsvInterp1\
    \x12=\n\rplayer_interp\x18\x0f\x20\x01(\x0b2\x18.CSGOInterpolationInfoPB\
    R\x0cplayerInterp\x12!\n\x0cframe_number\x18\x14\x20\x01(\x05R\x0bframeN\
    umber\x12,\n\x10target_ent_index\x18\x08\x20\x01(\x05:\x02-1R\x0etargetE\
    ntIndex\x122\n\x0eshoot_position\x18\x03\x20\x01(\x0b2\x0b.CMsgVectorR\r\
    shootPosition\x12>\n\x15target_head_pos_check\x18\t\x20\x01(\x0b2\x0b.CM\
    sgVectorR\x12targetHeadPosCheck\x12<\n\x14target_abs_pos_check\x18\n\x20\
    \x01(\x0b2\x0b.CMsgVectorR\x11targetAbsPosCheck\x12<\n\x14target_abs_ang\
    _check\x18\x0b\x20\x01(\x0b2\x0b.CMsgQAngleR\x11targetAbsAngCheck\"\xbc\
    \x02\n\rCSGOUserCmdPB\x12#\n\x04base\x18\x01\x20\x01(\x0b2\x0f.CBaseUser\
    CmdPBR\x04base\x12=\n\rinput_history\x18\x02\x20\x03(\x0b2\x18.CSGOInput\
    HistoryEntryPBR\x0cinputHistory\x12A\n\x1battack1_start_history_index\
    \x18\x06\x20\x01(\x05:\x02-1R\x18attack1StartHistoryIndex\x12A\n\x1batta\
    ck2_start_history_index\x18\x07\x20\x01(\x05:\x02-1R\x18attack2StartHist\
    oryIndex\x12A\n\x1battack3_start_history_index\x18\x08\x20\x01(\x05:\x02\
    -1R\x18attack3StartHistoryIndex\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::networkbasetypes::file_descriptor().clone());
            deps.push(super::usercmd::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(CSGOInterpolationInfoPB::generated_message_descriptor_data());
            messages.push(CSGOInputHistoryEntryPB::generated_message_descriptor_data());
            messages.push(CSGOUserCmdPB::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
