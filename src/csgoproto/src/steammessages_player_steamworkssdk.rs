// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_player.steamworkssdk.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:CPlayer_GetMutualFriendsForIncomingInvites_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetMutualFriendsForIncomingInvites_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetMutualFriendsForIncomingInvites_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetMutualFriendsForIncomingInvites_Request {
    fn default() -> &'a CPlayer_GetMutualFriendsForIncomingInvites_Request {
        <CPlayer_GetMutualFriendsForIncomingInvites_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPlayer_GetMutualFriendsForIncomingInvites_Request {
    pub fn new() -> CPlayer_GetMutualFriendsForIncomingInvites_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetMutualFriendsForIncomingInvites_Request>(
            "CPlayer_GetMutualFriendsForIncomingInvites_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPlayer_GetMutualFriendsForIncomingInvites_Request {
    const NAME: &'static str = "CPlayer_GetMutualFriendsForIncomingInvites_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetMutualFriendsForIncomingInvites_Request {
        CPlayer_GetMutualFriendsForIncomingInvites_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetMutualFriendsForIncomingInvites_Request {
        static instance: CPlayer_GetMutualFriendsForIncomingInvites_Request = CPlayer_GetMutualFriendsForIncomingInvites_Request {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPlayer_GetMutualFriendsForIncomingInvites_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetMutualFriendsForIncomingInvites_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetMutualFriendsForIncomingInvites_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPlayer_GetMutualFriendsForIncomingInvites_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_IncomingInviteMutualFriendList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_IncomingInviteMutualFriendList {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_IncomingInviteMutualFriendList.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPlayer_IncomingInviteMutualFriendList.mutual_friend_account_ids)
    pub mutual_friend_account_ids: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_IncomingInviteMutualFriendList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_IncomingInviteMutualFriendList {
    fn default() -> &'a CPlayer_IncomingInviteMutualFriendList {
        <CPlayer_IncomingInviteMutualFriendList as ::protobuf::Message>::default_instance()
    }
}

impl CPlayer_IncomingInviteMutualFriendList {
    pub fn new() -> CPlayer_IncomingInviteMutualFriendList {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CPlayer_IncomingInviteMutualFriendList| { &m.steamid },
            |m: &mut CPlayer_IncomingInviteMutualFriendList| { &mut m.steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "mutual_friend_account_ids",
            |m: &CPlayer_IncomingInviteMutualFriendList| { &m.mutual_friend_account_ids },
            |m: &mut CPlayer_IncomingInviteMutualFriendList| { &mut m.mutual_friend_account_ids },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_IncomingInviteMutualFriendList>(
            "CPlayer_IncomingInviteMutualFriendList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPlayer_IncomingInviteMutualFriendList {
    const NAME: &'static str = "CPlayer_IncomingInviteMutualFriendList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                18 => {
                    is.read_repeated_packed_uint32_into(&mut self.mutual_friend_account_ids)?;
                },
                16 => {
                    self.mutual_friend_account_ids.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        for value in &self.mutual_friend_account_ids {
            my_size += ::protobuf::rt::uint32_size(2, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        for v in &self.mutual_friend_account_ids {
            os.write_uint32(2, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_IncomingInviteMutualFriendList {
        CPlayer_IncomingInviteMutualFriendList::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.mutual_friend_account_ids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_IncomingInviteMutualFriendList {
        static instance: CPlayer_IncomingInviteMutualFriendList = CPlayer_IncomingInviteMutualFriendList {
            steamid: ::std::option::Option::None,
            mutual_friend_account_ids: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPlayer_IncomingInviteMutualFriendList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_IncomingInviteMutualFriendList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_IncomingInviteMutualFriendList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPlayer_IncomingInviteMutualFriendList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetMutualFriendsForIncomingInvites_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetMutualFriendsForIncomingInvites_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetMutualFriendsForIncomingInvites_Response.incoming_invite_mutual_friends_lists)
    pub incoming_invite_mutual_friends_lists: ::std::vec::Vec<CPlayer_IncomingInviteMutualFriendList>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetMutualFriendsForIncomingInvites_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetMutualFriendsForIncomingInvites_Response {
    fn default() -> &'a CPlayer_GetMutualFriendsForIncomingInvites_Response {
        <CPlayer_GetMutualFriendsForIncomingInvites_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPlayer_GetMutualFriendsForIncomingInvites_Response {
    pub fn new() -> CPlayer_GetMutualFriendsForIncomingInvites_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "incoming_invite_mutual_friends_lists",
            |m: &CPlayer_GetMutualFriendsForIncomingInvites_Response| { &m.incoming_invite_mutual_friends_lists },
            |m: &mut CPlayer_GetMutualFriendsForIncomingInvites_Response| { &mut m.incoming_invite_mutual_friends_lists },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetMutualFriendsForIncomingInvites_Response>(
            "CPlayer_GetMutualFriendsForIncomingInvites_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPlayer_GetMutualFriendsForIncomingInvites_Response {
    const NAME: &'static str = "CPlayer_GetMutualFriendsForIncomingInvites_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.incoming_invite_mutual_friends_lists.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.incoming_invite_mutual_friends_lists {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.incoming_invite_mutual_friends_lists {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetMutualFriendsForIncomingInvites_Response {
        CPlayer_GetMutualFriendsForIncomingInvites_Response::new()
    }

    fn clear(&mut self) {
        self.incoming_invite_mutual_friends_lists.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetMutualFriendsForIncomingInvites_Response {
        static instance: CPlayer_GetMutualFriendsForIncomingInvites_Response = CPlayer_GetMutualFriendsForIncomingInvites_Response {
            incoming_invite_mutual_friends_lists: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPlayer_GetMutualFriendsForIncomingInvites_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetMutualFriendsForIncomingInvites_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetMutualFriendsForIncomingInvites_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPlayer_GetMutualFriendsForIncomingInvites_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetFriendsGameplayInfo_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetFriendsGameplayInfo_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetFriendsGameplayInfo_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetFriendsGameplayInfo_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetFriendsGameplayInfo_Request {
    fn default() -> &'a CPlayer_GetFriendsGameplayInfo_Request {
        <CPlayer_GetFriendsGameplayInfo_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPlayer_GetFriendsGameplayInfo_Request {
    pub fn new() -> CPlayer_GetFriendsGameplayInfo_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CPlayer_GetFriendsGameplayInfo_Request| { &m.appid },
            |m: &mut CPlayer_GetFriendsGameplayInfo_Request| { &mut m.appid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetFriendsGameplayInfo_Request>(
            "CPlayer_GetFriendsGameplayInfo_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPlayer_GetFriendsGameplayInfo_Request {
    const NAME: &'static str = "CPlayer_GetFriendsGameplayInfo_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetFriendsGameplayInfo_Request {
        CPlayer_GetFriendsGameplayInfo_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetFriendsGameplayInfo_Request {
        static instance: CPlayer_GetFriendsGameplayInfo_Request = CPlayer_GetFriendsGameplayInfo_Request {
            appid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPlayer_GetFriendsGameplayInfo_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetFriendsGameplayInfo_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetFriendsGameplayInfo_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPlayer_GetFriendsGameplayInfo_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetFriendsGameplayInfo_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetFriendsGameplayInfo_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetFriendsGameplayInfo_Response.your_info)
    pub your_info: ::protobuf::MessageField<cplayer_get_friends_gameplay_info_response::OwnGameplayInfo>,
    // @@protoc_insertion_point(field:CPlayer_GetFriendsGameplayInfo_Response.in_game)
    pub in_game: ::std::vec::Vec<cplayer_get_friends_gameplay_info_response::FriendsGameplayInfo>,
    // @@protoc_insertion_point(field:CPlayer_GetFriendsGameplayInfo_Response.played_recently)
    pub played_recently: ::std::vec::Vec<cplayer_get_friends_gameplay_info_response::FriendsGameplayInfo>,
    // @@protoc_insertion_point(field:CPlayer_GetFriendsGameplayInfo_Response.played_ever)
    pub played_ever: ::std::vec::Vec<cplayer_get_friends_gameplay_info_response::FriendsGameplayInfo>,
    // @@protoc_insertion_point(field:CPlayer_GetFriendsGameplayInfo_Response.owns)
    pub owns: ::std::vec::Vec<cplayer_get_friends_gameplay_info_response::FriendsGameplayInfo>,
    // @@protoc_insertion_point(field:CPlayer_GetFriendsGameplayInfo_Response.in_wishlist)
    pub in_wishlist: ::std::vec::Vec<cplayer_get_friends_gameplay_info_response::FriendsGameplayInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetFriendsGameplayInfo_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetFriendsGameplayInfo_Response {
    fn default() -> &'a CPlayer_GetFriendsGameplayInfo_Response {
        <CPlayer_GetFriendsGameplayInfo_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPlayer_GetFriendsGameplayInfo_Response {
    pub fn new() -> CPlayer_GetFriendsGameplayInfo_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, cplayer_get_friends_gameplay_info_response::OwnGameplayInfo>(
            "your_info",
            |m: &CPlayer_GetFriendsGameplayInfo_Response| { &m.your_info },
            |m: &mut CPlayer_GetFriendsGameplayInfo_Response| { &mut m.your_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "in_game",
            |m: &CPlayer_GetFriendsGameplayInfo_Response| { &m.in_game },
            |m: &mut CPlayer_GetFriendsGameplayInfo_Response| { &mut m.in_game },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "played_recently",
            |m: &CPlayer_GetFriendsGameplayInfo_Response| { &m.played_recently },
            |m: &mut CPlayer_GetFriendsGameplayInfo_Response| { &mut m.played_recently },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "played_ever",
            |m: &CPlayer_GetFriendsGameplayInfo_Response| { &m.played_ever },
            |m: &mut CPlayer_GetFriendsGameplayInfo_Response| { &mut m.played_ever },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "owns",
            |m: &CPlayer_GetFriendsGameplayInfo_Response| { &m.owns },
            |m: &mut CPlayer_GetFriendsGameplayInfo_Response| { &mut m.owns },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "in_wishlist",
            |m: &CPlayer_GetFriendsGameplayInfo_Response| { &m.in_wishlist },
            |m: &mut CPlayer_GetFriendsGameplayInfo_Response| { &mut m.in_wishlist },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetFriendsGameplayInfo_Response>(
            "CPlayer_GetFriendsGameplayInfo_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPlayer_GetFriendsGameplayInfo_Response {
    const NAME: &'static str = "CPlayer_GetFriendsGameplayInfo_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.your_info)?;
                },
                18 => {
                    self.in_game.push(is.read_message()?);
                },
                26 => {
                    self.played_recently.push(is.read_message()?);
                },
                34 => {
                    self.played_ever.push(is.read_message()?);
                },
                42 => {
                    self.owns.push(is.read_message()?);
                },
                50 => {
                    self.in_wishlist.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.your_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.in_game {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.played_recently {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.played_ever {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.owns {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.in_wishlist {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.your_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.in_game {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.played_recently {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        for v in &self.played_ever {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        for v in &self.owns {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        for v in &self.in_wishlist {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetFriendsGameplayInfo_Response {
        CPlayer_GetFriendsGameplayInfo_Response::new()
    }

    fn clear(&mut self) {
        self.your_info.clear();
        self.in_game.clear();
        self.played_recently.clear();
        self.played_ever.clear();
        self.owns.clear();
        self.in_wishlist.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetFriendsGameplayInfo_Response {
        static instance: CPlayer_GetFriendsGameplayInfo_Response = CPlayer_GetFriendsGameplayInfo_Response {
            your_info: ::protobuf::MessageField::none(),
            in_game: ::std::vec::Vec::new(),
            played_recently: ::std::vec::Vec::new(),
            played_ever: ::std::vec::Vec::new(),
            owns: ::std::vec::Vec::new(),
            in_wishlist: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPlayer_GetFriendsGameplayInfo_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetFriendsGameplayInfo_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetFriendsGameplayInfo_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPlayer_GetFriendsGameplayInfo_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CPlayer_GetFriendsGameplayInfo_Response`
pub mod cplayer_get_friends_gameplay_info_response {
    // @@protoc_insertion_point(message:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct FriendsGameplayInfo {
        // message fields
        // @@protoc_insertion_point(field:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.steamid)
        pub steamid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.minutes_played)
        pub minutes_played: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.minutes_played_forever)
        pub minutes_played_forever: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a FriendsGameplayInfo {
        fn default() -> &'a FriendsGameplayInfo {
            <FriendsGameplayInfo as ::protobuf::Message>::default_instance()
        }
    }

    impl FriendsGameplayInfo {
        pub fn new() -> FriendsGameplayInfo {
            ::std::default::Default::default()
        }

        // optional fixed64 steamid = 1;

        pub fn steamid(&self) -> u64 {
            self.steamid.unwrap_or(0)
        }

        pub fn clear_steamid(&mut self) {
            self.steamid = ::std::option::Option::None;
        }

        pub fn has_steamid(&self) -> bool {
            self.steamid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_steamid(&mut self, v: u64) {
            self.steamid = ::std::option::Option::Some(v);
        }

        // optional uint32 minutes_played = 2;

        pub fn minutes_played(&self) -> u32 {
            self.minutes_played.unwrap_or(0)
        }

        pub fn clear_minutes_played(&mut self) {
            self.minutes_played = ::std::option::Option::None;
        }

        pub fn has_minutes_played(&self) -> bool {
            self.minutes_played.is_some()
        }

        // Param is passed by value, moved
        pub fn set_minutes_played(&mut self, v: u32) {
            self.minutes_played = ::std::option::Option::Some(v);
        }

        // optional uint32 minutes_played_forever = 3;

        pub fn minutes_played_forever(&self) -> u32 {
            self.minutes_played_forever.unwrap_or(0)
        }

        pub fn clear_minutes_played_forever(&mut self) {
            self.minutes_played_forever = ::std::option::Option::None;
        }

        pub fn has_minutes_played_forever(&self) -> bool {
            self.minutes_played_forever.is_some()
        }

        // Param is passed by value, moved
        pub fn set_minutes_played_forever(&mut self, v: u32) {
            self.minutes_played_forever = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "steamid",
                |m: &FriendsGameplayInfo| { &m.steamid },
                |m: &mut FriendsGameplayInfo| { &mut m.steamid },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "minutes_played",
                |m: &FriendsGameplayInfo| { &m.minutes_played },
                |m: &mut FriendsGameplayInfo| { &mut m.minutes_played },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "minutes_played_forever",
                |m: &FriendsGameplayInfo| { &m.minutes_played_forever },
                |m: &mut FriendsGameplayInfo| { &mut m.minutes_played_forever },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FriendsGameplayInfo>(
                "CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for FriendsGameplayInfo {
        const NAME: &'static str = "FriendsGameplayInfo";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    9 => {
                        self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    16 => {
                        self.minutes_played = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.minutes_played_forever = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.steamid {
                my_size += 1 + 8;
            }
            if let Some(v) = self.minutes_played {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.minutes_played_forever {
                my_size += ::protobuf::rt::uint32_size(3, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.steamid {
                os.write_fixed64(1, v)?;
            }
            if let Some(v) = self.minutes_played {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.minutes_played_forever {
                os.write_uint32(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> FriendsGameplayInfo {
            FriendsGameplayInfo::new()
        }

        fn clear(&mut self) {
            self.steamid = ::std::option::Option::None;
            self.minutes_played = ::std::option::Option::None;
            self.minutes_played_forever = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static FriendsGameplayInfo {
            static instance: FriendsGameplayInfo = FriendsGameplayInfo {
                steamid: ::std::option::Option::None,
                minutes_played: ::std::option::Option::None,
                minutes_played_forever: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for FriendsGameplayInfo {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for FriendsGameplayInfo {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for FriendsGameplayInfo {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct OwnGameplayInfo {
        // message fields
        // @@protoc_insertion_point(field:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo.steamid)
        pub steamid: ::std::option::Option<u64>,
        // @@protoc_insertion_point(field:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo.minutes_played)
        pub minutes_played: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo.minutes_played_forever)
        pub minutes_played_forever: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo.in_wishlist)
        pub in_wishlist: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo.owned)
        pub owned: ::std::option::Option<bool>,
        // special fields
        // @@protoc_insertion_point(special_field:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a OwnGameplayInfo {
        fn default() -> &'a OwnGameplayInfo {
            <OwnGameplayInfo as ::protobuf::Message>::default_instance()
        }
    }

    impl OwnGameplayInfo {
        pub fn new() -> OwnGameplayInfo {
            ::std::default::Default::default()
        }

        // optional fixed64 steamid = 1;

        pub fn steamid(&self) -> u64 {
            self.steamid.unwrap_or(0)
        }

        pub fn clear_steamid(&mut self) {
            self.steamid = ::std::option::Option::None;
        }

        pub fn has_steamid(&self) -> bool {
            self.steamid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_steamid(&mut self, v: u64) {
            self.steamid = ::std::option::Option::Some(v);
        }

        // optional uint32 minutes_played = 2;

        pub fn minutes_played(&self) -> u32 {
            self.minutes_played.unwrap_or(0)
        }

        pub fn clear_minutes_played(&mut self) {
            self.minutes_played = ::std::option::Option::None;
        }

        pub fn has_minutes_played(&self) -> bool {
            self.minutes_played.is_some()
        }

        // Param is passed by value, moved
        pub fn set_minutes_played(&mut self, v: u32) {
            self.minutes_played = ::std::option::Option::Some(v);
        }

        // optional uint32 minutes_played_forever = 3;

        pub fn minutes_played_forever(&self) -> u32 {
            self.minutes_played_forever.unwrap_or(0)
        }

        pub fn clear_minutes_played_forever(&mut self) {
            self.minutes_played_forever = ::std::option::Option::None;
        }

        pub fn has_minutes_played_forever(&self) -> bool {
            self.minutes_played_forever.is_some()
        }

        // Param is passed by value, moved
        pub fn set_minutes_played_forever(&mut self, v: u32) {
            self.minutes_played_forever = ::std::option::Option::Some(v);
        }

        // optional bool in_wishlist = 4;

        pub fn in_wishlist(&self) -> bool {
            self.in_wishlist.unwrap_or(false)
        }

        pub fn clear_in_wishlist(&mut self) {
            self.in_wishlist = ::std::option::Option::None;
        }

        pub fn has_in_wishlist(&self) -> bool {
            self.in_wishlist.is_some()
        }

        // Param is passed by value, moved
        pub fn set_in_wishlist(&mut self, v: bool) {
            self.in_wishlist = ::std::option::Option::Some(v);
        }

        // optional bool owned = 5;

        pub fn owned(&self) -> bool {
            self.owned.unwrap_or(false)
        }

        pub fn clear_owned(&mut self) {
            self.owned = ::std::option::Option::None;
        }

        pub fn has_owned(&self) -> bool {
            self.owned.is_some()
        }

        // Param is passed by value, moved
        pub fn set_owned(&mut self, v: bool) {
            self.owned = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(5);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "steamid",
                |m: &OwnGameplayInfo| { &m.steamid },
                |m: &mut OwnGameplayInfo| { &mut m.steamid },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "minutes_played",
                |m: &OwnGameplayInfo| { &m.minutes_played },
                |m: &mut OwnGameplayInfo| { &mut m.minutes_played },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "minutes_played_forever",
                |m: &OwnGameplayInfo| { &m.minutes_played_forever },
                |m: &mut OwnGameplayInfo| { &mut m.minutes_played_forever },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "in_wishlist",
                |m: &OwnGameplayInfo| { &m.in_wishlist },
                |m: &mut OwnGameplayInfo| { &mut m.in_wishlist },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "owned",
                |m: &OwnGameplayInfo| { &m.owned },
                |m: &mut OwnGameplayInfo| { &mut m.owned },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OwnGameplayInfo>(
                "CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for OwnGameplayInfo {
        const NAME: &'static str = "OwnGameplayInfo";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    9 => {
                        self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                    },
                    16 => {
                        self.minutes_played = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.minutes_played_forever = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    32 => {
                        self.in_wishlist = ::std::option::Option::Some(is.read_bool()?);
                    },
                    40 => {
                        self.owned = ::std::option::Option::Some(is.read_bool()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.steamid {
                my_size += 1 + 8;
            }
            if let Some(v) = self.minutes_played {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.minutes_played_forever {
                my_size += ::protobuf::rt::uint32_size(3, v);
            }
            if let Some(v) = self.in_wishlist {
                my_size += 1 + 1;
            }
            if let Some(v) = self.owned {
                my_size += 1 + 1;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.steamid {
                os.write_fixed64(1, v)?;
            }
            if let Some(v) = self.minutes_played {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.minutes_played_forever {
                os.write_uint32(3, v)?;
            }
            if let Some(v) = self.in_wishlist {
                os.write_bool(4, v)?;
            }
            if let Some(v) = self.owned {
                os.write_bool(5, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> OwnGameplayInfo {
            OwnGameplayInfo::new()
        }

        fn clear(&mut self) {
            self.steamid = ::std::option::Option::None;
            self.minutes_played = ::std::option::Option::None;
            self.minutes_played_forever = ::std::option::Option::None;
            self.in_wishlist = ::std::option::Option::None;
            self.owned = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static OwnGameplayInfo {
            static instance: OwnGameplayInfo = OwnGameplayInfo {
                steamid: ::std::option::Option::None,
                minutes_played: ::std::option::Option::None,
                minutes_played_forever: ::std::option::Option::None,
                in_wishlist: ::std::option::Option::None,
                owned: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for OwnGameplayInfo {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for OwnGameplayInfo {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for OwnGameplayInfo {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CPlayer_GetGameBadgeLevels_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetGameBadgeLevels_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetGameBadgeLevels_Request.appid)
    pub appid: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetGameBadgeLevels_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetGameBadgeLevels_Request {
    fn default() -> &'a CPlayer_GetGameBadgeLevels_Request {
        <CPlayer_GetGameBadgeLevels_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPlayer_GetGameBadgeLevels_Request {
    pub fn new() -> CPlayer_GetGameBadgeLevels_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "appid",
            |m: &CPlayer_GetGameBadgeLevels_Request| { &m.appid },
            |m: &mut CPlayer_GetGameBadgeLevels_Request| { &mut m.appid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetGameBadgeLevels_Request>(
            "CPlayer_GetGameBadgeLevels_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPlayer_GetGameBadgeLevels_Request {
    const NAME: &'static str = "CPlayer_GetGameBadgeLevels_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetGameBadgeLevels_Request {
        CPlayer_GetGameBadgeLevels_Request::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetGameBadgeLevels_Request {
        static instance: CPlayer_GetGameBadgeLevels_Request = CPlayer_GetGameBadgeLevels_Request {
            appid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPlayer_GetGameBadgeLevels_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetGameBadgeLevels_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetGameBadgeLevels_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPlayer_GetGameBadgeLevels_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetGameBadgeLevels_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetGameBadgeLevels_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetGameBadgeLevels_Response.player_level)
    pub player_level: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPlayer_GetGameBadgeLevels_Response.badges)
    pub badges: ::std::vec::Vec<cplayer_get_game_badge_levels_response::Badge>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetGameBadgeLevels_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetGameBadgeLevels_Response {
    fn default() -> &'a CPlayer_GetGameBadgeLevels_Response {
        <CPlayer_GetGameBadgeLevels_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPlayer_GetGameBadgeLevels_Response {
    pub fn new() -> CPlayer_GetGameBadgeLevels_Response {
        ::std::default::Default::default()
    }

    // optional uint32 player_level = 1;

    pub fn player_level(&self) -> u32 {
        self.player_level.unwrap_or(0)
    }

    pub fn clear_player_level(&mut self) {
        self.player_level = ::std::option::Option::None;
    }

    pub fn has_player_level(&self) -> bool {
        self.player_level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_player_level(&mut self, v: u32) {
        self.player_level = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "player_level",
            |m: &CPlayer_GetGameBadgeLevels_Response| { &m.player_level },
            |m: &mut CPlayer_GetGameBadgeLevels_Response| { &mut m.player_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "badges",
            |m: &CPlayer_GetGameBadgeLevels_Response| { &m.badges },
            |m: &mut CPlayer_GetGameBadgeLevels_Response| { &mut m.badges },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetGameBadgeLevels_Response>(
            "CPlayer_GetGameBadgeLevels_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPlayer_GetGameBadgeLevels_Response {
    const NAME: &'static str = "CPlayer_GetGameBadgeLevels_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.player_level = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.badges.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.player_level {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        for value in &self.badges {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.player_level {
            os.write_uint32(1, v)?;
        }
        for v in &self.badges {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetGameBadgeLevels_Response {
        CPlayer_GetGameBadgeLevels_Response::new()
    }

    fn clear(&mut self) {
        self.player_level = ::std::option::Option::None;
        self.badges.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetGameBadgeLevels_Response {
        static instance: CPlayer_GetGameBadgeLevels_Response = CPlayer_GetGameBadgeLevels_Response {
            player_level: ::std::option::Option::None,
            badges: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPlayer_GetGameBadgeLevels_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetGameBadgeLevels_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetGameBadgeLevels_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPlayer_GetGameBadgeLevels_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CPlayer_GetGameBadgeLevels_Response`
pub mod cplayer_get_game_badge_levels_response {
    // @@protoc_insertion_point(message:CPlayer_GetGameBadgeLevels_Response.Badge)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Badge {
        // message fields
        // @@protoc_insertion_point(field:CPlayer_GetGameBadgeLevels_Response.Badge.level)
        pub level: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CPlayer_GetGameBadgeLevels_Response.Badge.series)
        pub series: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CPlayer_GetGameBadgeLevels_Response.Badge.border_color)
        pub border_color: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CPlayer_GetGameBadgeLevels_Response.Badge.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Badge {
        fn default() -> &'a Badge {
            <Badge as ::protobuf::Message>::default_instance()
        }
    }

    impl Badge {
        pub fn new() -> Badge {
            ::std::default::Default::default()
        }

        // optional int32 level = 1;

        pub fn level(&self) -> i32 {
            self.level.unwrap_or(0)
        }

        pub fn clear_level(&mut self) {
            self.level = ::std::option::Option::None;
        }

        pub fn has_level(&self) -> bool {
            self.level.is_some()
        }

        // Param is passed by value, moved
        pub fn set_level(&mut self, v: i32) {
            self.level = ::std::option::Option::Some(v);
        }

        // optional int32 series = 2;

        pub fn series(&self) -> i32 {
            self.series.unwrap_or(0)
        }

        pub fn clear_series(&mut self) {
            self.series = ::std::option::Option::None;
        }

        pub fn has_series(&self) -> bool {
            self.series.is_some()
        }

        // Param is passed by value, moved
        pub fn set_series(&mut self, v: i32) {
            self.series = ::std::option::Option::Some(v);
        }

        // optional uint32 border_color = 3;

        pub fn border_color(&self) -> u32 {
            self.border_color.unwrap_or(0)
        }

        pub fn clear_border_color(&mut self) {
            self.border_color = ::std::option::Option::None;
        }

        pub fn has_border_color(&self) -> bool {
            self.border_color.is_some()
        }

        // Param is passed by value, moved
        pub fn set_border_color(&mut self, v: u32) {
            self.border_color = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "level",
                |m: &Badge| { &m.level },
                |m: &mut Badge| { &mut m.level },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "series",
                |m: &Badge| { &m.series },
                |m: &mut Badge| { &mut m.series },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "border_color",
                |m: &Badge| { &m.border_color },
                |m: &mut Badge| { &mut m.border_color },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Badge>(
                "CPlayer_GetGameBadgeLevels_Response.Badge",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Badge {
        const NAME: &'static str = "Badge";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.level = ::std::option::Option::Some(is.read_int32()?);
                    },
                    16 => {
                        self.series = ::std::option::Option::Some(is.read_int32()?);
                    },
                    24 => {
                        self.border_color = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.level {
                my_size += ::protobuf::rt::int32_size(1, v);
            }
            if let Some(v) = self.series {
                my_size += ::protobuf::rt::int32_size(2, v);
            }
            if let Some(v) = self.border_color {
                my_size += ::protobuf::rt::uint32_size(3, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.level {
                os.write_int32(1, v)?;
            }
            if let Some(v) = self.series {
                os.write_int32(2, v)?;
            }
            if let Some(v) = self.border_color {
                os.write_uint32(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Badge {
            Badge::new()
        }

        fn clear(&mut self) {
            self.level = ::std::option::Option::None;
            self.series = ::std::option::Option::None;
            self.border_color = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Badge {
            static instance: Badge = Badge {
                level: ::std::option::Option::None,
                series: ::std::option::Option::None,
                border_color: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Badge {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CPlayer_GetGameBadgeLevels_Response.Badge").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Badge {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Badge {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CPlayer_GetLastPlayedTimes_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetLastPlayedTimes_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetLastPlayedTimes_Request.min_last_played)
    pub min_last_played: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetLastPlayedTimes_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetLastPlayedTimes_Request {
    fn default() -> &'a CPlayer_GetLastPlayedTimes_Request {
        <CPlayer_GetLastPlayedTimes_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPlayer_GetLastPlayedTimes_Request {
    pub fn new() -> CPlayer_GetLastPlayedTimes_Request {
        ::std::default::Default::default()
    }

    // optional uint32 min_last_played = 1;

    pub fn min_last_played(&self) -> u32 {
        self.min_last_played.unwrap_or(0)
    }

    pub fn clear_min_last_played(&mut self) {
        self.min_last_played = ::std::option::Option::None;
    }

    pub fn has_min_last_played(&self) -> bool {
        self.min_last_played.is_some()
    }

    // Param is passed by value, moved
    pub fn set_min_last_played(&mut self, v: u32) {
        self.min_last_played = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "min_last_played",
            |m: &CPlayer_GetLastPlayedTimes_Request| { &m.min_last_played },
            |m: &mut CPlayer_GetLastPlayedTimes_Request| { &mut m.min_last_played },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetLastPlayedTimes_Request>(
            "CPlayer_GetLastPlayedTimes_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPlayer_GetLastPlayedTimes_Request {
    const NAME: &'static str = "CPlayer_GetLastPlayedTimes_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.min_last_played = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.min_last_played {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.min_last_played {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetLastPlayedTimes_Request {
        CPlayer_GetLastPlayedTimes_Request::new()
    }

    fn clear(&mut self) {
        self.min_last_played = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetLastPlayedTimes_Request {
        static instance: CPlayer_GetLastPlayedTimes_Request = CPlayer_GetLastPlayedTimes_Request {
            min_last_played: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPlayer_GetLastPlayedTimes_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetLastPlayedTimes_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetLastPlayedTimes_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPlayer_GetLastPlayedTimes_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetLastPlayedTimes_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetLastPlayedTimes_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetLastPlayedTimes_Response.games)
    pub games: ::std::vec::Vec<cplayer_get_last_played_times_response::Game>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetLastPlayedTimes_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetLastPlayedTimes_Response {
    fn default() -> &'a CPlayer_GetLastPlayedTimes_Response {
        <CPlayer_GetLastPlayedTimes_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPlayer_GetLastPlayedTimes_Response {
    pub fn new() -> CPlayer_GetLastPlayedTimes_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "games",
            |m: &CPlayer_GetLastPlayedTimes_Response| { &m.games },
            |m: &mut CPlayer_GetLastPlayedTimes_Response| { &mut m.games },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetLastPlayedTimes_Response>(
            "CPlayer_GetLastPlayedTimes_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPlayer_GetLastPlayedTimes_Response {
    const NAME: &'static str = "CPlayer_GetLastPlayedTimes_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.games.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.games {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.games {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetLastPlayedTimes_Response {
        CPlayer_GetLastPlayedTimes_Response::new()
    }

    fn clear(&mut self) {
        self.games.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetLastPlayedTimes_Response {
        static instance: CPlayer_GetLastPlayedTimes_Response = CPlayer_GetLastPlayedTimes_Response {
            games: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPlayer_GetLastPlayedTimes_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetLastPlayedTimes_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetLastPlayedTimes_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPlayer_GetLastPlayedTimes_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CPlayer_GetLastPlayedTimes_Response`
pub mod cplayer_get_last_played_times_response {
    // @@protoc_insertion_point(message:CPlayer_GetLastPlayedTimes_Response.Game)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Game {
        // message fields
        // @@protoc_insertion_point(field:CPlayer_GetLastPlayedTimes_Response.Game.appid)
        pub appid: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CPlayer_GetLastPlayedTimes_Response.Game.last_playtime)
        pub last_playtime: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CPlayer_GetLastPlayedTimes_Response.Game.playtime_2weeks)
        pub playtime_2weeks: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CPlayer_GetLastPlayedTimes_Response.Game.playtime_forever)
        pub playtime_forever: ::std::option::Option<i32>,
        // @@protoc_insertion_point(field:CPlayer_GetLastPlayedTimes_Response.Game.first_playtime)
        pub first_playtime: ::std::option::Option<u32>,
        // special fields
        // @@protoc_insertion_point(special_field:CPlayer_GetLastPlayedTimes_Response.Game.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Game {
        fn default() -> &'a Game {
            <Game as ::protobuf::Message>::default_instance()
        }
    }

    impl Game {
        pub fn new() -> Game {
            ::std::default::Default::default()
        }

        // optional int32 appid = 1;

        pub fn appid(&self) -> i32 {
            self.appid.unwrap_or(0)
        }

        pub fn clear_appid(&mut self) {
            self.appid = ::std::option::Option::None;
        }

        pub fn has_appid(&self) -> bool {
            self.appid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_appid(&mut self, v: i32) {
            self.appid = ::std::option::Option::Some(v);
        }

        // optional uint32 last_playtime = 2;

        pub fn last_playtime(&self) -> u32 {
            self.last_playtime.unwrap_or(0)
        }

        pub fn clear_last_playtime(&mut self) {
            self.last_playtime = ::std::option::Option::None;
        }

        pub fn has_last_playtime(&self) -> bool {
            self.last_playtime.is_some()
        }

        // Param is passed by value, moved
        pub fn set_last_playtime(&mut self, v: u32) {
            self.last_playtime = ::std::option::Option::Some(v);
        }

        // optional int32 playtime_2weeks = 3;

        pub fn playtime_2weeks(&self) -> i32 {
            self.playtime_2weeks.unwrap_or(0)
        }

        pub fn clear_playtime_2weeks(&mut self) {
            self.playtime_2weeks = ::std::option::Option::None;
        }

        pub fn has_playtime_2weeks(&self) -> bool {
            self.playtime_2weeks.is_some()
        }

        // Param is passed by value, moved
        pub fn set_playtime_2weeks(&mut self, v: i32) {
            self.playtime_2weeks = ::std::option::Option::Some(v);
        }

        // optional int32 playtime_forever = 4;

        pub fn playtime_forever(&self) -> i32 {
            self.playtime_forever.unwrap_or(0)
        }

        pub fn clear_playtime_forever(&mut self) {
            self.playtime_forever = ::std::option::Option::None;
        }

        pub fn has_playtime_forever(&self) -> bool {
            self.playtime_forever.is_some()
        }

        // Param is passed by value, moved
        pub fn set_playtime_forever(&mut self, v: i32) {
            self.playtime_forever = ::std::option::Option::Some(v);
        }

        // optional uint32 first_playtime = 5;

        pub fn first_playtime(&self) -> u32 {
            self.first_playtime.unwrap_or(0)
        }

        pub fn clear_first_playtime(&mut self) {
            self.first_playtime = ::std::option::Option::None;
        }

        pub fn has_first_playtime(&self) -> bool {
            self.first_playtime.is_some()
        }

        // Param is passed by value, moved
        pub fn set_first_playtime(&mut self, v: u32) {
            self.first_playtime = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(5);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "appid",
                |m: &Game| { &m.appid },
                |m: &mut Game| { &mut m.appid },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "last_playtime",
                |m: &Game| { &m.last_playtime },
                |m: &mut Game| { &mut m.last_playtime },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "playtime_2weeks",
                |m: &Game| { &m.playtime_2weeks },
                |m: &mut Game| { &mut m.playtime_2weeks },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "playtime_forever",
                |m: &Game| { &m.playtime_forever },
                |m: &mut Game| { &mut m.playtime_forever },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "first_playtime",
                |m: &Game| { &m.first_playtime },
                |m: &mut Game| { &mut m.first_playtime },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Game>(
                "CPlayer_GetLastPlayedTimes_Response.Game",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Game {
        const NAME: &'static str = "Game";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.appid = ::std::option::Option::Some(is.read_int32()?);
                    },
                    16 => {
                        self.last_playtime = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.playtime_2weeks = ::std::option::Option::Some(is.read_int32()?);
                    },
                    32 => {
                        self.playtime_forever = ::std::option::Option::Some(is.read_int32()?);
                    },
                    40 => {
                        self.first_playtime = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.appid {
                my_size += ::protobuf::rt::int32_size(1, v);
            }
            if let Some(v) = self.last_playtime {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.playtime_2weeks {
                my_size += ::protobuf::rt::int32_size(3, v);
            }
            if let Some(v) = self.playtime_forever {
                my_size += ::protobuf::rt::int32_size(4, v);
            }
            if let Some(v) = self.first_playtime {
                my_size += ::protobuf::rt::uint32_size(5, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.appid {
                os.write_int32(1, v)?;
            }
            if let Some(v) = self.last_playtime {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.playtime_2weeks {
                os.write_int32(3, v)?;
            }
            if let Some(v) = self.playtime_forever {
                os.write_int32(4, v)?;
            }
            if let Some(v) = self.first_playtime {
                os.write_uint32(5, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Game {
            Game::new()
        }

        fn clear(&mut self) {
            self.appid = ::std::option::Option::None;
            self.last_playtime = ::std::option::Option::None;
            self.playtime_2weeks = ::std::option::Option::None;
            self.playtime_forever = ::std::option::Option::None;
            self.first_playtime = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Game {
            static instance: Game = Game {
                appid: ::std::option::Option::None,
                last_playtime: ::std::option::Option::None,
                playtime_2weeks: ::std::option::Option::None,
                playtime_forever: ::std::option::Option::None,
                first_playtime: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Game {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CPlayer_GetLastPlayedTimes_Response.Game").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Game {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Game {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CPlayer_AcceptSSA_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_AcceptSSA_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_AcceptSSA_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_AcceptSSA_Request {
    fn default() -> &'a CPlayer_AcceptSSA_Request {
        <CPlayer_AcceptSSA_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPlayer_AcceptSSA_Request {
    pub fn new() -> CPlayer_AcceptSSA_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_AcceptSSA_Request>(
            "CPlayer_AcceptSSA_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPlayer_AcceptSSA_Request {
    const NAME: &'static str = "CPlayer_AcceptSSA_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_AcceptSSA_Request {
        CPlayer_AcceptSSA_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_AcceptSSA_Request {
        static instance: CPlayer_AcceptSSA_Request = CPlayer_AcceptSSA_Request {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPlayer_AcceptSSA_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_AcceptSSA_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_AcceptSSA_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPlayer_AcceptSSA_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_AcceptSSA_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_AcceptSSA_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_AcceptSSA_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_AcceptSSA_Response {
    fn default() -> &'a CPlayer_AcceptSSA_Response {
        <CPlayer_AcceptSSA_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPlayer_AcceptSSA_Response {
    pub fn new() -> CPlayer_AcceptSSA_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_AcceptSSA_Response>(
            "CPlayer_AcceptSSA_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPlayer_AcceptSSA_Response {
    const NAME: &'static str = "CPlayer_AcceptSSA_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_AcceptSSA_Response {
        CPlayer_AcceptSSA_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_AcceptSSA_Response {
        static instance: CPlayer_AcceptSSA_Response = CPlayer_AcceptSSA_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPlayer_AcceptSSA_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_AcceptSSA_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_AcceptSSA_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPlayer_AcceptSSA_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetNicknameList_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetNicknameList_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetNicknameList_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetNicknameList_Request {
    fn default() -> &'a CPlayer_GetNicknameList_Request {
        <CPlayer_GetNicknameList_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPlayer_GetNicknameList_Request {
    pub fn new() -> CPlayer_GetNicknameList_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetNicknameList_Request>(
            "CPlayer_GetNicknameList_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPlayer_GetNicknameList_Request {
    const NAME: &'static str = "CPlayer_GetNicknameList_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetNicknameList_Request {
        CPlayer_GetNicknameList_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetNicknameList_Request {
        static instance: CPlayer_GetNicknameList_Request = CPlayer_GetNicknameList_Request {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPlayer_GetNicknameList_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetNicknameList_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetNicknameList_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPlayer_GetNicknameList_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetNicknameList_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetNicknameList_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetNicknameList_Response.nicknames)
    pub nicknames: ::std::vec::Vec<cplayer_get_nickname_list_response::PlayerNickname>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetNicknameList_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetNicknameList_Response {
    fn default() -> &'a CPlayer_GetNicknameList_Response {
        <CPlayer_GetNicknameList_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPlayer_GetNicknameList_Response {
    pub fn new() -> CPlayer_GetNicknameList_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "nicknames",
            |m: &CPlayer_GetNicknameList_Response| { &m.nicknames },
            |m: &mut CPlayer_GetNicknameList_Response| { &mut m.nicknames },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetNicknameList_Response>(
            "CPlayer_GetNicknameList_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPlayer_GetNicknameList_Response {
    const NAME: &'static str = "CPlayer_GetNicknameList_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.nicknames.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.nicknames {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.nicknames {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetNicknameList_Response {
        CPlayer_GetNicknameList_Response::new()
    }

    fn clear(&mut self) {
        self.nicknames.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetNicknameList_Response {
        static instance: CPlayer_GetNicknameList_Response = CPlayer_GetNicknameList_Response {
            nicknames: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPlayer_GetNicknameList_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetNicknameList_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetNicknameList_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPlayer_GetNicknameList_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CPlayer_GetNicknameList_Response`
pub mod cplayer_get_nickname_list_response {
    // @@protoc_insertion_point(message:CPlayer_GetNicknameList_Response.PlayerNickname)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct PlayerNickname {
        // message fields
        // @@protoc_insertion_point(field:CPlayer_GetNicknameList_Response.PlayerNickname.accountid)
        pub accountid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CPlayer_GetNicknameList_Response.PlayerNickname.nickname)
        pub nickname: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:CPlayer_GetNicknameList_Response.PlayerNickname.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a PlayerNickname {
        fn default() -> &'a PlayerNickname {
            <PlayerNickname as ::protobuf::Message>::default_instance()
        }
    }

    impl PlayerNickname {
        pub fn new() -> PlayerNickname {
            ::std::default::Default::default()
        }

        // optional fixed32 accountid = 1;

        pub fn accountid(&self) -> u32 {
            self.accountid.unwrap_or(0)
        }

        pub fn clear_accountid(&mut self) {
            self.accountid = ::std::option::Option::None;
        }

        pub fn has_accountid(&self) -> bool {
            self.accountid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_accountid(&mut self, v: u32) {
            self.accountid = ::std::option::Option::Some(v);
        }

        // optional string nickname = 2;

        pub fn nickname(&self) -> &str {
            match self.nickname.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_nickname(&mut self) {
            self.nickname = ::std::option::Option::None;
        }

        pub fn has_nickname(&self) -> bool {
            self.nickname.is_some()
        }

        // Param is passed by value, moved
        pub fn set_nickname(&mut self, v: ::std::string::String) {
            self.nickname = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_nickname(&mut self) -> &mut ::std::string::String {
            if self.nickname.is_none() {
                self.nickname = ::std::option::Option::Some(::std::string::String::new());
            }
            self.nickname.as_mut().unwrap()
        }

        // Take field
        pub fn take_nickname(&mut self) -> ::std::string::String {
            self.nickname.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "accountid",
                |m: &PlayerNickname| { &m.accountid },
                |m: &mut PlayerNickname| { &mut m.accountid },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "nickname",
                |m: &PlayerNickname| { &m.nickname },
                |m: &mut PlayerNickname| { &mut m.nickname },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlayerNickname>(
                "CPlayer_GetNicknameList_Response.PlayerNickname",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for PlayerNickname {
        const NAME: &'static str = "PlayerNickname";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    13 => {
                        self.accountid = ::std::option::Option::Some(is.read_fixed32()?);
                    },
                    18 => {
                        self.nickname = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.accountid {
                my_size += 1 + 4;
            }
            if let Some(v) = self.nickname.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.accountid {
                os.write_fixed32(1, v)?;
            }
            if let Some(v) = self.nickname.as_ref() {
                os.write_string(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> PlayerNickname {
            PlayerNickname::new()
        }

        fn clear(&mut self) {
            self.accountid = ::std::option::Option::None;
            self.nickname = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static PlayerNickname {
            static instance: PlayerNickname = PlayerNickname {
                accountid: ::std::option::Option::None,
                nickname: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for PlayerNickname {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("CPlayer_GetNicknameList_Response.PlayerNickname").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for PlayerNickname {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for PlayerNickname {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:CPlayer_GetPerFriendPreferences_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetPerFriendPreferences_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetPerFriendPreferences_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetPerFriendPreferences_Request {
    fn default() -> &'a CPlayer_GetPerFriendPreferences_Request {
        <CPlayer_GetPerFriendPreferences_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPlayer_GetPerFriendPreferences_Request {
    pub fn new() -> CPlayer_GetPerFriendPreferences_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetPerFriendPreferences_Request>(
            "CPlayer_GetPerFriendPreferences_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPlayer_GetPerFriendPreferences_Request {
    const NAME: &'static str = "CPlayer_GetPerFriendPreferences_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetPerFriendPreferences_Request {
        CPlayer_GetPerFriendPreferences_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetPerFriendPreferences_Request {
        static instance: CPlayer_GetPerFriendPreferences_Request = CPlayer_GetPerFriendPreferences_Request {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPlayer_GetPerFriendPreferences_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetPerFriendPreferences_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetPerFriendPreferences_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPlayer_GetPerFriendPreferences_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:PerFriendPreferences)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PerFriendPreferences {
    // message fields
    // @@protoc_insertion_point(field:PerFriendPreferences.accountid)
    pub accountid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:PerFriendPreferences.nickname)
    pub nickname: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:PerFriendPreferences.notifications_showingame)
    pub notifications_showingame: ::std::option::Option<::protobuf::EnumOrUnknown<ENotificationSetting>>,
    // @@protoc_insertion_point(field:PerFriendPreferences.notifications_showonline)
    pub notifications_showonline: ::std::option::Option<::protobuf::EnumOrUnknown<ENotificationSetting>>,
    // @@protoc_insertion_point(field:PerFriendPreferences.notifications_showmessages)
    pub notifications_showmessages: ::std::option::Option<::protobuf::EnumOrUnknown<ENotificationSetting>>,
    // @@protoc_insertion_point(field:PerFriendPreferences.sounds_showingame)
    pub sounds_showingame: ::std::option::Option<::protobuf::EnumOrUnknown<ENotificationSetting>>,
    // @@protoc_insertion_point(field:PerFriendPreferences.sounds_showonline)
    pub sounds_showonline: ::std::option::Option<::protobuf::EnumOrUnknown<ENotificationSetting>>,
    // @@protoc_insertion_point(field:PerFriendPreferences.sounds_showmessages)
    pub sounds_showmessages: ::std::option::Option<::protobuf::EnumOrUnknown<ENotificationSetting>>,
    // @@protoc_insertion_point(field:PerFriendPreferences.notifications_sendmobile)
    pub notifications_sendmobile: ::std::option::Option<::protobuf::EnumOrUnknown<ENotificationSetting>>,
    // special fields
    // @@protoc_insertion_point(special_field:PerFriendPreferences.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PerFriendPreferences {
    fn default() -> &'a PerFriendPreferences {
        <PerFriendPreferences as ::protobuf::Message>::default_instance()
    }
}

impl PerFriendPreferences {
    pub fn new() -> PerFriendPreferences {
        ::std::default::Default::default()
    }

    // optional fixed32 accountid = 1;

    pub fn accountid(&self) -> u32 {
        self.accountid.unwrap_or(0)
    }

    pub fn clear_accountid(&mut self) {
        self.accountid = ::std::option::Option::None;
    }

    pub fn has_accountid(&self) -> bool {
        self.accountid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountid(&mut self, v: u32) {
        self.accountid = ::std::option::Option::Some(v);
    }

    // optional string nickname = 2;

    pub fn nickname(&self) -> &str {
        match self.nickname.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_nickname(&mut self) {
        self.nickname = ::std::option::Option::None;
    }

    pub fn has_nickname(&self) -> bool {
        self.nickname.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nickname(&mut self, v: ::std::string::String) {
        self.nickname = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nickname(&mut self) -> &mut ::std::string::String {
        if self.nickname.is_none() {
            self.nickname = ::std::option::Option::Some(::std::string::String::new());
        }
        self.nickname.as_mut().unwrap()
    }

    // Take field
    pub fn take_nickname(&mut self) -> ::std::string::String {
        self.nickname.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .ENotificationSetting notifications_showingame = 3;

    pub fn notifications_showingame(&self) -> ENotificationSetting {
        match self.notifications_showingame {
            Some(e) => e.enum_value_or(ENotificationSetting::k_ENotificationSettingNotifyUseDefault),
            None => ENotificationSetting::k_ENotificationSettingNotifyUseDefault,
        }
    }

    pub fn clear_notifications_showingame(&mut self) {
        self.notifications_showingame = ::std::option::Option::None;
    }

    pub fn has_notifications_showingame(&self) -> bool {
        self.notifications_showingame.is_some()
    }

    // Param is passed by value, moved
    pub fn set_notifications_showingame(&mut self, v: ENotificationSetting) {
        self.notifications_showingame = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional .ENotificationSetting notifications_showonline = 4;

    pub fn notifications_showonline(&self) -> ENotificationSetting {
        match self.notifications_showonline {
            Some(e) => e.enum_value_or(ENotificationSetting::k_ENotificationSettingNotifyUseDefault),
            None => ENotificationSetting::k_ENotificationSettingNotifyUseDefault,
        }
    }

    pub fn clear_notifications_showonline(&mut self) {
        self.notifications_showonline = ::std::option::Option::None;
    }

    pub fn has_notifications_showonline(&self) -> bool {
        self.notifications_showonline.is_some()
    }

    // Param is passed by value, moved
    pub fn set_notifications_showonline(&mut self, v: ENotificationSetting) {
        self.notifications_showonline = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional .ENotificationSetting notifications_showmessages = 5;

    pub fn notifications_showmessages(&self) -> ENotificationSetting {
        match self.notifications_showmessages {
            Some(e) => e.enum_value_or(ENotificationSetting::k_ENotificationSettingNotifyUseDefault),
            None => ENotificationSetting::k_ENotificationSettingNotifyUseDefault,
        }
    }

    pub fn clear_notifications_showmessages(&mut self) {
        self.notifications_showmessages = ::std::option::Option::None;
    }

    pub fn has_notifications_showmessages(&self) -> bool {
        self.notifications_showmessages.is_some()
    }

    // Param is passed by value, moved
    pub fn set_notifications_showmessages(&mut self, v: ENotificationSetting) {
        self.notifications_showmessages = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional .ENotificationSetting sounds_showingame = 6;

    pub fn sounds_showingame(&self) -> ENotificationSetting {
        match self.sounds_showingame {
            Some(e) => e.enum_value_or(ENotificationSetting::k_ENotificationSettingNotifyUseDefault),
            None => ENotificationSetting::k_ENotificationSettingNotifyUseDefault,
        }
    }

    pub fn clear_sounds_showingame(&mut self) {
        self.sounds_showingame = ::std::option::Option::None;
    }

    pub fn has_sounds_showingame(&self) -> bool {
        self.sounds_showingame.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sounds_showingame(&mut self, v: ENotificationSetting) {
        self.sounds_showingame = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional .ENotificationSetting sounds_showonline = 7;

    pub fn sounds_showonline(&self) -> ENotificationSetting {
        match self.sounds_showonline {
            Some(e) => e.enum_value_or(ENotificationSetting::k_ENotificationSettingNotifyUseDefault),
            None => ENotificationSetting::k_ENotificationSettingNotifyUseDefault,
        }
    }

    pub fn clear_sounds_showonline(&mut self) {
        self.sounds_showonline = ::std::option::Option::None;
    }

    pub fn has_sounds_showonline(&self) -> bool {
        self.sounds_showonline.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sounds_showonline(&mut self, v: ENotificationSetting) {
        self.sounds_showonline = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional .ENotificationSetting sounds_showmessages = 8;

    pub fn sounds_showmessages(&self) -> ENotificationSetting {
        match self.sounds_showmessages {
            Some(e) => e.enum_value_or(ENotificationSetting::k_ENotificationSettingNotifyUseDefault),
            None => ENotificationSetting::k_ENotificationSettingNotifyUseDefault,
        }
    }

    pub fn clear_sounds_showmessages(&mut self) {
        self.sounds_showmessages = ::std::option::Option::None;
    }

    pub fn has_sounds_showmessages(&self) -> bool {
        self.sounds_showmessages.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sounds_showmessages(&mut self, v: ENotificationSetting) {
        self.sounds_showmessages = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional .ENotificationSetting notifications_sendmobile = 9;

    pub fn notifications_sendmobile(&self) -> ENotificationSetting {
        match self.notifications_sendmobile {
            Some(e) => e.enum_value_or(ENotificationSetting::k_ENotificationSettingNotifyUseDefault),
            None => ENotificationSetting::k_ENotificationSettingNotifyUseDefault,
        }
    }

    pub fn clear_notifications_sendmobile(&mut self) {
        self.notifications_sendmobile = ::std::option::Option::None;
    }

    pub fn has_notifications_sendmobile(&self) -> bool {
        self.notifications_sendmobile.is_some()
    }

    // Param is passed by value, moved
    pub fn set_notifications_sendmobile(&mut self, v: ENotificationSetting) {
        self.notifications_sendmobile = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "accountid",
            |m: &PerFriendPreferences| { &m.accountid },
            |m: &mut PerFriendPreferences| { &mut m.accountid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "nickname",
            |m: &PerFriendPreferences| { &m.nickname },
            |m: &mut PerFriendPreferences| { &mut m.nickname },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "notifications_showingame",
            |m: &PerFriendPreferences| { &m.notifications_showingame },
            |m: &mut PerFriendPreferences| { &mut m.notifications_showingame },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "notifications_showonline",
            |m: &PerFriendPreferences| { &m.notifications_showonline },
            |m: &mut PerFriendPreferences| { &mut m.notifications_showonline },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "notifications_showmessages",
            |m: &PerFriendPreferences| { &m.notifications_showmessages },
            |m: &mut PerFriendPreferences| { &mut m.notifications_showmessages },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "sounds_showingame",
            |m: &PerFriendPreferences| { &m.sounds_showingame },
            |m: &mut PerFriendPreferences| { &mut m.sounds_showingame },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "sounds_showonline",
            |m: &PerFriendPreferences| { &m.sounds_showonline },
            |m: &mut PerFriendPreferences| { &mut m.sounds_showonline },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "sounds_showmessages",
            |m: &PerFriendPreferences| { &m.sounds_showmessages },
            |m: &mut PerFriendPreferences| { &mut m.sounds_showmessages },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "notifications_sendmobile",
            |m: &PerFriendPreferences| { &m.notifications_sendmobile },
            |m: &mut PerFriendPreferences| { &mut m.notifications_sendmobile },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PerFriendPreferences>(
            "PerFriendPreferences",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PerFriendPreferences {
    const NAME: &'static str = "PerFriendPreferences";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.accountid = ::std::option::Option::Some(is.read_fixed32()?);
                },
                18 => {
                    self.nickname = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.notifications_showingame = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                32 => {
                    self.notifications_showonline = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                40 => {
                    self.notifications_showmessages = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                48 => {
                    self.sounds_showingame = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                56 => {
                    self.sounds_showonline = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                64 => {
                    self.sounds_showmessages = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                72 => {
                    self.notifications_sendmobile = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.accountid {
            my_size += 1 + 4;
        }
        if let Some(v) = self.nickname.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.notifications_showingame {
            my_size += ::protobuf::rt::int32_size(3, v.value());
        }
        if let Some(v) = self.notifications_showonline {
            my_size += ::protobuf::rt::int32_size(4, v.value());
        }
        if let Some(v) = self.notifications_showmessages {
            my_size += ::protobuf::rt::int32_size(5, v.value());
        }
        if let Some(v) = self.sounds_showingame {
            my_size += ::protobuf::rt::int32_size(6, v.value());
        }
        if let Some(v) = self.sounds_showonline {
            my_size += ::protobuf::rt::int32_size(7, v.value());
        }
        if let Some(v) = self.sounds_showmessages {
            my_size += ::protobuf::rt::int32_size(8, v.value());
        }
        if let Some(v) = self.notifications_sendmobile {
            my_size += ::protobuf::rt::int32_size(9, v.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.accountid {
            os.write_fixed32(1, v)?;
        }
        if let Some(v) = self.nickname.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.notifications_showingame {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.notifications_showonline {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.notifications_showmessages {
            os.write_enum(5, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.sounds_showingame {
            os.write_enum(6, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.sounds_showonline {
            os.write_enum(7, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.sounds_showmessages {
            os.write_enum(8, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.notifications_sendmobile {
            os.write_enum(9, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PerFriendPreferences {
        PerFriendPreferences::new()
    }

    fn clear(&mut self) {
        self.accountid = ::std::option::Option::None;
        self.nickname = ::std::option::Option::None;
        self.notifications_showingame = ::std::option::Option::None;
        self.notifications_showonline = ::std::option::Option::None;
        self.notifications_showmessages = ::std::option::Option::None;
        self.sounds_showingame = ::std::option::Option::None;
        self.sounds_showonline = ::std::option::Option::None;
        self.sounds_showmessages = ::std::option::Option::None;
        self.notifications_sendmobile = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PerFriendPreferences {
        static instance: PerFriendPreferences = PerFriendPreferences {
            accountid: ::std::option::Option::None,
            nickname: ::std::option::Option::None,
            notifications_showingame: ::std::option::Option::None,
            notifications_showonline: ::std::option::Option::None,
            notifications_showmessages: ::std::option::Option::None,
            sounds_showingame: ::std::option::Option::None,
            sounds_showonline: ::std::option::Option::None,
            sounds_showmessages: ::std::option::Option::None,
            notifications_sendmobile: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PerFriendPreferences {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PerFriendPreferences").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PerFriendPreferences {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PerFriendPreferences {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetPerFriendPreferences_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetPerFriendPreferences_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetPerFriendPreferences_Response.preferences)
    pub preferences: ::std::vec::Vec<PerFriendPreferences>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetPerFriendPreferences_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetPerFriendPreferences_Response {
    fn default() -> &'a CPlayer_GetPerFriendPreferences_Response {
        <CPlayer_GetPerFriendPreferences_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPlayer_GetPerFriendPreferences_Response {
    pub fn new() -> CPlayer_GetPerFriendPreferences_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "preferences",
            |m: &CPlayer_GetPerFriendPreferences_Response| { &m.preferences },
            |m: &mut CPlayer_GetPerFriendPreferences_Response| { &mut m.preferences },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetPerFriendPreferences_Response>(
            "CPlayer_GetPerFriendPreferences_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPlayer_GetPerFriendPreferences_Response {
    const NAME: &'static str = "CPlayer_GetPerFriendPreferences_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.preferences.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.preferences {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.preferences {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetPerFriendPreferences_Response {
        CPlayer_GetPerFriendPreferences_Response::new()
    }

    fn clear(&mut self) {
        self.preferences.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetPerFriendPreferences_Response {
        static instance: CPlayer_GetPerFriendPreferences_Response = CPlayer_GetPerFriendPreferences_Response {
            preferences: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPlayer_GetPerFriendPreferences_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetPerFriendPreferences_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetPerFriendPreferences_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPlayer_GetPerFriendPreferences_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_SetPerFriendPreferences_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_SetPerFriendPreferences_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_SetPerFriendPreferences_Request.preferences)
    pub preferences: ::protobuf::MessageField<PerFriendPreferences>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_SetPerFriendPreferences_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_SetPerFriendPreferences_Request {
    fn default() -> &'a CPlayer_SetPerFriendPreferences_Request {
        <CPlayer_SetPerFriendPreferences_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPlayer_SetPerFriendPreferences_Request {
    pub fn new() -> CPlayer_SetPerFriendPreferences_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, PerFriendPreferences>(
            "preferences",
            |m: &CPlayer_SetPerFriendPreferences_Request| { &m.preferences },
            |m: &mut CPlayer_SetPerFriendPreferences_Request| { &mut m.preferences },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_SetPerFriendPreferences_Request>(
            "CPlayer_SetPerFriendPreferences_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPlayer_SetPerFriendPreferences_Request {
    const NAME: &'static str = "CPlayer_SetPerFriendPreferences_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.preferences)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.preferences.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.preferences.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_SetPerFriendPreferences_Request {
        CPlayer_SetPerFriendPreferences_Request::new()
    }

    fn clear(&mut self) {
        self.preferences.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_SetPerFriendPreferences_Request {
        static instance: CPlayer_SetPerFriendPreferences_Request = CPlayer_SetPerFriendPreferences_Request {
            preferences: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPlayer_SetPerFriendPreferences_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_SetPerFriendPreferences_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_SetPerFriendPreferences_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPlayer_SetPerFriendPreferences_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_SetPerFriendPreferences_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_SetPerFriendPreferences_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_SetPerFriendPreferences_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_SetPerFriendPreferences_Response {
    fn default() -> &'a CPlayer_SetPerFriendPreferences_Response {
        <CPlayer_SetPerFriendPreferences_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPlayer_SetPerFriendPreferences_Response {
    pub fn new() -> CPlayer_SetPerFriendPreferences_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_SetPerFriendPreferences_Response>(
            "CPlayer_SetPerFriendPreferences_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPlayer_SetPerFriendPreferences_Response {
    const NAME: &'static str = "CPlayer_SetPerFriendPreferences_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_SetPerFriendPreferences_Response {
        CPlayer_SetPerFriendPreferences_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_SetPerFriendPreferences_Response {
        static instance: CPlayer_SetPerFriendPreferences_Response = CPlayer_SetPerFriendPreferences_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPlayer_SetPerFriendPreferences_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_SetPerFriendPreferences_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_SetPerFriendPreferences_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPlayer_SetPerFriendPreferences_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_AddFriend_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_AddFriend_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_AddFriend_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_AddFriend_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_AddFriend_Request {
    fn default() -> &'a CPlayer_AddFriend_Request {
        <CPlayer_AddFriend_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPlayer_AddFriend_Request {
    pub fn new() -> CPlayer_AddFriend_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CPlayer_AddFriend_Request| { &m.steamid },
            |m: &mut CPlayer_AddFriend_Request| { &mut m.steamid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_AddFriend_Request>(
            "CPlayer_AddFriend_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPlayer_AddFriend_Request {
    const NAME: &'static str = "CPlayer_AddFriend_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_AddFriend_Request {
        CPlayer_AddFriend_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_AddFriend_Request {
        static instance: CPlayer_AddFriend_Request = CPlayer_AddFriend_Request {
            steamid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPlayer_AddFriend_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_AddFriend_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_AddFriend_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPlayer_AddFriend_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_AddFriend_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_AddFriend_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_AddFriend_Response.invite_sent)
    pub invite_sent: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CPlayer_AddFriend_Response.friend_relationship)
    pub friend_relationship: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_AddFriend_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_AddFriend_Response {
    fn default() -> &'a CPlayer_AddFriend_Response {
        <CPlayer_AddFriend_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPlayer_AddFriend_Response {
    pub fn new() -> CPlayer_AddFriend_Response {
        ::std::default::Default::default()
    }

    // optional bool invite_sent = 1;

    pub fn invite_sent(&self) -> bool {
        self.invite_sent.unwrap_or(false)
    }

    pub fn clear_invite_sent(&mut self) {
        self.invite_sent = ::std::option::Option::None;
    }

    pub fn has_invite_sent(&self) -> bool {
        self.invite_sent.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invite_sent(&mut self, v: bool) {
        self.invite_sent = ::std::option::Option::Some(v);
    }

    // optional uint32 friend_relationship = 2;

    pub fn friend_relationship(&self) -> u32 {
        self.friend_relationship.unwrap_or(0)
    }

    pub fn clear_friend_relationship(&mut self) {
        self.friend_relationship = ::std::option::Option::None;
    }

    pub fn has_friend_relationship(&self) -> bool {
        self.friend_relationship.is_some()
    }

    // Param is passed by value, moved
    pub fn set_friend_relationship(&mut self, v: u32) {
        self.friend_relationship = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "invite_sent",
            |m: &CPlayer_AddFriend_Response| { &m.invite_sent },
            |m: &mut CPlayer_AddFriend_Response| { &mut m.invite_sent },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "friend_relationship",
            |m: &CPlayer_AddFriend_Response| { &m.friend_relationship },
            |m: &mut CPlayer_AddFriend_Response| { &mut m.friend_relationship },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_AddFriend_Response>(
            "CPlayer_AddFriend_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPlayer_AddFriend_Response {
    const NAME: &'static str = "CPlayer_AddFriend_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.invite_sent = ::std::option::Option::Some(is.read_bool()?);
                },
                16 => {
                    self.friend_relationship = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.invite_sent {
            my_size += 1 + 1;
        }
        if let Some(v) = self.friend_relationship {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.invite_sent {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.friend_relationship {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_AddFriend_Response {
        CPlayer_AddFriend_Response::new()
    }

    fn clear(&mut self) {
        self.invite_sent = ::std::option::Option::None;
        self.friend_relationship = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_AddFriend_Response {
        static instance: CPlayer_AddFriend_Response = CPlayer_AddFriend_Response {
            invite_sent: ::std::option::Option::None,
            friend_relationship: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPlayer_AddFriend_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_AddFriend_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_AddFriend_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPlayer_AddFriend_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_RemoveFriend_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_RemoveFriend_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_RemoveFriend_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_RemoveFriend_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_RemoveFriend_Request {
    fn default() -> &'a CPlayer_RemoveFriend_Request {
        <CPlayer_RemoveFriend_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPlayer_RemoveFriend_Request {
    pub fn new() -> CPlayer_RemoveFriend_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CPlayer_RemoveFriend_Request| { &m.steamid },
            |m: &mut CPlayer_RemoveFriend_Request| { &mut m.steamid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_RemoveFriend_Request>(
            "CPlayer_RemoveFriend_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPlayer_RemoveFriend_Request {
    const NAME: &'static str = "CPlayer_RemoveFriend_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_RemoveFriend_Request {
        CPlayer_RemoveFriend_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_RemoveFriend_Request {
        static instance: CPlayer_RemoveFriend_Request = CPlayer_RemoveFriend_Request {
            steamid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPlayer_RemoveFriend_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_RemoveFriend_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_RemoveFriend_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPlayer_RemoveFriend_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_RemoveFriend_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_RemoveFriend_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_RemoveFriend_Response.friend_relationship)
    pub friend_relationship: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_RemoveFriend_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_RemoveFriend_Response {
    fn default() -> &'a CPlayer_RemoveFriend_Response {
        <CPlayer_RemoveFriend_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPlayer_RemoveFriend_Response {
    pub fn new() -> CPlayer_RemoveFriend_Response {
        ::std::default::Default::default()
    }

    // optional uint32 friend_relationship = 1;

    pub fn friend_relationship(&self) -> u32 {
        self.friend_relationship.unwrap_or(0)
    }

    pub fn clear_friend_relationship(&mut self) {
        self.friend_relationship = ::std::option::Option::None;
    }

    pub fn has_friend_relationship(&self) -> bool {
        self.friend_relationship.is_some()
    }

    // Param is passed by value, moved
    pub fn set_friend_relationship(&mut self, v: u32) {
        self.friend_relationship = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "friend_relationship",
            |m: &CPlayer_RemoveFriend_Response| { &m.friend_relationship },
            |m: &mut CPlayer_RemoveFriend_Response| { &mut m.friend_relationship },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_RemoveFriend_Response>(
            "CPlayer_RemoveFriend_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPlayer_RemoveFriend_Response {
    const NAME: &'static str = "CPlayer_RemoveFriend_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.friend_relationship = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.friend_relationship {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.friend_relationship {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_RemoveFriend_Response {
        CPlayer_RemoveFriend_Response::new()
    }

    fn clear(&mut self) {
        self.friend_relationship = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_RemoveFriend_Response {
        static instance: CPlayer_RemoveFriend_Response = CPlayer_RemoveFriend_Response {
            friend_relationship: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPlayer_RemoveFriend_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_RemoveFriend_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_RemoveFriend_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPlayer_RemoveFriend_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_IgnoreFriend_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_IgnoreFriend_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_IgnoreFriend_Request.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPlayer_IgnoreFriend_Request.unignore)
    pub unignore: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_IgnoreFriend_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_IgnoreFriend_Request {
    fn default() -> &'a CPlayer_IgnoreFriend_Request {
        <CPlayer_IgnoreFriend_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPlayer_IgnoreFriend_Request {
    pub fn new() -> CPlayer_IgnoreFriend_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional bool unignore = 2;

    pub fn unignore(&self) -> bool {
        self.unignore.unwrap_or(false)
    }

    pub fn clear_unignore(&mut self) {
        self.unignore = ::std::option::Option::None;
    }

    pub fn has_unignore(&self) -> bool {
        self.unignore.is_some()
    }

    // Param is passed by value, moved
    pub fn set_unignore(&mut self, v: bool) {
        self.unignore = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "steamid",
            |m: &CPlayer_IgnoreFriend_Request| { &m.steamid },
            |m: &mut CPlayer_IgnoreFriend_Request| { &mut m.steamid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "unignore",
            |m: &CPlayer_IgnoreFriend_Request| { &m.unignore },
            |m: &mut CPlayer_IgnoreFriend_Request| { &mut m.unignore },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_IgnoreFriend_Request>(
            "CPlayer_IgnoreFriend_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPlayer_IgnoreFriend_Request {
    const NAME: &'static str = "CPlayer_IgnoreFriend_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.unignore = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.unignore {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.unignore {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_IgnoreFriend_Request {
        CPlayer_IgnoreFriend_Request::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.unignore = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_IgnoreFriend_Request {
        static instance: CPlayer_IgnoreFriend_Request = CPlayer_IgnoreFriend_Request {
            steamid: ::std::option::Option::None,
            unignore: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPlayer_IgnoreFriend_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_IgnoreFriend_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_IgnoreFriend_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPlayer_IgnoreFriend_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_IgnoreFriend_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_IgnoreFriend_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_IgnoreFriend_Response.friend_relationship)
    pub friend_relationship: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_IgnoreFriend_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_IgnoreFriend_Response {
    fn default() -> &'a CPlayer_IgnoreFriend_Response {
        <CPlayer_IgnoreFriend_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPlayer_IgnoreFriend_Response {
    pub fn new() -> CPlayer_IgnoreFriend_Response {
        ::std::default::Default::default()
    }

    // optional uint32 friend_relationship = 1;

    pub fn friend_relationship(&self) -> u32 {
        self.friend_relationship.unwrap_or(0)
    }

    pub fn clear_friend_relationship(&mut self) {
        self.friend_relationship = ::std::option::Option::None;
    }

    pub fn has_friend_relationship(&self) -> bool {
        self.friend_relationship.is_some()
    }

    // Param is passed by value, moved
    pub fn set_friend_relationship(&mut self, v: u32) {
        self.friend_relationship = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "friend_relationship",
            |m: &CPlayer_IgnoreFriend_Response| { &m.friend_relationship },
            |m: &mut CPlayer_IgnoreFriend_Response| { &mut m.friend_relationship },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_IgnoreFriend_Response>(
            "CPlayer_IgnoreFriend_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPlayer_IgnoreFriend_Response {
    const NAME: &'static str = "CPlayer_IgnoreFriend_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.friend_relationship = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.friend_relationship {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.friend_relationship {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_IgnoreFriend_Response {
        CPlayer_IgnoreFriend_Response::new()
    }

    fn clear(&mut self) {
        self.friend_relationship = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_IgnoreFriend_Response {
        static instance: CPlayer_IgnoreFriend_Response = CPlayer_IgnoreFriend_Response {
            friend_relationship: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPlayer_IgnoreFriend_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_IgnoreFriend_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_IgnoreFriend_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPlayer_IgnoreFriend_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetCommunityPreferences_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetCommunityPreferences_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetCommunityPreferences_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetCommunityPreferences_Request {
    fn default() -> &'a CPlayer_GetCommunityPreferences_Request {
        <CPlayer_GetCommunityPreferences_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPlayer_GetCommunityPreferences_Request {
    pub fn new() -> CPlayer_GetCommunityPreferences_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetCommunityPreferences_Request>(
            "CPlayer_GetCommunityPreferences_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPlayer_GetCommunityPreferences_Request {
    const NAME: &'static str = "CPlayer_GetCommunityPreferences_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetCommunityPreferences_Request {
        CPlayer_GetCommunityPreferences_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetCommunityPreferences_Request {
        static instance: CPlayer_GetCommunityPreferences_Request = CPlayer_GetCommunityPreferences_Request {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPlayer_GetCommunityPreferences_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetCommunityPreferences_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetCommunityPreferences_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPlayer_GetCommunityPreferences_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_CommunityPreferences)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_CommunityPreferences {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_CommunityPreferences.hide_adult_content_violence)
    pub hide_adult_content_violence: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CPlayer_CommunityPreferences.hide_adult_content_sex)
    pub hide_adult_content_sex: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CPlayer_CommunityPreferences.parenthesize_nicknames)
    pub parenthesize_nicknames: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CPlayer_CommunityPreferences.timestamp_updated)
    pub timestamp_updated: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_CommunityPreferences.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_CommunityPreferences {
    fn default() -> &'a CPlayer_CommunityPreferences {
        <CPlayer_CommunityPreferences as ::protobuf::Message>::default_instance()
    }
}

impl CPlayer_CommunityPreferences {
    pub fn new() -> CPlayer_CommunityPreferences {
        ::std::default::Default::default()
    }

    // optional bool hide_adult_content_violence = 1;

    pub fn hide_adult_content_violence(&self) -> bool {
        self.hide_adult_content_violence.unwrap_or(true)
    }

    pub fn clear_hide_adult_content_violence(&mut self) {
        self.hide_adult_content_violence = ::std::option::Option::None;
    }

    pub fn has_hide_adult_content_violence(&self) -> bool {
        self.hide_adult_content_violence.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hide_adult_content_violence(&mut self, v: bool) {
        self.hide_adult_content_violence = ::std::option::Option::Some(v);
    }

    // optional bool hide_adult_content_sex = 2;

    pub fn hide_adult_content_sex(&self) -> bool {
        self.hide_adult_content_sex.unwrap_or(true)
    }

    pub fn clear_hide_adult_content_sex(&mut self) {
        self.hide_adult_content_sex = ::std::option::Option::None;
    }

    pub fn has_hide_adult_content_sex(&self) -> bool {
        self.hide_adult_content_sex.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hide_adult_content_sex(&mut self, v: bool) {
        self.hide_adult_content_sex = ::std::option::Option::Some(v);
    }

    // optional bool parenthesize_nicknames = 4;

    pub fn parenthesize_nicknames(&self) -> bool {
        self.parenthesize_nicknames.unwrap_or(false)
    }

    pub fn clear_parenthesize_nicknames(&mut self) {
        self.parenthesize_nicknames = ::std::option::Option::None;
    }

    pub fn has_parenthesize_nicknames(&self) -> bool {
        self.parenthesize_nicknames.is_some()
    }

    // Param is passed by value, moved
    pub fn set_parenthesize_nicknames(&mut self, v: bool) {
        self.parenthesize_nicknames = ::std::option::Option::Some(v);
    }

    // optional uint32 timestamp_updated = 3;

    pub fn timestamp_updated(&self) -> u32 {
        self.timestamp_updated.unwrap_or(0)
    }

    pub fn clear_timestamp_updated(&mut self) {
        self.timestamp_updated = ::std::option::Option::None;
    }

    pub fn has_timestamp_updated(&self) -> bool {
        self.timestamp_updated.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp_updated(&mut self, v: u32) {
        self.timestamp_updated = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "hide_adult_content_violence",
            |m: &CPlayer_CommunityPreferences| { &m.hide_adult_content_violence },
            |m: &mut CPlayer_CommunityPreferences| { &mut m.hide_adult_content_violence },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "hide_adult_content_sex",
            |m: &CPlayer_CommunityPreferences| { &m.hide_adult_content_sex },
            |m: &mut CPlayer_CommunityPreferences| { &mut m.hide_adult_content_sex },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "parenthesize_nicknames",
            |m: &CPlayer_CommunityPreferences| { &m.parenthesize_nicknames },
            |m: &mut CPlayer_CommunityPreferences| { &mut m.parenthesize_nicknames },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "timestamp_updated",
            |m: &CPlayer_CommunityPreferences| { &m.timestamp_updated },
            |m: &mut CPlayer_CommunityPreferences| { &mut m.timestamp_updated },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_CommunityPreferences>(
            "CPlayer_CommunityPreferences",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPlayer_CommunityPreferences {
    const NAME: &'static str = "CPlayer_CommunityPreferences";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.hide_adult_content_violence = ::std::option::Option::Some(is.read_bool()?);
                },
                16 => {
                    self.hide_adult_content_sex = ::std::option::Option::Some(is.read_bool()?);
                },
                32 => {
                    self.parenthesize_nicknames = ::std::option::Option::Some(is.read_bool()?);
                },
                24 => {
                    self.timestamp_updated = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.hide_adult_content_violence {
            my_size += 1 + 1;
        }
        if let Some(v) = self.hide_adult_content_sex {
            my_size += 1 + 1;
        }
        if let Some(v) = self.parenthesize_nicknames {
            my_size += 1 + 1;
        }
        if let Some(v) = self.timestamp_updated {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.hide_adult_content_violence {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.hide_adult_content_sex {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.parenthesize_nicknames {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.timestamp_updated {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_CommunityPreferences {
        CPlayer_CommunityPreferences::new()
    }

    fn clear(&mut self) {
        self.hide_adult_content_violence = ::std::option::Option::None;
        self.hide_adult_content_sex = ::std::option::Option::None;
        self.parenthesize_nicknames = ::std::option::Option::None;
        self.timestamp_updated = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_CommunityPreferences {
        static instance: CPlayer_CommunityPreferences = CPlayer_CommunityPreferences {
            hide_adult_content_violence: ::std::option::Option::None,
            hide_adult_content_sex: ::std::option::Option::None,
            parenthesize_nicknames: ::std::option::Option::None,
            timestamp_updated: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPlayer_CommunityPreferences {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_CommunityPreferences").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_CommunityPreferences {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPlayer_CommunityPreferences {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetCommunityPreferences_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetCommunityPreferences_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetCommunityPreferences_Response.preferences)
    pub preferences: ::protobuf::MessageField<CPlayer_CommunityPreferences>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetCommunityPreferences_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetCommunityPreferences_Response {
    fn default() -> &'a CPlayer_GetCommunityPreferences_Response {
        <CPlayer_GetCommunityPreferences_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPlayer_GetCommunityPreferences_Response {
    pub fn new() -> CPlayer_GetCommunityPreferences_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CPlayer_CommunityPreferences>(
            "preferences",
            |m: &CPlayer_GetCommunityPreferences_Response| { &m.preferences },
            |m: &mut CPlayer_GetCommunityPreferences_Response| { &mut m.preferences },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetCommunityPreferences_Response>(
            "CPlayer_GetCommunityPreferences_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPlayer_GetCommunityPreferences_Response {
    const NAME: &'static str = "CPlayer_GetCommunityPreferences_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.preferences)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.preferences.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.preferences.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetCommunityPreferences_Response {
        CPlayer_GetCommunityPreferences_Response::new()
    }

    fn clear(&mut self) {
        self.preferences.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetCommunityPreferences_Response {
        static instance: CPlayer_GetCommunityPreferences_Response = CPlayer_GetCommunityPreferences_Response {
            preferences: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPlayer_GetCommunityPreferences_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetCommunityPreferences_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetCommunityPreferences_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPlayer_GetCommunityPreferences_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_SetCommunityPreferences_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_SetCommunityPreferences_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_SetCommunityPreferences_Request.preferences)
    pub preferences: ::protobuf::MessageField<CPlayer_CommunityPreferences>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_SetCommunityPreferences_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_SetCommunityPreferences_Request {
    fn default() -> &'a CPlayer_SetCommunityPreferences_Request {
        <CPlayer_SetCommunityPreferences_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPlayer_SetCommunityPreferences_Request {
    pub fn new() -> CPlayer_SetCommunityPreferences_Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CPlayer_CommunityPreferences>(
            "preferences",
            |m: &CPlayer_SetCommunityPreferences_Request| { &m.preferences },
            |m: &mut CPlayer_SetCommunityPreferences_Request| { &mut m.preferences },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_SetCommunityPreferences_Request>(
            "CPlayer_SetCommunityPreferences_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPlayer_SetCommunityPreferences_Request {
    const NAME: &'static str = "CPlayer_SetCommunityPreferences_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.preferences)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.preferences.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.preferences.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_SetCommunityPreferences_Request {
        CPlayer_SetCommunityPreferences_Request::new()
    }

    fn clear(&mut self) {
        self.preferences.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_SetCommunityPreferences_Request {
        static instance: CPlayer_SetCommunityPreferences_Request = CPlayer_SetCommunityPreferences_Request {
            preferences: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPlayer_SetCommunityPreferences_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_SetCommunityPreferences_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_SetCommunityPreferences_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPlayer_SetCommunityPreferences_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_SetCommunityPreferences_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_SetCommunityPreferences_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_SetCommunityPreferences_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_SetCommunityPreferences_Response {
    fn default() -> &'a CPlayer_SetCommunityPreferences_Response {
        <CPlayer_SetCommunityPreferences_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPlayer_SetCommunityPreferences_Response {
    pub fn new() -> CPlayer_SetCommunityPreferences_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_SetCommunityPreferences_Response>(
            "CPlayer_SetCommunityPreferences_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPlayer_SetCommunityPreferences_Response {
    const NAME: &'static str = "CPlayer_SetCommunityPreferences_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_SetCommunityPreferences_Response {
        CPlayer_SetCommunityPreferences_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_SetCommunityPreferences_Response {
        static instance: CPlayer_SetCommunityPreferences_Response = CPlayer_SetCommunityPreferences_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPlayer_SetCommunityPreferences_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_SetCommunityPreferences_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_SetCommunityPreferences_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPlayer_SetCommunityPreferences_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetNewSteamAnnouncementState_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetNewSteamAnnouncementState_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetNewSteamAnnouncementState_Request.language)
    pub language: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetNewSteamAnnouncementState_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetNewSteamAnnouncementState_Request {
    fn default() -> &'a CPlayer_GetNewSteamAnnouncementState_Request {
        <CPlayer_GetNewSteamAnnouncementState_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPlayer_GetNewSteamAnnouncementState_Request {
    pub fn new() -> CPlayer_GetNewSteamAnnouncementState_Request {
        ::std::default::Default::default()
    }

    // optional int32 language = 1;

    pub fn language(&self) -> i32 {
        self.language.unwrap_or(0)
    }

    pub fn clear_language(&mut self) {
        self.language = ::std::option::Option::None;
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: i32) {
        self.language = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "language",
            |m: &CPlayer_GetNewSteamAnnouncementState_Request| { &m.language },
            |m: &mut CPlayer_GetNewSteamAnnouncementState_Request| { &mut m.language },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetNewSteamAnnouncementState_Request>(
            "CPlayer_GetNewSteamAnnouncementState_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPlayer_GetNewSteamAnnouncementState_Request {
    const NAME: &'static str = "CPlayer_GetNewSteamAnnouncementState_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.language = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.language {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.language {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetNewSteamAnnouncementState_Request {
        CPlayer_GetNewSteamAnnouncementState_Request::new()
    }

    fn clear(&mut self) {
        self.language = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetNewSteamAnnouncementState_Request {
        static instance: CPlayer_GetNewSteamAnnouncementState_Request = CPlayer_GetNewSteamAnnouncementState_Request {
            language: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPlayer_GetNewSteamAnnouncementState_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetNewSteamAnnouncementState_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetNewSteamAnnouncementState_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPlayer_GetNewSteamAnnouncementState_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_GetNewSteamAnnouncementState_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_GetNewSteamAnnouncementState_Response {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_GetNewSteamAnnouncementState_Response.state)
    pub state: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CPlayer_GetNewSteamAnnouncementState_Response.announcement_headline)
    pub announcement_headline: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPlayer_GetNewSteamAnnouncementState_Response.announcement_url)
    pub announcement_url: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CPlayer_GetNewSteamAnnouncementState_Response.time_posted)
    pub time_posted: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CPlayer_GetNewSteamAnnouncementState_Response.announcement_gid)
    pub announcement_gid: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_GetNewSteamAnnouncementState_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_GetNewSteamAnnouncementState_Response {
    fn default() -> &'a CPlayer_GetNewSteamAnnouncementState_Response {
        <CPlayer_GetNewSteamAnnouncementState_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPlayer_GetNewSteamAnnouncementState_Response {
    pub fn new() -> CPlayer_GetNewSteamAnnouncementState_Response {
        ::std::default::Default::default()
    }

    // optional int32 state = 1;

    pub fn state(&self) -> i32 {
        self.state.unwrap_or(0)
    }

    pub fn clear_state(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: i32) {
        self.state = ::std::option::Option::Some(v);
    }

    // optional string announcement_headline = 2;

    pub fn announcement_headline(&self) -> &str {
        match self.announcement_headline.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_announcement_headline(&mut self) {
        self.announcement_headline = ::std::option::Option::None;
    }

    pub fn has_announcement_headline(&self) -> bool {
        self.announcement_headline.is_some()
    }

    // Param is passed by value, moved
    pub fn set_announcement_headline(&mut self, v: ::std::string::String) {
        self.announcement_headline = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_announcement_headline(&mut self) -> &mut ::std::string::String {
        if self.announcement_headline.is_none() {
            self.announcement_headline = ::std::option::Option::Some(::std::string::String::new());
        }
        self.announcement_headline.as_mut().unwrap()
    }

    // Take field
    pub fn take_announcement_headline(&mut self) -> ::std::string::String {
        self.announcement_headline.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string announcement_url = 3;

    pub fn announcement_url(&self) -> &str {
        match self.announcement_url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_announcement_url(&mut self) {
        self.announcement_url = ::std::option::Option::None;
    }

    pub fn has_announcement_url(&self) -> bool {
        self.announcement_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_announcement_url(&mut self, v: ::std::string::String) {
        self.announcement_url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_announcement_url(&mut self) -> &mut ::std::string::String {
        if self.announcement_url.is_none() {
            self.announcement_url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.announcement_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_announcement_url(&mut self) -> ::std::string::String {
        self.announcement_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 time_posted = 4;

    pub fn time_posted(&self) -> u32 {
        self.time_posted.unwrap_or(0)
    }

    pub fn clear_time_posted(&mut self) {
        self.time_posted = ::std::option::Option::None;
    }

    pub fn has_time_posted(&self) -> bool {
        self.time_posted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_posted(&mut self, v: u32) {
        self.time_posted = ::std::option::Option::Some(v);
    }

    // optional uint64 announcement_gid = 5;

    pub fn announcement_gid(&self) -> u64 {
        self.announcement_gid.unwrap_or(0)
    }

    pub fn clear_announcement_gid(&mut self) {
        self.announcement_gid = ::std::option::Option::None;
    }

    pub fn has_announcement_gid(&self) -> bool {
        self.announcement_gid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_announcement_gid(&mut self, v: u64) {
        self.announcement_gid = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "state",
            |m: &CPlayer_GetNewSteamAnnouncementState_Response| { &m.state },
            |m: &mut CPlayer_GetNewSteamAnnouncementState_Response| { &mut m.state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "announcement_headline",
            |m: &CPlayer_GetNewSteamAnnouncementState_Response| { &m.announcement_headline },
            |m: &mut CPlayer_GetNewSteamAnnouncementState_Response| { &mut m.announcement_headline },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "announcement_url",
            |m: &CPlayer_GetNewSteamAnnouncementState_Response| { &m.announcement_url },
            |m: &mut CPlayer_GetNewSteamAnnouncementState_Response| { &mut m.announcement_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_posted",
            |m: &CPlayer_GetNewSteamAnnouncementState_Response| { &m.time_posted },
            |m: &mut CPlayer_GetNewSteamAnnouncementState_Response| { &mut m.time_posted },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "announcement_gid",
            |m: &CPlayer_GetNewSteamAnnouncementState_Response| { &m.announcement_gid },
            |m: &mut CPlayer_GetNewSteamAnnouncementState_Response| { &mut m.announcement_gid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_GetNewSteamAnnouncementState_Response>(
            "CPlayer_GetNewSteamAnnouncementState_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPlayer_GetNewSteamAnnouncementState_Response {
    const NAME: &'static str = "CPlayer_GetNewSteamAnnouncementState_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.state = ::std::option::Option::Some(is.read_int32()?);
                },
                18 => {
                    self.announcement_headline = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.announcement_url = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.time_posted = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.announcement_gid = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.state {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.announcement_headline.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.announcement_url.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.time_posted {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.announcement_gid {
            my_size += ::protobuf::rt::uint64_size(5, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.state {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.announcement_headline.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.announcement_url.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.time_posted {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.announcement_gid {
            os.write_uint64(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_GetNewSteamAnnouncementState_Response {
        CPlayer_GetNewSteamAnnouncementState_Response::new()
    }

    fn clear(&mut self) {
        self.state = ::std::option::Option::None;
        self.announcement_headline = ::std::option::Option::None;
        self.announcement_url = ::std::option::Option::None;
        self.time_posted = ::std::option::Option::None;
        self.announcement_gid = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_GetNewSteamAnnouncementState_Response {
        static instance: CPlayer_GetNewSteamAnnouncementState_Response = CPlayer_GetNewSteamAnnouncementState_Response {
            state: ::std::option::Option::None,
            announcement_headline: ::std::option::Option::None,
            announcement_url: ::std::option::Option::None,
            time_posted: ::std::option::Option::None,
            announcement_gid: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPlayer_GetNewSteamAnnouncementState_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_GetNewSteamAnnouncementState_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_GetNewSteamAnnouncementState_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPlayer_GetNewSteamAnnouncementState_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_UpdateSteamAnnouncementLastRead_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_UpdateSteamAnnouncementLastRead_Request {
    // message fields
    // @@protoc_insertion_point(field:CPlayer_UpdateSteamAnnouncementLastRead_Request.announcement_gid)
    pub announcement_gid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CPlayer_UpdateSteamAnnouncementLastRead_Request.time_posted)
    pub time_posted: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_UpdateSteamAnnouncementLastRead_Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_UpdateSteamAnnouncementLastRead_Request {
    fn default() -> &'a CPlayer_UpdateSteamAnnouncementLastRead_Request {
        <CPlayer_UpdateSteamAnnouncementLastRead_Request as ::protobuf::Message>::default_instance()
    }
}

impl CPlayer_UpdateSteamAnnouncementLastRead_Request {
    pub fn new() -> CPlayer_UpdateSteamAnnouncementLastRead_Request {
        ::std::default::Default::default()
    }

    // optional uint64 announcement_gid = 1;

    pub fn announcement_gid(&self) -> u64 {
        self.announcement_gid.unwrap_or(0)
    }

    pub fn clear_announcement_gid(&mut self) {
        self.announcement_gid = ::std::option::Option::None;
    }

    pub fn has_announcement_gid(&self) -> bool {
        self.announcement_gid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_announcement_gid(&mut self, v: u64) {
        self.announcement_gid = ::std::option::Option::Some(v);
    }

    // optional uint32 time_posted = 2;

    pub fn time_posted(&self) -> u32 {
        self.time_posted.unwrap_or(0)
    }

    pub fn clear_time_posted(&mut self) {
        self.time_posted = ::std::option::Option::None;
    }

    pub fn has_time_posted(&self) -> bool {
        self.time_posted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_posted(&mut self, v: u32) {
        self.time_posted = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "announcement_gid",
            |m: &CPlayer_UpdateSteamAnnouncementLastRead_Request| { &m.announcement_gid },
            |m: &mut CPlayer_UpdateSteamAnnouncementLastRead_Request| { &mut m.announcement_gid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "time_posted",
            |m: &CPlayer_UpdateSteamAnnouncementLastRead_Request| { &m.time_posted },
            |m: &mut CPlayer_UpdateSteamAnnouncementLastRead_Request| { &mut m.time_posted },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_UpdateSteamAnnouncementLastRead_Request>(
            "CPlayer_UpdateSteamAnnouncementLastRead_Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPlayer_UpdateSteamAnnouncementLastRead_Request {
    const NAME: &'static str = "CPlayer_UpdateSteamAnnouncementLastRead_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.announcement_gid = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.time_posted = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.announcement_gid {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.time_posted {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.announcement_gid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.time_posted {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_UpdateSteamAnnouncementLastRead_Request {
        CPlayer_UpdateSteamAnnouncementLastRead_Request::new()
    }

    fn clear(&mut self) {
        self.announcement_gid = ::std::option::Option::None;
        self.time_posted = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_UpdateSteamAnnouncementLastRead_Request {
        static instance: CPlayer_UpdateSteamAnnouncementLastRead_Request = CPlayer_UpdateSteamAnnouncementLastRead_Request {
            announcement_gid: ::std::option::Option::None,
            time_posted: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPlayer_UpdateSteamAnnouncementLastRead_Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_UpdateSteamAnnouncementLastRead_Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_UpdateSteamAnnouncementLastRead_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPlayer_UpdateSteamAnnouncementLastRead_Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CPlayer_UpdateSteamAnnouncementLastRead_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CPlayer_UpdateSteamAnnouncementLastRead_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CPlayer_UpdateSteamAnnouncementLastRead_Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CPlayer_UpdateSteamAnnouncementLastRead_Response {
    fn default() -> &'a CPlayer_UpdateSteamAnnouncementLastRead_Response {
        <CPlayer_UpdateSteamAnnouncementLastRead_Response as ::protobuf::Message>::default_instance()
    }
}

impl CPlayer_UpdateSteamAnnouncementLastRead_Response {
    pub fn new() -> CPlayer_UpdateSteamAnnouncementLastRead_Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CPlayer_UpdateSteamAnnouncementLastRead_Response>(
            "CPlayer_UpdateSteamAnnouncementLastRead_Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CPlayer_UpdateSteamAnnouncementLastRead_Response {
    const NAME: &'static str = "CPlayer_UpdateSteamAnnouncementLastRead_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CPlayer_UpdateSteamAnnouncementLastRead_Response {
        CPlayer_UpdateSteamAnnouncementLastRead_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CPlayer_UpdateSteamAnnouncementLastRead_Response {
        static instance: CPlayer_UpdateSteamAnnouncementLastRead_Response = CPlayer_UpdateSteamAnnouncementLastRead_Response {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CPlayer_UpdateSteamAnnouncementLastRead_Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CPlayer_UpdateSteamAnnouncementLastRead_Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CPlayer_UpdateSteamAnnouncementLastRead_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPlayer_UpdateSteamAnnouncementLastRead_Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ENotificationSetting)
pub enum ENotificationSetting {
    // @@protoc_insertion_point(enum_value:ENotificationSetting.k_ENotificationSettingNotifyUseDefault)
    k_ENotificationSettingNotifyUseDefault = 0,
    // @@protoc_insertion_point(enum_value:ENotificationSetting.k_ENotificationSettingAlways)
    k_ENotificationSettingAlways = 1,
    // @@protoc_insertion_point(enum_value:ENotificationSetting.k_ENotificationSettingNever)
    k_ENotificationSettingNever = 2,
}

impl ::protobuf::Enum for ENotificationSetting {
    const NAME: &'static str = "ENotificationSetting";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ENotificationSetting> {
        match value {
            0 => ::std::option::Option::Some(ENotificationSetting::k_ENotificationSettingNotifyUseDefault),
            1 => ::std::option::Option::Some(ENotificationSetting::k_ENotificationSettingAlways),
            2 => ::std::option::Option::Some(ENotificationSetting::k_ENotificationSettingNever),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ENotificationSetting> {
        match str {
            "k_ENotificationSettingNotifyUseDefault" => ::std::option::Option::Some(ENotificationSetting::k_ENotificationSettingNotifyUseDefault),
            "k_ENotificationSettingAlways" => ::std::option::Option::Some(ENotificationSetting::k_ENotificationSettingAlways),
            "k_ENotificationSettingNever" => ::std::option::Option::Some(ENotificationSetting::k_ENotificationSettingNever),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ENotificationSetting] = &[
        ENotificationSetting::k_ENotificationSettingNotifyUseDefault,
        ENotificationSetting::k_ENotificationSettingAlways,
        ENotificationSetting::k_ENotificationSettingNever,
    ];
}

impl ::protobuf::EnumFull for ENotificationSetting {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ENotificationSetting").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ENotificationSetting {
    fn default() -> Self {
        ENotificationSetting::k_ENotificationSettingNotifyUseDefault
    }
}

impl ENotificationSetting {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ENotificationSetting>("ENotificationSetting")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n(steammessages_player.steamworkssdk.proto\x1a.steammessages_unified_ba\
    se.steamworkssdk.proto\"4\n2CPlayer_GetMutualFriendsForIncomingInvites_R\
    equest\"}\n&CPlayer_IncomingInviteMutualFriendList\x12\x18\n\x07steamid\
    \x18\x01\x20\x01(\x06R\x07steamid\x129\n\x19mutual_friend_account_ids\
    \x18\x02\x20\x03(\rR\x16mutualFriendAccountIds\"\xae\x01\n3CPlayer_GetMu\
    tualFriendsForIncomingInvites_Response\x12w\n$incoming_invite_mutual_fri\
    ends_lists\x18\x01\x20\x03(\x0b2'.CPlayer_IncomingInviteMutualFriendList\
    R\x20incomingInviteMutualFriendsLists\">\n&CPlayer_GetFriendsGameplayInf\
    o_Request\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\"\x9f\x07\n'CP\
    layer_GetFriendsGameplayInfo_Response\x12U\n\tyour_info\x18\x01\x20\x01(\
    \x0b28.CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfoR\x08yourI\
    nfo\x12U\n\x07in_game\x18\x02\x20\x03(\x0b2<.CPlayer_GetFriendsGameplayI\
    nfo_Response.FriendsGameplayInfoR\x06inGame\x12e\n\x0fplayed_recently\
    \x18\x03\x20\x03(\x0b2<.CPlayer_GetFriendsGameplayInfo_Response.FriendsG\
    ameplayInfoR\x0eplayedRecently\x12]\n\x0bplayed_ever\x18\x04\x20\x03(\
    \x0b2<.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfoR\npla\
    yedEver\x12P\n\x04owns\x18\x05\x20\x03(\x0b2<.CPlayer_GetFriendsGameplay\
    Info_Response.FriendsGameplayInfoR\x04owns\x12]\n\x0bin_wishlist\x18\x06\
    \x20\x03(\x0b2<.CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayI\
    nfoR\ninWishlist\x1a\x8c\x01\n\x13FriendsGameplayInfo\x12\x18\n\x07steam\
    id\x18\x01\x20\x01(\x06R\x07steamid\x12%\n\x0eminutes_played\x18\x02\x20\
    \x01(\rR\rminutesPlayed\x124\n\x16minutes_played_forever\x18\x03\x20\x01\
    (\rR\x14minutesPlayedForever\x1a\xbf\x01\n\x0fOwnGameplayInfo\x12\x18\n\
    \x07steamid\x18\x01\x20\x01(\x06R\x07steamid\x12%\n\x0eminutes_played\
    \x18\x02\x20\x01(\rR\rminutesPlayed\x124\n\x16minutes_played_forever\x18\
    \x03\x20\x01(\rR\x14minutesPlayedForever\x12\x1f\n\x0bin_wishlist\x18\
    \x04\x20\x01(\x08R\ninWishlist\x12\x14\n\x05owned\x18\x05\x20\x01(\x08R\
    \x05owned\":\n\"CPlayer_GetGameBadgeLevels_Request\x12\x14\n\x05appid\
    \x18\x01\x20\x01(\rR\x05appid\"\xe6\x01\n#CPlayer_GetGameBadgeLevels_Res\
    ponse\x12!\n\x0cplayer_level\x18\x01\x20\x01(\rR\x0bplayerLevel\x12B\n\
    \x06badges\x18\x02\x20\x03(\x0b2*.CPlayer_GetGameBadgeLevels_Response.Ba\
    dgeR\x06badges\x1aX\n\x05Badge\x12\x14\n\x05level\x18\x01\x20\x01(\x05R\
    \x05level\x12\x16\n\x06series\x18\x02\x20\x01(\x05R\x06series\x12!\n\x0c\
    border_color\x18\x03\x20\x01(\rR\x0bborderColor\"\x91\x01\n\"CPlayer_Get\
    LastPlayedTimes_Request\x12k\n\x0fmin_last_played\x18\x01\x20\x01(\rR\rm\
    inLastPlayedBC\x82\xb5\x18?The\x20most\x20recent\x20last-played\x20time\
    \x20the\x20client\x20already\x20knows\x20about\"\xa5\x02\n#CPlayer_GetLa\
    stPlayedTimes_Response\x12?\n\x05games\x18\x01\x20\x03(\x0b2).CPlayer_Ge\
    tLastPlayedTimes_Response.GameR\x05games\x1a\xbc\x01\n\x04Game\x12\x14\n\
    \x05appid\x18\x01\x20\x01(\x05R\x05appid\x12#\n\rlast_playtime\x18\x02\
    \x20\x01(\rR\x0clastPlaytime\x12'\n\x0fplaytime_2weeks\x18\x03\x20\x01(\
    \x05R\x0eplaytime2weeks\x12)\n\x10playtime_forever\x18\x04\x20\x01(\x05R\
    \x0fplaytimeForever\x12%\n\x0efirst_playtime\x18\x05\x20\x01(\rR\rfirstP\
    laytime\"\x1b\n\x19CPlayer_AcceptSSA_Request\"\x1c\n\x1aCPlayer_AcceptSS\
    A_Response\"!\n\x1fCPlayer_GetNicknameList_Request\"\xbe\x01\n\x20CPlaye\
    r_GetNicknameList_Response\x12N\n\tnicknames\x18\x01\x20\x03(\x0b20.CPla\
    yer_GetNicknameList_Response.PlayerNicknameR\tnicknames\x1aJ\n\x0ePlayer\
    Nickname\x12\x1c\n\taccountid\x18\x01\x20\x01(\x07R\taccountid\x12\x1a\n\
    \x08nickname\x18\x02\x20\x01(\tR\x08nickname\")\n'CPlayer_GetPerFriendPr\
    eferences_Request\"\x84\x07\n\x14PerFriendPreferences\x12\x1c\n\taccount\
    id\x18\x01\x20\x01(\x07R\taccountid\x12\x1a\n\x08nickname\x18\x02\x20\
    \x01(\tR\x08nickname\x12x\n\x18notifications_showingame\x18\x03\x20\x01(\
    \x0e2\x15.ENotificationSetting:&k_ENotificationSettingNotifyUseDefaultR\
    \x17notificationsShowingame\x12x\n\x18notifications_showonline\x18\x04\
    \x20\x01(\x0e2\x15.ENotificationSetting:&k_ENotificationSettingNotifyUse\
    DefaultR\x17notificationsShowonline\x12|\n\x1anotifications_showmessages\
    \x18\x05\x20\x01(\x0e2\x15.ENotificationSetting:&k_ENotificationSettingN\
    otifyUseDefaultR\x19notificationsShowmessages\x12j\n\x11sounds_showingam\
    e\x18\x06\x20\x01(\x0e2\x15.ENotificationSetting:&k_ENotificationSetting\
    NotifyUseDefaultR\x10soundsShowingame\x12j\n\x11sounds_showonline\x18\
    \x07\x20\x01(\x0e2\x15.ENotificationSetting:&k_ENotificationSettingNotif\
    yUseDefaultR\x10soundsShowonline\x12n\n\x13sounds_showmessages\x18\x08\
    \x20\x01(\x0e2\x15.ENotificationSetting:&k_ENotificationSettingNotifyUse\
    DefaultR\x12soundsShowmessages\x12x\n\x18notifications_sendmobile\x18\t\
    \x20\x01(\x0e2\x15.ENotificationSetting:&k_ENotificationSettingNotifyUse\
    DefaultR\x17notificationsSendmobile\"c\n(CPlayer_GetPerFriendPreferences\
    _Response\x127\n\x0bpreferences\x18\x01\x20\x03(\x0b2\x15.PerFriendPrefe\
    rencesR\x0bpreferences\"b\n'CPlayer_SetPerFriendPreferences_Request\x127\
    \n\x0bpreferences\x18\x01\x20\x01(\x0b2\x15.PerFriendPreferencesR\x0bpre\
    ferences\"*\n(CPlayer_SetPerFriendPreferences_Response\"l\n\x19CPlayer_A\
    ddFriend_Request\x12O\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamidB5\
    \x82\xb5\x181Steam\x20ID\x20of\x20user\x20to\x20whom\x20to\x20send\x20a\
    \x20friend\x20invite.\"\x96\x02\n\x1aCPlayer_AddFriend_Response\x12[\n\
    \x0binvite_sent\x18\x01\x20\x01(\x08R\ninviteSentB:\x82\xb5\x186True\x20\
    if\x20the\x20operation\x20was\x20successful,\x20false\x20otherwise.\x12\
    \x9a\x01\n\x13friend_relationship\x18\x02\x20\x01(\rR\x12friendRelations\
    hipBi\x82\xb5\x18ethe\x20resulting\x20relationship.\x20\x20Depending\x20\
    on\x20state,\x20may\x20move\x20directly\x20to\x20friends\x20rather\x20th\
    an\x20invite\x20sent\"[\n\x1cCPlayer_RemoveFriend_Request\x12;\n\x07stea\
    mid\x18\x01\x20\x01(\x06R\x07steamidB!\x82\xb5\x18\x1dSteam\x20ID\x20of\
    \x20friend\x20to\x20remove.\"p\n\x1dCPlayer_RemoveFriend_Response\x12O\n\
    \x13friend_relationship\x18\x01\x20\x01(\rR\x12friendRelationshipB\x1e\
    \x82\xb5\x18\x1athe\x20resulting\x20relationship\"\x92\x01\n\x1cCPlayer_\
    IgnoreFriend_Request\x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steam\
    id\x12X\n\x08unignore\x18\x02\x20\x01(\x08R\x08unignoreB<\x82\xb5\x188If\
    \x20set,\x20remove\x20from\x20ignore/block\x20list\x20instead\x20of\x20a\
    dding\x20\"p\n\x1dCPlayer_IgnoreFriend_Response\x12O\n\x13friend_relatio\
    nship\x18\x01\x20\x01(\rR\x12friendRelationshipB\x1e\x82\xb5\x18\x1athe\
    \x20resulting\x20relationship\")\n'CPlayer_GetCommunityPreferences_Reque\
    st\"\x89\x02\n\x1cCPlayer_CommunityPreferences\x12C\n\x1bhide_adult_cont\
    ent_violence\x18\x01\x20\x01(\x08:\x04trueR\x18hideAdultContentViolence\
    \x129\n\x16hide_adult_content_sex\x18\x02\x20\x01(\x08:\x04trueR\x13hide\
    AdultContentSex\x12<\n\x16parenthesize_nicknames\x18\x04\x20\x01(\x08:\
    \x05falseR\x15parenthesizeNicknames\x12+\n\x11timestamp_updated\x18\x03\
    \x20\x01(\rR\x10timestampUpdated\"k\n(CPlayer_GetCommunityPreferences_Re\
    sponse\x12?\n\x0bpreferences\x18\x01\x20\x01(\x0b2\x1d.CPlayer_Community\
    PreferencesR\x0bpreferences\"j\n'CPlayer_SetCommunityPreferences_Request\
    \x12?\n\x0bpreferences\x18\x01\x20\x01(\x0b2\x1d.CPlayer_CommunityPrefer\
    encesR\x0bpreferences\"*\n(CPlayer_SetCommunityPreferences_Response\"J\n\
    ,CPlayer_GetNewSteamAnnouncementState_Request\x12\x1a\n\x08language\x18\
    \x01\x20\x01(\x05R\x08language\"\xf1\x01\n-CPlayer_GetNewSteamAnnounceme\
    ntState_Response\x12\x14\n\x05state\x18\x01\x20\x01(\x05R\x05state\x123\
    \n\x15announcement_headline\x18\x02\x20\x01(\tR\x14announcementHeadline\
    \x12)\n\x10announcement_url\x18\x03\x20\x01(\tR\x0fannouncementUrl\x12\
    \x1f\n\x0btime_posted\x18\x04\x20\x01(\rR\ntimePosted\x12)\n\x10announce\
    ment_gid\x18\x05\x20\x01(\x04R\x0fannouncementGid\"}\n/CPlayer_UpdateSte\
    amAnnouncementLastRead_Request\x12)\n\x10announcement_gid\x18\x01\x20\
    \x01(\x04R\x0fannouncementGid\x12\x1f\n\x0btime_posted\x18\x02\x20\x01(\
    \rR\ntimePosted\"2\n0CPlayer_UpdateSteamAnnouncementLastRead_Response*\
    \x85\x01\n\x14ENotificationSetting\x12*\n&k_ENotificationSettingNotifyUs\
    eDefault\x10\0\x12\x20\n\x1ck_ENotificationSettingAlways\x10\x01\x12\x1f\
    \n\x1bk_ENotificationSettingNever\x10\x022\xad\x14\n\x06Player\x12\xef\
    \x01\n\"GetMutualFriendsForIncomingInvites\x123.CPlayer_GetMutualFriends\
    ForIncomingInvites_Request\x1a4.CPlayer_GetMutualFriendsForIncomingInvit\
    es_Response\"^\x82\xb5\x18ZGet\x20me\x20the\x20mutual\x20friends\x20for\
    \x20each\x20of\x20my\x20pending\x20incoming\x20invites\x20(individuals\
    \x20and\x20clans).\x12\xb8\x01\n\x16GetFriendsGameplayInfo\x12'.CPlayer_\
    GetFriendsGameplayInfo_Request\x1a(.CPlayer_GetFriendsGameplayInfo_Respo\
    nse\"K\x82\xb5\x18GGet\x20a\x20list\x20of\x20friends\x20who\x20are\x20pl\
    aying,\x20have\x20played,\x20own,\x20or\x20want\x20a\x20game\x12\xb6\x01\
    \n\x12GetGameBadgeLevels\x12#.CPlayer_GetGameBadgeLevels_Request\x1a$.CP\
    layer_GetGameBadgeLevels_Response\"U\x82\xb5\x18QReturns\x20the\x20Steam\
    \x20Level\x20of\x20a\x20user,\x20the\x20Badge\x20level\x20for\x20the\x20\
    game,\x20and\x20if\x20it's\x20foil\x12\x95\x01\n\x18ClientGetLastPlayedT\
    imes\x12#.CPlayer_GetLastPlayedTimes_Request\x1a$.CPlayer_GetLastPlayedT\
    imes_Response\".\x82\xb5\x18*Gets\x20the\x20last-played\x20times\x20for\
    \x20the\x20account\x12c\n\tAcceptSSA\x12\x1a.CPlayer_AcceptSSA_Request\
    \x1a\x1b.CPlayer_AcceptSSA_Response\"\x1d\x82\xb5\x18\x19User\x20is\x20a\
    ccepting\x20the\x20SSA\x12\x94\x01\n\x0fGetNicknameList\x12\x20.CPlayer_\
    GetNicknameList_Request\x1a!.CPlayer_GetNicknameList_Response\"<\x82\xb5\
    \x188Gets\x20the\x20list\x20of\x20nicknames\x20this\x20user\x20has\x20fo\
    r\x20other\x20users\x12\xbd\x01\n\x17GetPerFriendPreferences\x12(.CPlaye\
    r_GetPerFriendPreferences_Request\x1a).CPlayer_GetPerFriendPreferences_R\
    esponse\"M\x82\xb5\x18IGets\x20the\x20list\x20of\x20per-friend\x20prefer\
    ences\x20this\x20user\x20has\x20set\x20for\x20other\x20users\x12\xb7\x01\
    \n\x17SetPerFriendPreferences\x12(.CPlayer_SetPerFriendPreferences_Reque\
    st\x1a).CPlayer_SetPerFriendPreferences_Response\"G\x82\xb5\x18CSets\x20\
    the\x20logged\x20in\x20user's\x20per-friend\x20preferences\x20for\x20the\
    \x20given\x20user\x12s\n\tAddFriend\x12\x1a.CPlayer_AddFriend_Request\
    \x1a\x1b.CPlayer_AddFriend_Response\"-\x82\xb5\x18)Invites\x20another\
    \x20Steam\x20user\x20to\x20be\x20a\x20friend\x12\x82\x01\n\x0cRemoveFrie\
    nd\x12\x1d.CPlayer_RemoveFriend_Request\x1a\x1e.CPlayer_RemoveFriend_Res\
    ponse\"3\x82\xb5\x18/Removes\x20a\x20friend\x20or\x20ignores\x20a\x20fri\
    end\x20suggestion\x12\xa6\x01\n\x0cIgnoreFriend\x12\x1d.CPlayer_IgnoreFr\
    iend_Request\x1a\x1e.CPlayer_IgnoreFriend_Response\"W\x82\xb5\x18SBlocks\
    \x20or\x20unblocks\x20communication\x20with\x20the\x20user.\x20\x20Despi\
    te\x20name,\x20can\x20be\x20a\x20non-friend.\x12\x9e\x01\n\x17GetCommuni\
    tyPreferences\x12(.CPlayer_GetCommunityPreferences_Request\x1a).CPlayer_\
    GetCommunityPreferences_Response\".\x82\xb5\x18*Returns\x20the\x20player\
    's\x20community\x20preferences\x12\x9b\x01\n\x17SetCommunityPreferences\
    \x12(.CPlayer_SetCommunityPreferences_Request\x1a).CPlayer_SetCommunityP\
    references_Response\"+\x82\xb5\x18'Sets\x20the\x20player's\x20community\
    \x20preferences\x12\xde\x01\n\x1cGetNewSteamAnnouncementState\x12-.CPlay\
    er_GetNewSteamAnnouncementState_Request\x1a..CPlayer_GetNewSteamAnnounce\
    mentState_Response\"_\x82\xb5\x18[Calculates\x20and\x20returns\x20what\
    \x20to\x20display\x20for\x20UI\x20that\x20renders\x20new\x20steam\x20ann\
    ouncement\x20available\x12\xbc\x01\n\x1fUpdateSteamAnnouncementLastRead\
    \x120.CPlayer_UpdateSteamAnnouncementLastRead_Request\x1a1.CPlayer_Updat\
    eSteamAnnouncementLastRead_Response\"4\x82\xb5\x180Marks\x20latest\x20an\
    nouncement\x20timestamp\x20read\x20by\x20user\x1a-\x82\xb5\x18)A\x20serv\
    ice\x20for\x20accessing\x20Steam\x20player\x20dataB\x03\x80\x01\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::steammessages_unified_base_steamworkssdk::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(38);
            messages.push(CPlayer_GetMutualFriendsForIncomingInvites_Request::generated_message_descriptor_data());
            messages.push(CPlayer_IncomingInviteMutualFriendList::generated_message_descriptor_data());
            messages.push(CPlayer_GetMutualFriendsForIncomingInvites_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetFriendsGameplayInfo_Request::generated_message_descriptor_data());
            messages.push(CPlayer_GetFriendsGameplayInfo_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetGameBadgeLevels_Request::generated_message_descriptor_data());
            messages.push(CPlayer_GetGameBadgeLevels_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetLastPlayedTimes_Request::generated_message_descriptor_data());
            messages.push(CPlayer_GetLastPlayedTimes_Response::generated_message_descriptor_data());
            messages.push(CPlayer_AcceptSSA_Request::generated_message_descriptor_data());
            messages.push(CPlayer_AcceptSSA_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetNicknameList_Request::generated_message_descriptor_data());
            messages.push(CPlayer_GetNicknameList_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetPerFriendPreferences_Request::generated_message_descriptor_data());
            messages.push(PerFriendPreferences::generated_message_descriptor_data());
            messages.push(CPlayer_GetPerFriendPreferences_Response::generated_message_descriptor_data());
            messages.push(CPlayer_SetPerFriendPreferences_Request::generated_message_descriptor_data());
            messages.push(CPlayer_SetPerFriendPreferences_Response::generated_message_descriptor_data());
            messages.push(CPlayer_AddFriend_Request::generated_message_descriptor_data());
            messages.push(CPlayer_AddFriend_Response::generated_message_descriptor_data());
            messages.push(CPlayer_RemoveFriend_Request::generated_message_descriptor_data());
            messages.push(CPlayer_RemoveFriend_Response::generated_message_descriptor_data());
            messages.push(CPlayer_IgnoreFriend_Request::generated_message_descriptor_data());
            messages.push(CPlayer_IgnoreFriend_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetCommunityPreferences_Request::generated_message_descriptor_data());
            messages.push(CPlayer_CommunityPreferences::generated_message_descriptor_data());
            messages.push(CPlayer_GetCommunityPreferences_Response::generated_message_descriptor_data());
            messages.push(CPlayer_SetCommunityPreferences_Request::generated_message_descriptor_data());
            messages.push(CPlayer_SetCommunityPreferences_Response::generated_message_descriptor_data());
            messages.push(CPlayer_GetNewSteamAnnouncementState_Request::generated_message_descriptor_data());
            messages.push(CPlayer_GetNewSteamAnnouncementState_Response::generated_message_descriptor_data());
            messages.push(CPlayer_UpdateSteamAnnouncementLastRead_Request::generated_message_descriptor_data());
            messages.push(CPlayer_UpdateSteamAnnouncementLastRead_Response::generated_message_descriptor_data());
            messages.push(cplayer_get_friends_gameplay_info_response::FriendsGameplayInfo::generated_message_descriptor_data());
            messages.push(cplayer_get_friends_gameplay_info_response::OwnGameplayInfo::generated_message_descriptor_data());
            messages.push(cplayer_get_game_badge_levels_response::Badge::generated_message_descriptor_data());
            messages.push(cplayer_get_last_played_times_response::Game::generated_message_descriptor_data());
            messages.push(cplayer_get_nickname_list_response::PlayerNickname::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(ENotificationSetting::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
