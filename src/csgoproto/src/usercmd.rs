// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `usercmd.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:CInButtonStatePB)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CInButtonStatePB {
    // message fields
    // @@protoc_insertion_point(field:CInButtonStatePB.buttonstate1)
    pub buttonstate1: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CInButtonStatePB.buttonstate2)
    pub buttonstate2: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CInButtonStatePB.buttonstate3)
    pub buttonstate3: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CInButtonStatePB.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CInButtonStatePB {
    fn default() -> &'a CInButtonStatePB {
        <CInButtonStatePB as ::protobuf::Message>::default_instance()
    }
}

impl CInButtonStatePB {
    pub fn new() -> CInButtonStatePB {
        ::std::default::Default::default()
    }

    // optional uint64 buttonstate1 = 1;

    pub fn buttonstate1(&self) -> u64 {
        self.buttonstate1.unwrap_or(0)
    }

    pub fn clear_buttonstate1(&mut self) {
        self.buttonstate1 = ::std::option::Option::None;
    }

    pub fn has_buttonstate1(&self) -> bool {
        self.buttonstate1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_buttonstate1(&mut self, v: u64) {
        self.buttonstate1 = ::std::option::Option::Some(v);
    }

    // optional uint64 buttonstate2 = 2;

    pub fn buttonstate2(&self) -> u64 {
        self.buttonstate2.unwrap_or(0)
    }

    pub fn clear_buttonstate2(&mut self) {
        self.buttonstate2 = ::std::option::Option::None;
    }

    pub fn has_buttonstate2(&self) -> bool {
        self.buttonstate2.is_some()
    }

    // Param is passed by value, moved
    pub fn set_buttonstate2(&mut self, v: u64) {
        self.buttonstate2 = ::std::option::Option::Some(v);
    }

    // optional uint64 buttonstate3 = 3;

    pub fn buttonstate3(&self) -> u64 {
        self.buttonstate3.unwrap_or(0)
    }

    pub fn clear_buttonstate3(&mut self) {
        self.buttonstate3 = ::std::option::Option::None;
    }

    pub fn has_buttonstate3(&self) -> bool {
        self.buttonstate3.is_some()
    }

    // Param is passed by value, moved
    pub fn set_buttonstate3(&mut self, v: u64) {
        self.buttonstate3 = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "buttonstate1",
            |m: &CInButtonStatePB| { &m.buttonstate1 },
            |m: &mut CInButtonStatePB| { &mut m.buttonstate1 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "buttonstate2",
            |m: &CInButtonStatePB| { &m.buttonstate2 },
            |m: &mut CInButtonStatePB| { &mut m.buttonstate2 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "buttonstate3",
            |m: &CInButtonStatePB| { &m.buttonstate3 },
            |m: &mut CInButtonStatePB| { &mut m.buttonstate3 },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CInButtonStatePB>(
            "CInButtonStatePB",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CInButtonStatePB {
    const NAME: &'static str = "CInButtonStatePB";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.buttonstate1 = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.buttonstate2 = ::std::option::Option::Some(is.read_uint64()?);
                },
                24 => {
                    self.buttonstate3 = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.buttonstate1 {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.buttonstate2 {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.buttonstate3 {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.buttonstate1 {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.buttonstate2 {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.buttonstate3 {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CInButtonStatePB {
        CInButtonStatePB::new()
    }

    fn clear(&mut self) {
        self.buttonstate1 = ::std::option::Option::None;
        self.buttonstate2 = ::std::option::Option::None;
        self.buttonstate3 = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CInButtonStatePB {
        static instance: CInButtonStatePB = CInButtonStatePB {
            buttonstate1: ::std::option::Option::None,
            buttonstate2: ::std::option::Option::None,
            buttonstate3: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CInButtonStatePB {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CInButtonStatePB").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CInButtonStatePB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CInButtonStatePB {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CSubtickMoveStep)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSubtickMoveStep {
    // message fields
    // @@protoc_insertion_point(field:CSubtickMoveStep.button)
    pub button: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CSubtickMoveStep.pressed)
    pub pressed: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CSubtickMoveStep.when)
    pub when: ::std::option::Option<f32>,
    // special fields
    // @@protoc_insertion_point(special_field:CSubtickMoveStep.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSubtickMoveStep {
    fn default() -> &'a CSubtickMoveStep {
        <CSubtickMoveStep as ::protobuf::Message>::default_instance()
    }
}

impl CSubtickMoveStep {
    pub fn new() -> CSubtickMoveStep {
        ::std::default::Default::default()
    }

    // optional uint64 button = 1;

    pub fn button(&self) -> u64 {
        self.button.unwrap_or(0)
    }

    pub fn clear_button(&mut self) {
        self.button = ::std::option::Option::None;
    }

    pub fn has_button(&self) -> bool {
        self.button.is_some()
    }

    // Param is passed by value, moved
    pub fn set_button(&mut self, v: u64) {
        self.button = ::std::option::Option::Some(v);
    }

    // optional bool pressed = 2;

    pub fn pressed(&self) -> bool {
        self.pressed.unwrap_or(false)
    }

    pub fn clear_pressed(&mut self) {
        self.pressed = ::std::option::Option::None;
    }

    pub fn has_pressed(&self) -> bool {
        self.pressed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pressed(&mut self, v: bool) {
        self.pressed = ::std::option::Option::Some(v);
    }

    // optional float when = 3;

    pub fn when(&self) -> f32 {
        self.when.unwrap_or(0.)
    }

    pub fn clear_when(&mut self) {
        self.when = ::std::option::Option::None;
    }

    pub fn has_when(&self) -> bool {
        self.when.is_some()
    }

    // Param is passed by value, moved
    pub fn set_when(&mut self, v: f32) {
        self.when = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "button",
            |m: &CSubtickMoveStep| { &m.button },
            |m: &mut CSubtickMoveStep| { &mut m.button },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "pressed",
            |m: &CSubtickMoveStep| { &m.pressed },
            |m: &mut CSubtickMoveStep| { &mut m.pressed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "when",
            |m: &CSubtickMoveStep| { &m.when },
            |m: &mut CSubtickMoveStep| { &mut m.when },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CSubtickMoveStep>(
            "CSubtickMoveStep",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CSubtickMoveStep {
    const NAME: &'static str = "CSubtickMoveStep";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.button = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.pressed = ::std::option::Option::Some(is.read_bool()?);
                },
                29 => {
                    self.when = ::std::option::Option::Some(is.read_float()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.button {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.pressed {
            my_size += 1 + 1;
        }
        if let Some(v) = self.when {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.button {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.pressed {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.when {
            os.write_float(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSubtickMoveStep {
        CSubtickMoveStep::new()
    }

    fn clear(&mut self) {
        self.button = ::std::option::Option::None;
        self.pressed = ::std::option::Option::None;
        self.when = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSubtickMoveStep {
        static instance: CSubtickMoveStep = CSubtickMoveStep {
            button: ::std::option::Option::None,
            pressed: ::std::option::Option::None,
            when: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CSubtickMoveStep {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CSubtickMoveStep").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CSubtickMoveStep {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CSubtickMoveStep {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CBaseUserCmdPB)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CBaseUserCmdPB {
    // message fields
    // @@protoc_insertion_point(field:CBaseUserCmdPB.command_number)
    pub command_number: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CBaseUserCmdPB.tick_count)
    pub tick_count: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CBaseUserCmdPB.buttons_pb)
    pub buttons_pb: ::protobuf::MessageField<CInButtonStatePB>,
    // @@protoc_insertion_point(field:CBaseUserCmdPB.viewangles)
    pub viewangles: ::protobuf::MessageField<super::networkbasetypes::CMsgQAngle>,
    // @@protoc_insertion_point(field:CBaseUserCmdPB.forwardmove)
    pub forwardmove: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:CBaseUserCmdPB.leftmove)
    pub leftmove: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:CBaseUserCmdPB.upmove)
    pub upmove: ::std::option::Option<f32>,
    // @@protoc_insertion_point(field:CBaseUserCmdPB.impulse)
    pub impulse: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CBaseUserCmdPB.weaponselect)
    pub weaponselect: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CBaseUserCmdPB.random_seed)
    pub random_seed: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CBaseUserCmdPB.mousedx)
    pub mousedx: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CBaseUserCmdPB.mousedy)
    pub mousedy: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CBaseUserCmdPB.hasbeenpredicted)
    pub hasbeenpredicted: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CBaseUserCmdPB.pawn_entity_handle)
    pub pawn_entity_handle: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CBaseUserCmdPB.subtick_moves)
    pub subtick_moves: ::std::vec::Vec<CSubtickMoveStep>,
    // @@protoc_insertion_point(field:CBaseUserCmdPB.move_crc)
    pub move_crc: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:CBaseUserCmdPB.consumed_server_angle_changes)
    pub consumed_server_angle_changes: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CBaseUserCmdPB.cmd_flags)
    pub cmd_flags: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CBaseUserCmdPB.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CBaseUserCmdPB {
    fn default() -> &'a CBaseUserCmdPB {
        <CBaseUserCmdPB as ::protobuf::Message>::default_instance()
    }
}

impl CBaseUserCmdPB {
    pub fn new() -> CBaseUserCmdPB {
        ::std::default::Default::default()
    }

    // optional int32 command_number = 1;

    pub fn command_number(&self) -> i32 {
        self.command_number.unwrap_or(0)
    }

    pub fn clear_command_number(&mut self) {
        self.command_number = ::std::option::Option::None;
    }

    pub fn has_command_number(&self) -> bool {
        self.command_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_command_number(&mut self, v: i32) {
        self.command_number = ::std::option::Option::Some(v);
    }

    // optional int32 tick_count = 2;

    pub fn tick_count(&self) -> i32 {
        self.tick_count.unwrap_or(0)
    }

    pub fn clear_tick_count(&mut self) {
        self.tick_count = ::std::option::Option::None;
    }

    pub fn has_tick_count(&self) -> bool {
        self.tick_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tick_count(&mut self, v: i32) {
        self.tick_count = ::std::option::Option::Some(v);
    }

    // optional float forwardmove = 5;

    pub fn forwardmove(&self) -> f32 {
        self.forwardmove.unwrap_or(0.)
    }

    pub fn clear_forwardmove(&mut self) {
        self.forwardmove = ::std::option::Option::None;
    }

    pub fn has_forwardmove(&self) -> bool {
        self.forwardmove.is_some()
    }

    // Param is passed by value, moved
    pub fn set_forwardmove(&mut self, v: f32) {
        self.forwardmove = ::std::option::Option::Some(v);
    }

    // optional float leftmove = 6;

    pub fn leftmove(&self) -> f32 {
        self.leftmove.unwrap_or(0.)
    }

    pub fn clear_leftmove(&mut self) {
        self.leftmove = ::std::option::Option::None;
    }

    pub fn has_leftmove(&self) -> bool {
        self.leftmove.is_some()
    }

    // Param is passed by value, moved
    pub fn set_leftmove(&mut self, v: f32) {
        self.leftmove = ::std::option::Option::Some(v);
    }

    // optional float upmove = 7;

    pub fn upmove(&self) -> f32 {
        self.upmove.unwrap_or(0.)
    }

    pub fn clear_upmove(&mut self) {
        self.upmove = ::std::option::Option::None;
    }

    pub fn has_upmove(&self) -> bool {
        self.upmove.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upmove(&mut self, v: f32) {
        self.upmove = ::std::option::Option::Some(v);
    }

    // optional int32 impulse = 8;

    pub fn impulse(&self) -> i32 {
        self.impulse.unwrap_or(0)
    }

    pub fn clear_impulse(&mut self) {
        self.impulse = ::std::option::Option::None;
    }

    pub fn has_impulse(&self) -> bool {
        self.impulse.is_some()
    }

    // Param is passed by value, moved
    pub fn set_impulse(&mut self, v: i32) {
        self.impulse = ::std::option::Option::Some(v);
    }

    // optional int32 weaponselect = 9;

    pub fn weaponselect(&self) -> i32 {
        self.weaponselect.unwrap_or(0)
    }

    pub fn clear_weaponselect(&mut self) {
        self.weaponselect = ::std::option::Option::None;
    }

    pub fn has_weaponselect(&self) -> bool {
        self.weaponselect.is_some()
    }

    // Param is passed by value, moved
    pub fn set_weaponselect(&mut self, v: i32) {
        self.weaponselect = ::std::option::Option::Some(v);
    }

    // optional int32 random_seed = 10;

    pub fn random_seed(&self) -> i32 {
        self.random_seed.unwrap_or(0)
    }

    pub fn clear_random_seed(&mut self) {
        self.random_seed = ::std::option::Option::None;
    }

    pub fn has_random_seed(&self) -> bool {
        self.random_seed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_random_seed(&mut self, v: i32) {
        self.random_seed = ::std::option::Option::Some(v);
    }

    // optional int32 mousedx = 11;

    pub fn mousedx(&self) -> i32 {
        self.mousedx.unwrap_or(0)
    }

    pub fn clear_mousedx(&mut self) {
        self.mousedx = ::std::option::Option::None;
    }

    pub fn has_mousedx(&self) -> bool {
        self.mousedx.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mousedx(&mut self, v: i32) {
        self.mousedx = ::std::option::Option::Some(v);
    }

    // optional int32 mousedy = 12;

    pub fn mousedy(&self) -> i32 {
        self.mousedy.unwrap_or(0)
    }

    pub fn clear_mousedy(&mut self) {
        self.mousedy = ::std::option::Option::None;
    }

    pub fn has_mousedy(&self) -> bool {
        self.mousedy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mousedy(&mut self, v: i32) {
        self.mousedy = ::std::option::Option::Some(v);
    }

    // optional bool hasbeenpredicted = 13;

    pub fn hasbeenpredicted(&self) -> bool {
        self.hasbeenpredicted.unwrap_or(false)
    }

    pub fn clear_hasbeenpredicted(&mut self) {
        self.hasbeenpredicted = ::std::option::Option::None;
    }

    pub fn has_hasbeenpredicted(&self) -> bool {
        self.hasbeenpredicted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hasbeenpredicted(&mut self, v: bool) {
        self.hasbeenpredicted = ::std::option::Option::Some(v);
    }

    // optional uint32 pawn_entity_handle = 14;

    pub fn pawn_entity_handle(&self) -> u32 {
        self.pawn_entity_handle.unwrap_or(16777215u32)
    }

    pub fn clear_pawn_entity_handle(&mut self) {
        self.pawn_entity_handle = ::std::option::Option::None;
    }

    pub fn has_pawn_entity_handle(&self) -> bool {
        self.pawn_entity_handle.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pawn_entity_handle(&mut self, v: u32) {
        self.pawn_entity_handle = ::std::option::Option::Some(v);
    }

    // optional bytes move_crc = 19;

    pub fn move_crc(&self) -> &[u8] {
        match self.move_crc.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_move_crc(&mut self) {
        self.move_crc = ::std::option::Option::None;
    }

    pub fn has_move_crc(&self) -> bool {
        self.move_crc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_move_crc(&mut self, v: ::std::vec::Vec<u8>) {
        self.move_crc = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_move_crc(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.move_crc.is_none() {
            self.move_crc = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.move_crc.as_mut().unwrap()
    }

    // Take field
    pub fn take_move_crc(&mut self) -> ::std::vec::Vec<u8> {
        self.move_crc.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint32 consumed_server_angle_changes = 20;

    pub fn consumed_server_angle_changes(&self) -> u32 {
        self.consumed_server_angle_changes.unwrap_or(0)
    }

    pub fn clear_consumed_server_angle_changes(&mut self) {
        self.consumed_server_angle_changes = ::std::option::Option::None;
    }

    pub fn has_consumed_server_angle_changes(&self) -> bool {
        self.consumed_server_angle_changes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_consumed_server_angle_changes(&mut self, v: u32) {
        self.consumed_server_angle_changes = ::std::option::Option::Some(v);
    }

    // optional int32 cmd_flags = 21;

    pub fn cmd_flags(&self) -> i32 {
        self.cmd_flags.unwrap_or(0)
    }

    pub fn clear_cmd_flags(&mut self) {
        self.cmd_flags = ::std::option::Option::None;
    }

    pub fn has_cmd_flags(&self) -> bool {
        self.cmd_flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cmd_flags(&mut self, v: i32) {
        self.cmd_flags = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(18);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "command_number",
            |m: &CBaseUserCmdPB| { &m.command_number },
            |m: &mut CBaseUserCmdPB| { &mut m.command_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "tick_count",
            |m: &CBaseUserCmdPB| { &m.tick_count },
            |m: &mut CBaseUserCmdPB| { &mut m.tick_count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CInButtonStatePB>(
            "buttons_pb",
            |m: &CBaseUserCmdPB| { &m.buttons_pb },
            |m: &mut CBaseUserCmdPB| { &mut m.buttons_pb },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::networkbasetypes::CMsgQAngle>(
            "viewangles",
            |m: &CBaseUserCmdPB| { &m.viewangles },
            |m: &mut CBaseUserCmdPB| { &mut m.viewangles },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "forwardmove",
            |m: &CBaseUserCmdPB| { &m.forwardmove },
            |m: &mut CBaseUserCmdPB| { &mut m.forwardmove },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "leftmove",
            |m: &CBaseUserCmdPB| { &m.leftmove },
            |m: &mut CBaseUserCmdPB| { &mut m.leftmove },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "upmove",
            |m: &CBaseUserCmdPB| { &m.upmove },
            |m: &mut CBaseUserCmdPB| { &mut m.upmove },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "impulse",
            |m: &CBaseUserCmdPB| { &m.impulse },
            |m: &mut CBaseUserCmdPB| { &mut m.impulse },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "weaponselect",
            |m: &CBaseUserCmdPB| { &m.weaponselect },
            |m: &mut CBaseUserCmdPB| { &mut m.weaponselect },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "random_seed",
            |m: &CBaseUserCmdPB| { &m.random_seed },
            |m: &mut CBaseUserCmdPB| { &mut m.random_seed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "mousedx",
            |m: &CBaseUserCmdPB| { &m.mousedx },
            |m: &mut CBaseUserCmdPB| { &mut m.mousedx },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "mousedy",
            |m: &CBaseUserCmdPB| { &m.mousedy },
            |m: &mut CBaseUserCmdPB| { &mut m.mousedy },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "hasbeenpredicted",
            |m: &CBaseUserCmdPB| { &m.hasbeenpredicted },
            |m: &mut CBaseUserCmdPB| { &mut m.hasbeenpredicted },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "pawn_entity_handle",
            |m: &CBaseUserCmdPB| { &m.pawn_entity_handle },
            |m: &mut CBaseUserCmdPB| { &mut m.pawn_entity_handle },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "subtick_moves",
            |m: &CBaseUserCmdPB| { &m.subtick_moves },
            |m: &mut CBaseUserCmdPB| { &mut m.subtick_moves },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "move_crc",
            |m: &CBaseUserCmdPB| { &m.move_crc },
            |m: &mut CBaseUserCmdPB| { &mut m.move_crc },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "consumed_server_angle_changes",
            |m: &CBaseUserCmdPB| { &m.consumed_server_angle_changes },
            |m: &mut CBaseUserCmdPB| { &mut m.consumed_server_angle_changes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "cmd_flags",
            |m: &CBaseUserCmdPB| { &m.cmd_flags },
            |m: &mut CBaseUserCmdPB| { &mut m.cmd_flags },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CBaseUserCmdPB>(
            "CBaseUserCmdPB",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CBaseUserCmdPB {
    const NAME: &'static str = "CBaseUserCmdPB";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.command_number = ::std::option::Option::Some(is.read_int32()?);
                },
                16 => {
                    self.tick_count = ::std::option::Option::Some(is.read_int32()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.buttons_pb)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.viewangles)?;
                },
                45 => {
                    self.forwardmove = ::std::option::Option::Some(is.read_float()?);
                },
                53 => {
                    self.leftmove = ::std::option::Option::Some(is.read_float()?);
                },
                61 => {
                    self.upmove = ::std::option::Option::Some(is.read_float()?);
                },
                64 => {
                    self.impulse = ::std::option::Option::Some(is.read_int32()?);
                },
                72 => {
                    self.weaponselect = ::std::option::Option::Some(is.read_int32()?);
                },
                80 => {
                    self.random_seed = ::std::option::Option::Some(is.read_int32()?);
                },
                88 => {
                    self.mousedx = ::std::option::Option::Some(is.read_int32()?);
                },
                96 => {
                    self.mousedy = ::std::option::Option::Some(is.read_int32()?);
                },
                104 => {
                    self.hasbeenpredicted = ::std::option::Option::Some(is.read_bool()?);
                },
                112 => {
                    self.pawn_entity_handle = ::std::option::Option::Some(is.read_uint32()?);
                },
                146 => {
                    self.subtick_moves.push(is.read_message()?);
                },
                154 => {
                    self.move_crc = ::std::option::Option::Some(is.read_bytes()?);
                },
                160 => {
                    self.consumed_server_angle_changes = ::std::option::Option::Some(is.read_uint32()?);
                },
                168 => {
                    self.cmd_flags = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.command_number {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.tick_count {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        if let Some(v) = self.buttons_pb.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.viewangles.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.forwardmove {
            my_size += 1 + 4;
        }
        if let Some(v) = self.leftmove {
            my_size += 1 + 4;
        }
        if let Some(v) = self.upmove {
            my_size += 1 + 4;
        }
        if let Some(v) = self.impulse {
            my_size += ::protobuf::rt::int32_size(8, v);
        }
        if let Some(v) = self.weaponselect {
            my_size += ::protobuf::rt::int32_size(9, v);
        }
        if let Some(v) = self.random_seed {
            my_size += ::protobuf::rt::int32_size(10, v);
        }
        if let Some(v) = self.mousedx {
            my_size += ::protobuf::rt::int32_size(11, v);
        }
        if let Some(v) = self.mousedy {
            my_size += ::protobuf::rt::int32_size(12, v);
        }
        if let Some(v) = self.hasbeenpredicted {
            my_size += 1 + 1;
        }
        if let Some(v) = self.pawn_entity_handle {
            my_size += ::protobuf::rt::uint32_size(14, v);
        }
        for value in &self.subtick_moves {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.move_crc.as_ref() {
            my_size += ::protobuf::rt::bytes_size(19, &v);
        }
        if let Some(v) = self.consumed_server_angle_changes {
            my_size += ::protobuf::rt::uint32_size(20, v);
        }
        if let Some(v) = self.cmd_flags {
            my_size += ::protobuf::rt::int32_size(21, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.command_number {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.tick_count {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.buttons_pb.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.viewangles.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.forwardmove {
            os.write_float(5, v)?;
        }
        if let Some(v) = self.leftmove {
            os.write_float(6, v)?;
        }
        if let Some(v) = self.upmove {
            os.write_float(7, v)?;
        }
        if let Some(v) = self.impulse {
            os.write_int32(8, v)?;
        }
        if let Some(v) = self.weaponselect {
            os.write_int32(9, v)?;
        }
        if let Some(v) = self.random_seed {
            os.write_int32(10, v)?;
        }
        if let Some(v) = self.mousedx {
            os.write_int32(11, v)?;
        }
        if let Some(v) = self.mousedy {
            os.write_int32(12, v)?;
        }
        if let Some(v) = self.hasbeenpredicted {
            os.write_bool(13, v)?;
        }
        if let Some(v) = self.pawn_entity_handle {
            os.write_uint32(14, v)?;
        }
        for v in &self.subtick_moves {
            ::protobuf::rt::write_message_field_with_cached_size(18, v, os)?;
        };
        if let Some(v) = self.move_crc.as_ref() {
            os.write_bytes(19, v)?;
        }
        if let Some(v) = self.consumed_server_angle_changes {
            os.write_uint32(20, v)?;
        }
        if let Some(v) = self.cmd_flags {
            os.write_int32(21, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CBaseUserCmdPB {
        CBaseUserCmdPB::new()
    }

    fn clear(&mut self) {
        self.command_number = ::std::option::Option::None;
        self.tick_count = ::std::option::Option::None;
        self.buttons_pb.clear();
        self.viewangles.clear();
        self.forwardmove = ::std::option::Option::None;
        self.leftmove = ::std::option::Option::None;
        self.upmove = ::std::option::Option::None;
        self.impulse = ::std::option::Option::None;
        self.weaponselect = ::std::option::Option::None;
        self.random_seed = ::std::option::Option::None;
        self.mousedx = ::std::option::Option::None;
        self.mousedy = ::std::option::Option::None;
        self.hasbeenpredicted = ::std::option::Option::None;
        self.pawn_entity_handle = ::std::option::Option::None;
        self.subtick_moves.clear();
        self.move_crc = ::std::option::Option::None;
        self.consumed_server_angle_changes = ::std::option::Option::None;
        self.cmd_flags = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CBaseUserCmdPB {
        static instance: CBaseUserCmdPB = CBaseUserCmdPB {
            command_number: ::std::option::Option::None,
            tick_count: ::std::option::Option::None,
            buttons_pb: ::protobuf::MessageField::none(),
            viewangles: ::protobuf::MessageField::none(),
            forwardmove: ::std::option::Option::None,
            leftmove: ::std::option::Option::None,
            upmove: ::std::option::Option::None,
            impulse: ::std::option::Option::None,
            weaponselect: ::std::option::Option::None,
            random_seed: ::std::option::Option::None,
            mousedx: ::std::option::Option::None,
            mousedy: ::std::option::Option::None,
            hasbeenpredicted: ::std::option::Option::None,
            pawn_entity_handle: ::std::option::Option::None,
            subtick_moves: ::std::vec::Vec::new(),
            move_crc: ::std::option::Option::None,
            consumed_server_angle_changes: ::std::option::Option::None,
            cmd_flags: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CBaseUserCmdPB {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CBaseUserCmdPB").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CBaseUserCmdPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CBaseUserCmdPB {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CUserCmdBasePB)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CUserCmdBasePB {
    // message fields
    // @@protoc_insertion_point(field:CUserCmdBasePB.base)
    pub base: ::protobuf::MessageField<CBaseUserCmdPB>,
    // special fields
    // @@protoc_insertion_point(special_field:CUserCmdBasePB.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CUserCmdBasePB {
    fn default() -> &'a CUserCmdBasePB {
        <CUserCmdBasePB as ::protobuf::Message>::default_instance()
    }
}

impl CUserCmdBasePB {
    pub fn new() -> CUserCmdBasePB {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CBaseUserCmdPB>(
            "base",
            |m: &CUserCmdBasePB| { &m.base },
            |m: &mut CUserCmdBasePB| { &mut m.base },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CUserCmdBasePB>(
            "CUserCmdBasePB",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CUserCmdBasePB {
    const NAME: &'static str = "CUserCmdBasePB";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.base)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.base.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.base.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CUserCmdBasePB {
        CUserCmdBasePB::new()
    }

    fn clear(&mut self) {
        self.base.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CUserCmdBasePB {
        static instance: CUserCmdBasePB = CUserCmdBasePB {
            base: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CUserCmdBasePB {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CUserCmdBasePB").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CUserCmdBasePB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CUserCmdBasePB {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rusercmd.proto\x1a\x16networkbasetypes.proto\"~\n\x10CInButtonStatePB\
    \x12\"\n\x0cbuttonstate1\x18\x01\x20\x01(\x04R\x0cbuttonstate1\x12\"\n\
    \x0cbuttonstate2\x18\x02\x20\x01(\x04R\x0cbuttonstate2\x12\"\n\x0cbutton\
    state3\x18\x03\x20\x01(\x04R\x0cbuttonstate3\"X\n\x10CSubtickMoveStep\
    \x12\x16\n\x06button\x18\x01\x20\x01(\x04R\x06button\x12\x18\n\x07presse\
    d\x18\x02\x20\x01(\x08R\x07pressed\x12\x12\n\x04when\x18\x03\x20\x01(\
    \x02R\x04when\"\xb5\x05\n\x0eCBaseUserCmdPB\x12%\n\x0ecommand_number\x18\
    \x01\x20\x01(\x05R\rcommandNumber\x12\x1d\n\ntick_count\x18\x02\x20\x01(\
    \x05R\ttickCount\x120\n\nbuttons_pb\x18\x03\x20\x01(\x0b2\x11.CInButtonS\
    tatePBR\tbuttonsPb\x12+\n\nviewangles\x18\x04\x20\x01(\x0b2\x0b.CMsgQAng\
    leR\nviewangles\x12\x20\n\x0bforwardmove\x18\x05\x20\x01(\x02R\x0bforwar\
    dmove\x12\x1a\n\x08leftmove\x18\x06\x20\x01(\x02R\x08leftmove\x12\x16\n\
    \x06upmove\x18\x07\x20\x01(\x02R\x06upmove\x12\x18\n\x07impulse\x18\x08\
    \x20\x01(\x05R\x07impulse\x12\"\n\x0cweaponselect\x18\t\x20\x01(\x05R\
    \x0cweaponselect\x12\x1f\n\x0brandom_seed\x18\n\x20\x01(\x05R\nrandomSee\
    d\x12\x18\n\x07mousedx\x18\x0b\x20\x01(\x05R\x07mousedx\x12\x18\n\x07mou\
    sedy\x18\x0c\x20\x01(\x05R\x07mousedy\x12*\n\x10hasbeenpredicted\x18\r\
    \x20\x01(\x08R\x10hasbeenpredicted\x126\n\x12pawn_entity_handle\x18\x0e\
    \x20\x01(\r:\x0816777215R\x10pawnEntityHandle\x126\n\rsubtick_moves\x18\
    \x12\x20\x03(\x0b2\x11.CSubtickMoveStepR\x0csubtickMoves\x12\x19\n\x08mo\
    ve_crc\x18\x13\x20\x01(\x0cR\x07moveCrc\x12A\n\x1dconsumed_server_angle_\
    changes\x18\x14\x20\x01(\rR\x1aconsumedServerAngleChanges\x12\x1b\n\tcmd\
    _flags\x18\x15\x20\x01(\x05R\x08cmdFlags\"5\n\x0eCUserCmdBasePB\x12#\n\
    \x04base\x18\x01\x20\x01(\x0b2\x0f.CBaseUserCmdPBR\x04base\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::networkbasetypes::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(CInButtonStatePB::generated_message_descriptor_data());
            messages.push(CSubtickMoveStep::generated_message_descriptor_data());
            messages.push(CBaseUserCmdPB::generated_message_descriptor_data());
            messages.push(CUserCmdBasePB::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
